Data path: /scratch/opt/lxu/CFLG/benchmarks/random_A
Instance: r_10_0.1_12.txt
Result path: /scratch/opt/lxu/CFLG/results/random_A
Solver: Gurobi
Time limit: 7200
Formulation: EFP
Cover: Small
julia --project=. src/main.jl /scratch/opt/lxu/CFLG/benchmarks/random_A r_10_0.1_12.txt /scratch/opt/lxu/CFLG/results/random_A Gurobi 7200 EFP Small
The latest version of Julia in the `release` channel is 1.11.5+0.x64.linux.gnu. You currently have `1.11.4+0.x64.linux.gnu` installed. Run:

  juliaup update

in your terminal shell to install Julia 1.11.5+0.x64.linux.gnu and update the `release` channel to that version.
/scratch/opt/lxu/CFLG/benchmarks/random_A Gurobi 7200.0 /scratch/opt/lxu/CFLG/results/random_A r_10_0.1_12.txt EFP Small
/scratch/opt/lxu/CFLG/benchmarks/random_A/r_10_0.1_12.txt

 read graph
data loaded


after absorb:9 10

max_piece:11
problem_graph/original graph: node: 51/10 edge: 53/12 dlt: 0.17080848955601058 break_avg_len: 0.15469448110733033 break_max_len: 0.16818377584941568elapsed CPU time: 0.026581 seconds
Set parameter TokenServer to value "solice01.zib.de"
Set parameter Threads to value 1
Set parameter OutputFlag to value 1
Set parameter MIPGap to value 0.0001
Set parameter MIPGapAbs to value 1
Set parameter TimeLimit to value 7199.973419

 more cuts:falsefalse
3 0
formulation:EFP0 53 51
ERROR: LoadError: Unsupported index type `CartesianIndex` in axis: Union{}[]. Cartesian indices are restricted for indexing into and iterating over multidimensional arrays.
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] _abstract_vector(x::Vector{Union{}})
    @ JuMP.Containers /scratch/opt/lxu/CFLG/.julia_depot/packages/JuMP/xlp0s/src/Containers/DenseAxisArray.jl:173
  [3] _broadcast_getindex_evalf
    @ ./broadcast.jl:678 [inlined]
  [4] _broadcast_getindex
    @ ./broadcast.jl:651 [inlined]
  [5] (::Base.Broadcast.var"#17#18"{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(JuMP.Containers._abstract_vector), Tuple{Tuple{Vector{Union{}}}}}})(k::Int64)
    @ Base.Broadcast ./broadcast.jl:1102
  [6] ntuple
    @ ./ntuple.jl:48 [inlined]
  [7] copy
    @ ./broadcast.jl:1102 [inlined]
  [8] materialize
    @ ./broadcast.jl:872 [inlined]
  [9] JuMP.Containers.DenseAxisArray(data::Vector{Union{}}, axes::Vector{Union{}}; names::Tuple{Symbol})
    @ JuMP.Containers /scratch/opt/lxu/CFLG/.julia_depot/packages/JuMP/xlp0s/src/Containers/DenseAxisArray.jl:221
 [10] container(f::Function, indices::JuMP.Containers.VectorizedProductIterator{Tuple{Vector{Union{}}}}, ::Type{JuMP.Containers.DenseAxisArray}, names::Vector{Any})
    @ JuMP.Containers /scratch/opt/lxu/CFLG/.julia_depot/packages/JuMP/xlp0s/src/Containers/container.jl:123
 [11] container(f::Function, indices::JuMP.Containers.VectorizedProductIterator{Tuple{Vector{Union{}}}}, ::Type{JuMP.Containers.AutoContainerType}, names::Vector{Any})
    @ JuMP.Containers /scratch/opt/lxu/CFLG/.julia_depot/packages/JuMP/xlp0s/src/Containers/container.jl:75
 [12] macro expansion
    @ /scratch/opt/lxu/CFLG/.julia_depot/packages/JuMP/xlp0s/src/macros.jl:400 [inlined]
 [13] solveEFP!(problem::Problem, formulation::FormulationSet, cflg::JuMP.Model, eassign::Nothing, vassign::Nothing)
    @ Main.CFLG /scratch/opt/lxu/CFLG/src/Algorithm.jl:288
 [14] solve!(problem::Problem, solver_name::String, option::Option, formulation::String)
    @ Main.CFLG /scratch/opt/lxu/CFLG/src/Algorithm.jl:106
 [15] main(args::Vector{String})
    @ Main /scratch/opt/lxu/CFLG/src/main.jl:39
 [16] top-level scope
    @ /scratch/opt/lxu/CFLG/src/main.jl:57
in expression starting at /scratch/opt/lxu/CFLG/src/main.jl:57
srun: error: htc-cmp483: task 0: Exited with exit code 1
