Data path: /scratch/opt/lxu/CFLG/benchmarks/tree_B
Instance: treeB.700.105
Result path: /scratch/opt/lxu/CFLG/results/tree_B
Solver: Gurobi
Time limit: 7200
Formulation: EF
Cover: Small
julia --project=. src/main.jl /scratch/opt/lxu/CFLG/benchmarks/tree_B treeB.700.105 /scratch/opt/lxu/CFLG/results/tree_B Gurobi 7200 EF Small
The latest version of Julia in the `release` channel is 1.11.5+0.x64.linux.gnu. You currently have `1.11.4+0.x64.linux.gnu` installed. Run:

  juliaup update

in your terminal shell to install Julia 1.11.5+0.x64.linux.gnu and update the `release` channel to that version.
/scratch/opt/lxu/CFLG/benchmarks/tree_B Gurobi 7200.0 /scratch/opt/lxu/CFLG/results/tree_B treeB.700.105 EF Small
/scratch/opt/lxu/CFLG/benchmarks/tree_B/treeB.700.105

 read graph
data loaded


after absorb:538 700

max_piece:19
problem_graph/original graph: node: 3410/700 edge: 3514/804 dlt: 0.3757050471451041 break_avg_len: 0.3438438906143035 break_max_len: 0.3756432861853157elapsed CPU time: 15.432832 seconds
Set parameter TokenServer to value "solice01.zib.de"
Set parameter Threads to value 1
Set parameter OutputFlag to value 1
Set parameter MIPGap to value 0.0001
Set parameter MIPGapAbs to value 0.999998
Set parameter TimeLimit to value 7184.567168
ERROR: LoadError: OutOfMemoryError()
Stacktrace:
  [1] GenericMemory
    @ ./boot.jl:516 [inlined]
  [2] new_as_memoryref
    @ ./boot.jl:535 [inlined]
  [3] Array
    @ ./boot.jl:582 [inlined]
  [4] Array
    @ ./boot.jl:592 [inlined]
  [5] similar
    @ ./abstractarray.jl:868 [inlined]
  [6] similar
    @ ./abstractarray.jl:867 [inlined]
  [7] _array_for
    @ ./array.jl:676 [inlined]
  [8] collect(itr::Base.Generator{JuMP.Containers.VectorizedProductIterator{Tuple{Vector{Int64}, Vector{Tuple{Int64, Int64}}}}, JuMP.Containers.var"#87#89"{Main.CFLG.var"#424#439"{JuMP.Model}}})
    @ Base ./array.jl:796
  [9] map(f::Function, A::JuMP.Containers.VectorizedProductIterator{Tuple{Vector{Int64}, Vector{Tuple{Int64, Int64}}}})
    @ Base ./abstractarray.jl:3399
 [10] container(f::Function, indices::JuMP.Containers.VectorizedProductIterator{Tuple{Vector{Int64}, Vector{Tuple{Int64, Int64}}}}, ::Type{JuMP.Containers.DenseAxisArray}, names::Vector{Any})
    @ JuMP.Containers /scratch/opt/lxu/CFLG/.julia_depot/packages/JuMP/xlp0s/src/Containers/container.jl:123
 [11] container
    @ /scratch/opt/lxu/CFLG/.julia_depot/packages/JuMP/xlp0s/src/Containers/container.jl:75 [inlined]
 [12] macro expansion
    @ /scratch/opt/lxu/CFLG/.julia_depot/packages/JuMP/xlp0s/src/macros.jl:400 [inlined]
 [13] solveEF!(problem::Problem, formulation::FormulationSet, cflg::JuMP.Model)
    @ Main.CFLG /scratch/opt/lxu/CFLG/src/Algorithm.jl:971
 [14] solve!(problem::Problem, solver_name::String, option::Option, formulation::String)
    @ Main.CFLG /scratch/opt/lxu/CFLG/src/Algorithm.jl:122
 [15] main(args::Vector{String})
    @ Main /scratch/opt/lxu/CFLG/src/main.jl:39
 [16] top-level scope
    @ /scratch/opt/lxu/CFLG/src/main.jl:57
in expression starting at /scratch/opt/lxu/CFLG/src/main.jl:57
srun: error: htc-cmp447: task 0: Exited with exit code 1
