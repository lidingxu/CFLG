Data path: /scratch/opt/lxu/CFLG/benchmarks/Kgroup_B
Instance: K400.4.red
Result path: /scratch/opt/lxu/CFLG/results/Kgroup_B
Solver: Gurobi
Time limit: 7200
Formulation: LEFPAV
Cover: Small
julia --project=. src/main.jl /scratch/opt/lxu/CFLG/benchmarks/Kgroup_B K400.4.red /scratch/opt/lxu/CFLG/results/Kgroup_B Gurobi 7200 LEFPAV Small
The latest version of Julia in the `release` channel is 1.11.5+0.x64.linux.gnu. You currently have `1.11.4+0.x64.linux.gnu` installed. Run:

  juliaup update

in your terminal shell to install Julia 1.11.5+0.x64.linux.gnu and update the `release` channel to that version.
/scratch/opt/lxu/CFLG/benchmarks/Kgroup_B Gurobi 7200.0 /scratch/opt/lxu/CFLG/results/Kgroup_B K400.4.red LEFPAV Small
/scratch/opt/lxu/CFLG/benchmarks/Kgroup_B/K400.4.red

 read graph
data loaded


after absorb:197 197

max_piece:20
problem_graph/original graph: node: 293/197 edge: 880/784 dlt: 0.05477336866861929 break_avg_len: 0.19519236834635248 break_max_len: 1.0Vbar/V, Ebar/E(293, 293, 880, 880)
(1, 105)(2, 159)(3, 169)(3, 198)(35, 198)(3, 17)(3, 119)(3, 49)(3, 199)(183, 199)(4, 52)(4, 200)(63, 200)(4, 201)(55, 201)(4, 85)(4, 202)(30, 202)(5, 85)(5, 126)(5, 30)(5, 156)(5, 203)(91, 203)(5, 137)(5, 170)(5, 204)(56, 204)(6, 104)(6, 19)(6, 53)(6, 89)(7, 195)(7, 49)(8, 205)(84, 205)(8, 27)(8, 193)(9, 28)(9, 191)(10, 52)(10, 164)(10, 138)(10, 137)(10, 73)(10, 173)(4, 10)(10, 85)(10, 30)(10, 186)(11, 206)(100, 206)(11, 106)(11, 64)(11, 125)(11, 76)(12, 77)(12, 20)(12, 143)(12, 115)(12, 97)(13, 135)(13, 21)(13, 207)(39, 207)(13, 147)(13, 208)(31, 208)(14, 117)(14, 101)(14, 81)(15, 91)(15, 163)(15, 63)(15, 55)(4, 15)(15, 56)(15, 120)(15, 30)(16, 117)(16, 101)(16, 96)(16, 81)(14, 209)(16, 209)(17, 35)(17, 79)(17, 183)(18, 82)(18, 62)(19, 210)(53, 210)(19, 89)(20, 54)(21, 92)(21, 38)(21, 39)(22, 106)(22, 98)(22, 57)(22, 32)(22, 151)(22, 76)(23, 25)(23, 211)(50, 211)(23, 166)(24, 28)(24, 191)(24, 182)(9, 212)(24, 212)(24, 179)(26, 123)(26, 181)(26, 109)(26, 68)(26, 139)(27, 54)(28, 101)(29, 180)(29, 84)(8, 29)(29, 193)(30, 63)(30, 156)(31, 135)(21, 31)(31, 39)(31, 147)(32, 108)(32, 43)(32, 98)(32, 159)(2, 33)(33, 88)(33, 108)(33, 131)(33, 213)(159, 213)(33, 214)(43, 214)(33, 99)(33, 140)(33, 172)(33, 146)(34, 54)(35, 195)(35, 49)(36, 187)(36, 195)(7, 36)(36, 215)(49, 215)(37, 152)(7, 37)(37, 216)(78, 216)(39, 135)(38, 39)(40, 165)(40, 110)(40, 53)(40, 86)(40, 89)(40, 217)(72, 217)(41, 91)(41, 180)(41, 163)(15, 41)(41, 56)(29, 41)(41, 218)(133, 218)(42, 107)(42, 124)(2, 42)(42, 158)(42, 57)(2, 43)(43, 88)(43, 108)(43, 131)(43, 159)(43, 98)(43, 140)(43, 172)(44, 219)(84, 219)(8, 44)(44, 220)(161, 220)(44, 139)(44, 193)(45, 221)(107, 221)(45, 222)(124, 222)(2, 45)(42, 223)(45, 223)(46, 104)(46, 74)(46, 162)(47, 169)(47, 187)(47, 195)(7, 47)(36, 224)(47, 224)(35, 47)(47, 49)(48, 93)(21, 48)(48, 83)(48, 147)(12, 48)(48, 197)(49, 187)(49, 195)(50, 166)(51, 142)(51, 130)(51, 141)(52, 63)(30, 52)(52, 55)(53, 89)(55, 63)(55, 85)(30, 225)(55, 225)(55, 156)(55, 56)(56, 63)(56, 85)(30, 56)(56, 156)(56, 226)(91, 226)(56, 137)(56, 170)(32, 57)(57, 124)(57, 98)(57, 158)(57, 146)(23, 58)(58, 66)(58, 149)(50, 58)(58, 227)(192, 227)(59, 107)(59, 124)(57, 59)(2, 59)(45, 228)(59, 228)(59, 158)(59, 146)(42, 229)(59, 229)(60, 135)(60, 92)(39, 60)(31, 60)(13, 60)(61, 136)(62, 82)(63, 156)(64, 82)(64, 185)(65, 230)(129, 230)(65, 171)(65, 172)(65, 144)(65, 88)(65, 175)(65, 99)(66, 231)(149, 231)(67, 101)(9, 67)(67, 81)(16, 67)(68, 135)(68, 139)(60, 68)(19, 69)(6, 69)(53, 69)(69, 86)(70, 152)(70, 232)(78, 232)(37, 233)(70, 233)(71, 107)(71, 124)(45, 71)(71, 80)(42, 71)(71, 167)(19, 72)(52, 73)(73, 186)(74, 162)(75, 91)(75, 153)(75, 111)(34, 234)(75, 234)(5, 75)(75, 235)(126, 235)(75, 236)(178, 236)(1, 237)(76, 237)(76, 105)(77, 83)(77, 115)(69, 77)(77, 238)(148, 238)(77, 197)(78, 152)(7, 78)(80, 107)(80, 124)(2, 80)(80, 88)(42, 80)(45, 239)(80, 239)(80, 167)(59, 80)(61, 80)(79, 81)(81, 119)(81, 183)(74, 83)(46, 83)(83, 174)(83, 148)(27, 84)(84, 240)(193, 240)(63, 85)(30, 241)(85, 241)(85, 156)(85, 170)(19, 242)(86, 242)(6, 86)(53, 86)(86, 89)(79, 87)(87, 191)(87, 182)(87, 179)(2, 88)(88, 159)(90, 165)(90, 177)(90, 196)(90, 132)(90, 126)(90, 243)(176, 243)(91, 156)(38, 92)(77, 93)(21, 93)(83, 93)(93, 115)(93, 147)(93, 148)(12, 244)(93, 244)(93, 197)(94, 152)(78, 94)(37, 94)(94, 172)(70, 245)(94, 245)(94, 99)(95, 165)(95, 246)(138, 246)(95, 164)(95, 247)(196, 247)(95, 132)(95, 186)(52, 96)(96, 248)(117, 248)(79, 96)(4, 96)(96, 119)(96, 120)(81, 96)(96, 183)(20, 97)(54, 97)(98, 108)(98, 159)(2, 99)(88, 99)(99, 131)(99, 159)(43, 99)(99, 140)(99, 249)(172, 249)(64, 100)(100, 105)(100, 125)(76, 100)(100, 185)(81, 101)(102, 112)(23, 102)(58, 102)(50, 102)(102, 192)(82, 103)(62, 103)(18, 103)(66, 250)(103, 250)(103, 149)(104, 184)(89, 104)(100, 106)(98, 106)(76, 106)(106, 185)(2, 107)(107, 124)(88, 107)(61, 107)(108, 159)(68, 251)(109, 251)(109, 139)(86, 110)(89, 110)(95, 110)(110, 186)(72, 110)(110, 165)(110, 138)(19, 110)(53, 110)(34, 111)(27, 111)(111, 178)(23, 112)(58, 112)(66, 112)(112, 149)(50, 112)(112, 252)(192, 252)(83, 113)(74, 113)(46, 113)(113, 174)(113, 197)(114, 138)(78, 114)(37, 114)(110, 114)(114, 144)(70, 114)(20, 115)(115, 194)(97, 115)(40, 115)(72, 115)(25, 253)(116, 253)(116, 179)(52, 117)(63, 117)(55, 117)(4, 117)(117, 254)(120, 254)(30, 117)(101, 118)(28, 118)(9, 118)(24, 118)(118, 128)(118, 155)(35, 119)(79, 255)(119, 255)(17, 256)(119, 256)(119, 257)(183, 257)(52, 120)(120, 163)(63, 120)(55, 258)(120, 258)(4, 259)(120, 259)(30, 120)(3, 260)(121, 260)(121, 130)(35, 121)(121, 160)(121, 183)(17, 121)(51, 261)(121, 261)(121, 142)(121, 141)(119, 121)(122, 135)(44, 122)(68, 122)(122, 189)(84, 122)(8, 122)(122, 161)(60, 122)(31, 122)(29, 123)(123, 181)(109, 123)(68, 123)(41, 123)(123, 134)(123, 139)(101, 123)(2, 124)(124, 158)(124, 146)(1, 125)(105, 262)(125, 262)(76, 125)(126, 178)(126, 156)(91, 126)(34, 126)(126, 137)(126, 170)(56, 126)(93, 127)(20, 127)(21, 127)(127, 143)(48, 127)(127, 147)(12, 127)(116, 128)(25, 128)(2, 129)(33, 129)(129, 172)(88, 129)(99, 263)(129, 263)(62, 130)(130, 141)(130, 187)(108, 131)(131, 264)(140, 264)(131, 159)(132, 165)(132, 170)(132, 137)(132, 265)(196, 265)(132, 164)(91, 133)(133, 180)(133, 266)(163, 266)(133, 157)(15, 133)(56, 133)(29, 133)(134, 180)(29, 134)(134, 139)(41, 134)(92, 135)(38, 135)(136, 184)(89, 136)(85, 267)(137, 267)(30, 137)(137, 268)(156, 268)(137, 170)(138, 164)(84, 139)(29, 139)(108, 140)(140, 159)(108, 141)(140, 141)(131, 141)(130, 142)(20, 269)(143, 269)(143, 194)(143, 153)(54, 270)(143, 270)(27, 143)(97, 143)(78, 144)(37, 144)(94, 144)(144, 171)(136, 144)(70, 144)(144, 271)(175, 271)(61, 144)(82, 145)(62, 145)(18, 145)(66, 145)(145, 149)(103, 272)(145, 272)(2, 146)(108, 146)(32, 146)(146, 159)(43, 146)(98, 146)(21, 273)(147, 273)(38, 147)(39, 147)(69, 148)(148, 174)(50, 149)(142, 150)(17, 150)(150, 274)(160, 274)(145, 150)(51, 150)(66, 150)(103, 150)(150, 192)(108, 151)(106, 151)(98, 275)(151, 275)(57, 151)(32, 276)(151, 276)(151, 158)(146, 151)(7, 152)(131, 152)(152, 172)(20, 153)(153, 194)(34, 153)(54, 153)(27, 153)(97, 153)(123, 154)(109, 154)(154, 181)(68, 154)(26, 154)(139, 154)(154, 188)(116, 155)(25, 155)(128, 155)(91, 277)(157, 277)(157, 180)(111, 157)(34, 157)(56, 157)(75, 157)(5, 157)(126, 157)(157, 178)(2, 158)(108, 158)(32, 158)(33, 158)(158, 159)(43, 158)(98, 158)(146, 158)(160, 192)(112, 160)(17, 160)(58, 160)(66, 160)(149, 160)(103, 160)(84, 278)(161, 278)(8, 161)(27, 161)(161, 193)(104, 162)(91, 163)(63, 163)(55, 163)(56, 163)(30, 163)(85, 164)(156, 164)(137, 164)(164, 170)(25, 166)(107, 167)(124, 279)(167, 279)(57, 167)(2, 167)(45, 280)(167, 280)(59, 281)(167, 281)(42, 167)(142, 168)(130, 168)(141, 168)(160, 168)(51, 168)(150, 168)(121, 282)(168, 282)(169, 187)(169, 283)(195, 283)(35, 169)(36, 169)(49, 284)(169, 284)(156, 285)(170, 285)(136, 171)(171, 175)(61, 171)(88, 172)(131, 172)(159, 172)(140, 172)(52, 173)(164, 173)(138, 173)(73, 173)(85, 173)(173, 186)(74, 174)(46, 174)(129, 175)(78, 175)(94, 175)(172, 175)(70, 175)(136, 175)(61, 175)(176, 194)(153, 176)(34, 176)(165, 176)(176, 196)(75, 176)(126, 176)(97, 176)(165, 177)(170, 177)(132, 177)(75, 177)(5, 177)(126, 177)(176, 177)(153, 178)(54, 178)(34, 178)(25, 179)(91, 180)(111, 180)(56, 180)(109, 181)(68, 181)(139, 181)(102, 182)(179, 286)(182, 286)(35, 287)(183, 287)(79, 183)(53, 184)(89, 184)(82, 288)(185, 288)(62, 185)(141, 185)(52, 186)(164, 289)(186, 289)(138, 186)(137, 186)(85, 186)(141, 187)(108, 187)(140, 187)(131, 187)(123, 188)(181, 290)(188, 290)(109, 188)(68, 188)(26, 291)(188, 291)(29, 188)(139, 292)(188, 292)(134, 188)(135, 189)(44, 189)(84, 189)(161, 189)(60, 189)(13, 189)(167, 190)(61, 190)(107, 190)(124, 190)(45, 190)(80, 190)(71, 190)(88, 190)(42, 190)(182, 191)(179, 191)(23, 192)(66, 192)(149, 192)(103, 192)(111, 193)(27, 193)(20, 194)(54, 194)(97, 293)(194, 293)(187, 195)(165, 196)(170, 196)(137, 196)(138, 196)(164, 196)(83, 197)(74, 197)(46, 197)(174, 197)(148, 197)(Dict{Int64, Float64}(), Int64[], 293, 880)Set parameter TokenServer to value "solice01.zib.de"
Set parameter Threads to value 1
Set parameter OutputFlag to value 1
Gurobi Optimizer version 12.0.1 build v12.0.1rc0 (linux64 - "Debian GNU/Linux 12 (bookworm)")

CPU model: Intel(R) Xeon(R) Gold 5122 CPU @ 3.60GHz, instruction set [SSE2|AVX|AVX2|AVX512]
Thread count: 8 physical cores, 16 logical processors, using up to 1 threads

Non-default parameters:
Threads  1

Optimize a model with 1173 rows, 2640 columns and 4400 nonzeros
Model fingerprint: 0xa20f97ff
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [1e+00, 1e+00]
  RHS range        [0e+00, 0e+00]
Presolve removed 1173 rows and 2640 columns
Presolve time: 0.00s
Presolve: All rows and columns removed
Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0   -0.0000000e+00   0.000000e+00   0.000000e+00      0s

Solved in 0 iterations and 0.00 seconds (0.00 work units)
Optimal objective -0.000000000e+00

User-callback calls 35, time in user-callback 0.00 sec
elapsed CPU time: 1.904623 seconds
Set parameter TokenServer to value "solice01.zib.de"
Set parameter Threads to value 1
Set parameter OutputFlag to value 1
Set parameter MIPGap to value 0.0001
Set parameter MIPGapAbs to value 0.999998
Set parameter TimeLimit to value 7198.095377

 more cuts: false 0.05477336866861929 false
is_attach:trueformulation:LEFPAV0 880 0
Set parameter PreCrush to value 1

 model loaded

Gurobi Optimizer version 12.0.1 build v12.0.1rc0 (linux64 - "Debian GNU/Linux 12 (bookworm)")

CPU model: Intel(R) Xeon(R) Gold 5122 CPU @ 3.60GHz, instruction set [SSE2|AVX|AVX2|AVX512]
Thread count: 8 physical cores, 16 logical processors, using up to 1 threads

Non-default parameters:
TimeLimit  7198.095377
MIPGapAbs  0.999998
PreCrush  1
Threads  1

Optimize a model with 13152 rows, 8906 columns and 35937 nonzeros
Model fingerprint: 0x0885ebb3
Variable types: 2053 continuous, 6853 integer (6853 binary)
Coefficient statistics:
  Matrix range     [2e-04, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [2e-04, 1e+00]
  RHS range        [2e-04, 1e+00]
Found heuristic solution: objective 866.0000000
Presolve removed 13107 rows and 8868 columns
Presolve time: 0.10s
Presolved: 45 rows, 38 columns, 116 nonzeros
Found heuristic solution: objective 667.0000000
Variable types: 11 continuous, 27 integer (27 binary)
Found heuristic solution: objective 664.0000000

Root relaxation: objective 6.600000e+02, 12 iterations, 0.00 seconds (0.00 work units)

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

*    0     0               0     660.0000000  660.00000  0.00%     -    0s

Explored 1 nodes (12 simplex iterations) in 0.11 seconds (0.07 work units)
Thread count was 1 (of 16 available processors)

Solution count 4: 660 664 667 866 

Optimal solution found (tolerance 1.00e-04)
Warning: max constraint violation (1.0000e-06) exceeds tolerance
Best objective 6.600000000000e+02, best bound 6.600000000000e+02, gap 0.0000%

User-callback calls 2297, time in user-callback 0.85 sec

 sepatime0 2298 0
660.0Stat(MathOptInterface.OPTIMAL, 660.0, 660.0, 0.0, 0.0, 1.904623, 0.10750889778137207, 1, Main.CFLG.LEFPAV, "", #undef)
