Data path: /scratch/opt/lxu/CFLG/benchmarks/Kgroup_B
Instance: K400.5.con.red
Result path: /scratch/opt/lxu/CFLG/results/Kgroup_B
Solver: Gurobi
Time limit: 7200
Formulation: LEFPAD
Cover: Small
julia --project=. src/main.jl /scratch/opt/lxu/CFLG/benchmarks/Kgroup_B K400.5.con.red /scratch/opt/lxu/CFLG/results/Kgroup_B Gurobi 7200 LEFPAD Small
The latest version of Julia in the `release` channel is 1.11.5+0.x64.linux.gnu. You currently have `1.11.4+0.x64.linux.gnu` installed. Run:

  juliaup update

in your terminal shell to install Julia 1.11.5+0.x64.linux.gnu and update the `release` channel to that version.
/scratch/opt/lxu/CFLG/benchmarks/Kgroup_B Gurobi 7200.0 /scratch/opt/lxu/CFLG/results/Kgroup_B K400.5.con.red LEFPAD Small
/scratch/opt/lxu/CFLG/benchmarks/Kgroup_B/K400.5.con.red

 read graph
data loaded


after absorb:219 220

max_piece:18
problem_graph/original graph: node: 325/220 edge: 904/799 dlt: 0.05895347633535096 break_avg_len: 0.20842401589356352 break_max_len: 1.0Vbar/V, Ebar/E(325, 325, 904, 904)
(2, 157)(2, 22)(2, 109)(2, 59)(3, 116)(3, 199)(4, 220)(57, 220)(4, 183)(4, 139)(4, 85)(5, 136)(5, 49)(5, 104)(5, 77)(5, 221)(178, 221)(5, 198)(5, 80)(5, 137)(7, 115)(7, 222)(206, 222)(7, 98)(8, 54)(9, 76)(9, 217)(9, 84)(9, 223)(205, 223)(10, 224)(76, 224)(10, 169)(10, 37)(9, 10)(10, 84)(10, 205)(11, 93)(8, 11)(11, 225)(40, 225)(11, 39)(11, 54)(11, 226)(189, 226)(12, 45)(12, 227)(32, 227)(12, 172)(12, 67)(12, 210)(13, 228)(120, 228)(13, 216)(13, 171)(7, 13)(13, 152)(13, 206)(13, 188)(13, 68)(15, 229)(123, 229)(15, 127)(15, 177)(15, 214)(16, 145)(16, 154)(1, 16)(17, 102)(17, 192)(17, 96)(17, 56)(17, 97)(19, 129)(19, 153)(19, 210)(19, 45)(20, 190)(20, 94)(21, 108)(21, 80)(21, 230)(99, 230)(22, 231)(59, 231)(22, 98)(23, 38)(23, 60)(23, 78)(23, 31)(25, 197)(25, 83)(25, 27)(25, 181)(26, 124)(26, 125)(27, 215)(23, 28)(28, 232)(60, 232)(28, 31)(29, 209)(29, 158)(30, 136)(30, 201)(30, 87)(30, 41)(30, 89)(30, 142)(31, 233)(38, 233)(31, 60)(31, 234)(78, 234)(32, 45)(32, 235)(67, 235)(32, 236)(210, 236)(33, 180)(34, 100)(34, 190)(34, 160)(35, 116)(3, 237)(35, 237)(35, 199)(36, 238)(38, 238)(36, 78)(31, 36)(36, 110)(36, 239)(37, 239)(37, 38)(37, 78)(37, 110)(37, 163)(38, 60)(38, 240)(78, 240)(39, 54)(39, 241)(40, 241)(40, 54)(41, 87)(41, 89)(41, 44)(42, 182)(42, 72)(42, 139)(42, 85)(43, 242)(72, 242)(43, 71)(43, 139)(43, 243)(101, 243)(42, 244)(43, 244)(43, 245)(151, 245)(43, 182)(43, 183)(43, 153)(43, 85)(44, 158)(44, 116)(44, 246)(89, 246)(45, 121)(14, 45)(45, 67)(23, 46)(46, 164)(47, 146)(47, 192)(47, 97)(48, 200)(48, 175)(48, 247)(180, 247)(33, 48)(48, 156)(49, 136)(49, 104)(30, 49)(49, 142)(23, 50)(46, 248)(50, 248)(2, 51)(40, 52)(39, 52)(52, 54)(53, 189)(53, 82)(40, 53)(53, 193)(53, 93)(53, 179)(11, 53)(53, 113)(53, 173)(55, 249)(105, 249)(55, 147)(55, 208)(55, 250)(186, 250)(55, 218)(55, 68)(55, 196)(56, 251)(102, 251)(56, 123)(56, 177)(15, 56)(56, 252)(127, 252)(56, 212)(56, 214)(56, 86)(57, 85)(58, 118)(58, 138)(58, 103)(58, 63)(50, 58)(58, 79)(58, 253)(66, 253)(59, 98)(60, 78)(61, 62)(1, 63)(63, 117)(63, 118)(63, 138)(63, 145)(16, 63)(64, 126)(64, 106)(65, 177)(6, 65)(23, 66)(66, 118)(66, 138)(63, 66)(50, 66)(46, 66)(14, 67)(68, 115)(7, 254)(68, 254)(68, 105)(68, 255)(206, 255)(68, 208)(68, 109)(68, 256)(152, 256)(69, 200)(48, 69)(69, 175)(69, 180)(69, 156)(57, 70)(70, 182)(70, 257)(140, 257)(51, 70)(4, 70)(70, 81)(71, 258)(160, 258)(71, 174)(72, 259)(183, 259)(71, 72)(72, 153)(72, 139)(72, 182)(72, 85)(73, 102)(25, 73)(73, 123)(73, 161)(73, 96)(15, 73)(56, 73)(74, 92)(33, 74)(74, 166)(61, 75)(32, 75)(75, 172)(12, 75)(75, 141)(75, 210)(18, 76)(76, 217)(76, 84)(77, 198)(79, 118)(79, 138)(63, 79)(50, 79)(79, 192)(79, 164)(66, 79)(80, 108)(80, 198)(80, 99)(51, 81)(82, 173)(40, 82)(11, 82)(82, 179)(55, 82)(82, 186)(82, 188)(83, 197)(27, 83)(83, 181)(83, 215)(36, 84)(37, 84)(84, 176)(84, 110)(85, 183)(85, 153)(86, 260)(127, 260)(86, 177)(86, 194)(87, 89)(44, 87)(24, 88)(88, 261)(164, 261)(89, 158)(89, 116)(61, 90)(32, 90)(90, 213)(90, 172)(12, 90)(90, 262)(141, 262)(75, 90)(91, 263)(121, 263)(14, 91)(91, 149)(34, 91)(92, 175)(48, 92)(92, 180)(33, 264)(92, 264)(92, 156)(93, 189)(8, 265)(93, 265)(40, 93)(54, 266)(93, 266)(94, 100)(71, 94)(94, 267)(190, 267)(94, 160)(34, 94)(94, 268)(174, 268)(95, 98)(96, 102)(25, 96)(96, 97)(97, 146)(99, 120)(99, 171)(99, 269)(108, 269)(71, 100)(100, 270)(190, 270)(100, 160)(100, 271)(174, 271)(72, 272)(101, 272)(71, 101)(101, 139)(42, 101)(101, 183)(101, 153)(85, 101)(86, 102)(102, 123)(102, 127)(102, 214)(15, 102)(103, 118)(103, 138)(63, 103)(50, 103)(103, 192)(79, 103)(103, 164)(66, 103)(104, 273)(136, 273)(104, 112)(104, 191)(104, 195)(105, 152)(105, 218)(105, 274)(208, 274)(100, 106)(106, 159)(106, 190)(20, 106)(94, 106)(106, 131)(34, 106)(18, 107)(107, 217)(63, 107)(107, 176)(107, 275)(132, 275)(22, 109)(109, 115)(59, 109)(109, 152)(109, 206)(38, 110)(78, 110)(31, 110)(111, 189)(111, 145)(8, 111)(16, 111)(112, 142)(113, 276)(173, 276)(40, 113)(39, 113)(11, 113)(113, 179)(113, 150)(82, 113)(113, 186)(113, 188)(113, 193)(114, 209)(114, 128)(29, 114)(114, 166)(114, 199)(22, 115)(59, 277)(115, 277)(115, 206)(98, 115)(116, 209)(116, 158)(116, 128)(116, 199)(111, 117)(117, 278)(145, 278)(1, 117)(16, 279)(117, 279)(118, 138)(119, 177)(6, 119)(68, 120)(120, 216)(120, 171)(7, 120)(108, 120)(120, 206)(14, 121)(36, 280)(122, 280)(37, 122)(38, 122)(122, 176)(78, 122)(31, 122)(122, 163)(110, 281)(122, 281)(6, 123)(123, 177)(123, 214)(46, 124)(88, 124)(124, 164)(124, 282)(125, 282)(124, 165)(124, 203)(124, 187)(88, 125)(125, 164)(125, 203)(125, 165)(125, 187)(46, 125)(107, 126)(106, 126)(123, 127)(127, 177)(127, 214)(128, 209)(128, 283)(158, 283)(29, 128)(128, 284)(199, 284)(57, 129)(129, 183)(129, 182)(129, 153)(4, 129)(85, 129)(52, 130)(80, 130)(131, 190)(20, 131)(94, 131)(131, 174)(36, 132)(37, 132)(132, 176)(122, 132)(84, 132)(3, 133)(74, 133)(133, 166)(133, 143)(111, 134)(8, 134)(134, 285)(167, 285)(134, 181)(27, 135)(135, 162)(65, 135)(136, 201)(112, 136)(136, 142)(136, 286)(137, 286)(49, 287)(137, 287)(104, 288)(137, 288)(137, 191)(137, 178)(47, 138)(139, 183)(139, 153)(85, 289)(139, 289)(57, 140)(140, 182)(51, 140)(4, 140)(81, 140)(61, 290)(141, 290)(62, 141)(87, 142)(41, 142)(89, 142)(119, 143)(143, 162)(65, 143)(6, 143)(74, 143)(144, 201)(112, 144)(29, 144)(114, 144)(144, 207)(1, 145)(20, 145)(131, 145)(147, 291)(184, 291)(147, 292)(154, 292)(147, 218)(147, 208)(148, 169)(62, 148)(121, 149)(14, 149)(99, 150)(82, 150)(39, 150)(40, 150)(11, 150)(21, 150)(150, 188)(150, 173)(72, 293)(151, 293)(139, 294)(151, 294)(4, 151)(101, 151)(42, 151)(151, 295)(182, 295)(151, 296)(183, 296)(151, 153)(85, 151)(129, 151)(115, 152)(98, 152)(7, 152)(152, 297)(206, 297)(59, 152)(71, 153)(153, 160)(154, 159)(145, 154)(154, 184)(20, 154)(131, 154)(121, 155)(155, 298)(204, 298)(91, 299)(155, 299)(34, 155)(156, 200)(156, 175)(156, 300)(180, 300)(33, 156)(115, 157)(109, 301)(157, 301)(59, 157)(152, 157)(159, 190)(20, 302)(159, 302)(131, 159)(159, 174)(6, 161)(123, 303)(161, 303)(161, 177)(15, 161)(127, 161)(161, 212)(161, 304)(214, 304)(56, 161)(161, 168)(161, 162)(65, 305)(161, 305)(135, 161)(6, 162)(65, 162)(23, 163)(36, 163)(38, 163)(78, 163)(31, 163)(60, 163)(110, 163)(24, 164)(24, 165)(88, 165)(165, 194)(165, 203)(164, 165)(33, 166)(167, 189)(111, 167)(8, 167)(93, 167)(167, 181)(168, 197)(27, 168)(83, 168)(162, 168)(65, 168)(135, 306)(168, 306)(62, 169)(124, 170)(24, 170)(88, 170)(170, 203)(125, 170)(165, 170)(164, 170)(171, 307)(216, 307)(108, 171)(95, 171)(45, 172)(32, 308)(172, 308)(67, 172)(172, 210)(173, 179)(55, 173)(173, 186)(173, 309)(188, 309)(160, 174)(175, 200)(175, 215)(36, 176)(37, 310)(176, 310)(38, 176)(163, 176)(110, 176)(6, 177)(49, 178)(77, 178)(178, 198)(179, 189)(154, 179)(147, 179)(11, 179)(55, 179)(179, 186)(180, 200)(175, 180)(181, 197)(93, 181)(181, 200)(8, 181)(54, 181)(181, 215)(27, 181)(139, 311)(182, 311)(4, 182)(182, 183)(85, 312)(182, 312)(57, 182)(71, 183)(153, 313)(183, 313)(159, 184)(101, 184)(20, 184)(131, 184)(43, 184)(42, 184)(22, 185)(59, 185)(95, 185)(105, 186)(147, 186)(186, 208)(50, 187)(88, 187)(164, 314)(187, 314)(187, 203)(46, 187)(120, 188)(7, 188)(55, 188)(186, 188)(8, 189)(40, 189)(54, 189)(160, 190)(174, 190)(136, 191)(112, 191)(130, 191)(191, 195)(146, 192)(97, 192)(150, 193)(82, 193)(39, 193)(40, 193)(52, 193)(11, 193)(188, 193)(173, 193)(119, 194)(130, 315)(195, 315)(80, 195)(157, 196)(7, 196)(109, 196)(152, 196)(105, 196)(196, 206)(68, 196)(196, 208)(27, 197)(197, 215)(198, 216)(108, 198)(95, 198)(199, 316)(209, 316)(158, 199)(29, 199)(112, 317)(201, 317)(29, 201)(142, 201)(99, 202)(173, 202)(120, 318)(202, 318)(7, 202)(13, 319)(202, 319)(202, 206)(82, 202)(186, 202)(188, 320)(202, 320)(113, 202)(68, 202)(24, 203)(88, 203)(164, 321)(203, 321)(121, 204)(91, 204)(19, 204)(18, 205)(76, 322)(205, 322)(205, 217)(64, 205)(84, 205)(98, 206)(59, 206)(69, 207)(48, 207)(180, 207)(158, 323)(209, 323)(45, 210)(67, 210)(162, 211)(74, 211)(143, 211)(86, 324)(212, 324)(102, 212)(119, 212)(123, 212)(127, 212)(177, 212)(212, 214)(15, 212)(169, 213)(32, 213)(172, 213)(141, 213)(67, 213)(6, 214)(177, 214)(200, 215)(108, 216)(95, 216)(18, 217)(37, 217)(176, 217)(84, 325)(217, 325)(132, 217)(101, 218)(184, 218)(42, 218)(43, 218)(208, 218)(92, 219)(48, 219)(33, 219)(156, 219)(215, 219)(Dict{Int64, Float64}(), Int64[], 325, 904)Set parameter TokenServer to value "solice01.zib.de"
Set parameter Threads to value 1
Set parameter OutputFlag to value 1
Gurobi Optimizer version 12.0.1 build v12.0.1rc0 (linux64 - "Debian GNU/Linux 12 (bookworm)")

CPU model: Intel(R) Xeon(R) Gold 5122 CPU @ 3.60GHz, instruction set [SSE2|AVX|AVX2|AVX512]
Thread count: 8 physical cores, 16 logical processors, using up to 1 threads

Non-default parameters:
Threads  1

Optimize a model with 1229 rows, 2712 columns and 4520 nonzeros
Model fingerprint: 0xc8ac4516
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [1e+00, 1e+00]
  RHS range        [0e+00, 0e+00]
Presolve removed 1229 rows and 2712 columns
Presolve time: 0.02s
Presolve: All rows and columns removed
Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0   -0.0000000e+00   0.000000e+00   0.000000e+00      0s

Solved in 0 iterations and 0.02 seconds (0.00 work units)
Optimal objective -0.000000000e+00

User-callback calls 35, time in user-callback 0.01 sec
elapsed CPU time: 1.89635 seconds
Set parameter TokenServer to value "solice01.zib.de"
Set parameter Threads to value 1
Set parameter OutputFlag to value 1
Set parameter MIPGap to value 0.0001
Set parameter MIPGapAbs to value 0.999998
Set parameter TimeLimit to value 7198.10365

 more cuts: false 0.05895347633535096 false
is_attach:trueformulation:LEFPAD0 904 0

 model loaded

Gurobi Optimizer version 12.0.1 build v12.0.1rc0 (linux64 - "Debian GNU/Linux 12 (bookworm)")

CPU model: Intel(R) Xeon(R) Gold 5122 CPU @ 3.60GHz, instruction set [SSE2|AVX|AVX2|AVX512]
Thread count: 8 physical cores, 16 logical processors, using up to 1 threads

Non-default parameters:
TimeLimit  7198.10365
MIPGapAbs  0.999998
Threads  1

Optimize a model with 18148 rows, 13819 columns and 50432 nonzeros
Model fingerprint: 0xba877b08
Variable types: 6747 continuous, 7072 integer (7072 binary)
Coefficient statistics:
  Matrix range     [6e-08, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [1e-03, 1e+00]
  RHS range        [1e-03, 1e+00]
Found heuristic solution: objective 887.0000000
Presolve removed 9633 rows and 3874 columns
Presolve time: 0.12s
Presolved: 8515 rows, 9945 columns, 31470 nonzeros
Variable types: 5324 continuous, 4621 integer (4621 binary)

Root relaxation: objective 6.630000e+02, 4033 iterations, 0.04 seconds (0.03 work units)

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0  663.00000    0   16  887.00000  663.00000  25.3%     -    0s
     0     0  663.00000    0   16  887.00000  663.00000  25.3%     -    0s
H    0     0                     884.0000000  663.00000  25.0%     -    0s
H    0     0                     865.0000000  663.00000  23.4%     -    0s
H    0     0                     835.0000000  663.00000  20.6%     -    0s
     0     0  663.00000    0    9  835.00000  663.00000  20.6%     -    0s
H    0     0                     663.0000000  663.00000  0.00%     -    0s
     0     0  663.00000    0    9  663.00000  663.00000  0.00%     -    0s

Cutting planes:
  Gomory: 6
  Cover: 4
  Implied bound: 2
  MIR: 7
  Flow cover: 5

Explored 1 nodes (4872 simplex iterations) in 0.36 seconds (0.22 work units)
Thread count was 1 (of 16 available processors)

Solution count 6: 663 663 835 ... 887

Optimal solution found (tolerance 1.00e-04)
Best objective 6.630000000000e+02, best bound 6.630000000000e+02, gap 0.0000%

User-callback calls 501, time in user-callback 0.00 sec

 sepatime0 0 0
663.0Stat(MathOptInterface.OPTIMAL, 663.0, 663.0, 0.0, 0.0, 1.89635, 0.3610990047454834, 1, Main.CFLG.LEFPAD, "", #undef)
