Data path: /scratch/opt/lxu/CFLG/benchmarks/Kgroup_B
Instance: K400.7.con.red
Result path: /scratch/opt/lxu/CFLG/results/Kgroup_B
Solver: Gurobi
Time limit: 7200
Formulation: LEFPA
Cover: Small
julia --project=. src/main.jl /scratch/opt/lxu/CFLG/benchmarks/Kgroup_B K400.7.con.red /scratch/opt/lxu/CFLG/results/Kgroup_B Gurobi 7200 LEFPA Small
The latest version of Julia in the `release` channel is 1.11.5+0.x64.linux.gnu. You currently have `1.11.4+0.x64.linux.gnu` installed. Run:

  juliaup update

in your terminal shell to install Julia 1.11.5+0.x64.linux.gnu and update the `release` channel to that version.
/scratch/opt/lxu/CFLG/benchmarks/Kgroup_B Gurobi 7200.0 /scratch/opt/lxu/CFLG/results/Kgroup_B K400.7.con.red LEFPA Small
/scratch/opt/lxu/CFLG/benchmarks/Kgroup_B/K400.7.con.red

 read graph
data loaded


after absorb:225 225

max_piece:24
problem_graph/original graph: node: 346/225 edge: 988/867 dlt: 0.044704290438595314 break_avg_len: 0.15691748911037287 break_max_len: 1.0Vbar/V, Ebar/E(344, 346, 986, 988)
(1, 119)(1, 131)(2, 122)(3, 160)(3, 125)(3, 201)(3, 196)(3, 85)(1, 4)(4, 119)(4, 226)(142, 226)(4, 87)(4, 58)(4, 131)(5, 118)(5, 227)(89, 227)(5, 228)(107, 228)(5, 158)(5, 31)(5, 84)(5, 151)(5, 173)(6, 229)(186, 229)(6, 156)(6, 230)(62, 230)(6, 63)(6, 144)(6, 35)(7, 22)(7, 60)(7, 212)(7, 101)(8, 174)(8, 103)(8, 18)(8, 231)(55, 231)(8, 223)(9, 105)(9, 217)(9, 146)(9, 153)(10, 92)(10, 68)(10, 199)(11, 22)(11, 60)(12, 120)(12, 95)(12, 148)(12, 124)(12, 232)(78, 232)(12, 209)(12, 20)(12, 225)(13, 105)(13, 114)(13, 14)(13, 68)(13, 16)(13, 15)(14, 233)(114, 233)(14, 120)(14, 36)(14, 16)(15, 68)(15, 146)(16, 36)(17, 172)(17, 123)(18, 103)(18, 174)(19, 234)(172, 234)(19, 171)(17, 19)(20, 235)(209, 235)(20, 167)(11, 21)(21, 46)(21, 102)(22, 101)(22, 236)(212, 236)(22, 60)(23, 39)(23, 79)(24, 94)(24, 104)(24, 49)(24, 154)(24, 44)(24, 183)(24, 34)(24, 159)(24, 213)(25, 162)(25, 123)(25, 90)(25, 171)(25, 134)(25, 81)(25, 102)(26, 215)(23, 26)(26, 39)(26, 96)(26, 237)(110, 237)(26, 79)(26, 136)(26, 75)(26, 214)(27, 174)(27, 194)(27, 190)(27, 200)(28, 120)(28, 124)(28, 95)(28, 78)(28, 209)(12, 28)(28, 225)(29, 121)(29, 141)(29, 96)(29, 180)(29, 144)(31, 139)(31, 238)(207, 238)(31, 89)(31, 84)(31, 145)(31, 176)(32, 39)(32, 79)(32, 61)(33, 126)(33, 117)(33, 100)(33, 220)(34, 183)(37, 122)(37, 239)(160, 239)(37, 48)(37, 240)(149, 240)(32, 37)(37, 111)(2, 241)(38, 241)(32, 38)(38, 100)(38, 122)(37, 38)(38, 149)(38, 48)(38, 160)(38, 166)(39, 79)(18, 40)(40, 223)(8, 40)(40, 55)(18, 41)(41, 242)(223, 242)(8, 41)(41, 174)(40, 243)(41, 243)(41, 103)(41, 244)(55, 244)(42, 48)(23, 42)(2, 42)(38, 42)(42, 206)(42, 149)(42, 220)(42, 100)(42, 221)(43, 94)(43, 70)(43, 73)(43, 155)(43, 183)(44, 94)(44, 70)(44, 73)(34, 44)(43, 245)(44, 245)(44, 183)(44, 246)(154, 246)(44, 155)(45, 193)(8, 45)(45, 53)(45, 204)(46, 60)(11, 46)(47, 64)(30, 47)(2, 48)(32, 48)(48, 100)(48, 122)(48, 149)(48, 160)(49, 183)(34, 49)(49, 159)(50, 88)(50, 218)(50, 130)(50, 198)(50, 99)(51, 64)(30, 51)(47, 51)(52, 223)(40, 52)(52, 184)(18, 53)(53, 223)(8, 53)(41, 53)(40, 53)(53, 193)(53, 55)(54, 215)(54, 178)(54, 161)(54, 61)(32, 54)(54, 111)(18, 55)(55, 223)(56, 103)(18, 56)(56, 174)(8, 56)(41, 56)(56, 193)(56, 190)(56, 200)(57, 72)(57, 163)(57, 218)(1, 58)(58, 119)(58, 131)(58, 247)(142, 247)(58, 248)(87, 248)(59, 96)(6, 59)(59, 75)(35, 59)(39, 59)(59, 79)(59, 249)(110, 249)(59, 215)(59, 186)(23, 59)(26, 250)(59, 250)(59, 63)(59, 136)(60, 101)(61, 79)(62, 156)(62, 63)(62, 97)(35, 62)(63, 156)(35, 251)(63, 251)(30, 64)(65, 172)(65, 129)(65, 252)(95, 252)(65, 134)(19, 65)(65, 225)(23, 66)(66, 75)(66, 169)(66, 117)(66, 220)(64, 67)(67, 224)(51, 67)(30, 67)(67, 159)(47, 253)(67, 253)(36, 68)(69, 108)(69, 150)(70, 254)(94, 254)(70, 183)(34, 70)(70, 205)(71, 224)(71, 108)(71, 255)(168, 255)(67, 71)(69, 256)(71, 256)(72, 257)(222, 257)(72, 163)(72, 204)(72, 177)(73, 258)(94, 258)(70, 73)(73, 183)(34, 73)(73, 213)(73, 205)(74, 118)(22, 74)(25, 74)(21, 74)(74, 212)(23, 75)(75, 169)(75, 214)(71, 77)(77, 223)(51, 77)(53, 77)(77, 210)(78, 95)(78, 148)(78, 259)(209, 259)(20, 78)(78, 167)(78, 225)(80, 147)(33, 80)(80, 87)(80, 113)(81, 123)(81, 260)(102, 260)(82, 195)(82, 92)(82, 203)(68, 82)(82, 199)(83, 223)(40, 83)(52, 83)(84, 118)(84, 109)(84, 155)(84, 192)(84, 137)(85, 132)(85, 201)(86, 122)(2, 86)(86, 112)(38, 86)(86, 179)(86, 261)(166, 261)(86, 100)(86, 113)(1, 87)(87, 262)(119, 262)(87, 131)(88, 130)(88, 191)(88, 138)(84, 89)(89, 192)(90, 167)(64, 91)(51, 91)(67, 91)(47, 91)(91, 191)(92, 195)(68, 92)(92, 199)(93, 223)(40, 93)(52, 93)(93, 184)(83, 93)(34, 263)(94, 263)(94, 205)(94, 183)(49, 94)(94, 159)(95, 209)(90, 95)(95, 134)(95, 167)(96, 264)(215, 264)(96, 265)(178, 265)(96, 266)(161, 266)(35, 97)(22, 98)(7, 98)(98, 155)(60, 98)(98, 101)(99, 218)(57, 267)(99, 267)(100, 122)(2, 268)(100, 268)(102, 269)(123, 269)(103, 222)(103, 174)(97, 104)(104, 144)(104, 183)(15, 270)(105, 270)(68, 105)(105, 146)(106, 271)(147, 271)(106, 179)(33, 106)(86, 106)(80, 106)(106, 113)(107, 118)(89, 107)(74, 107)(84, 107)(25, 107)(49, 108)(108, 224)(108, 150)(108, 159)(108, 213)(109, 205)(109, 155)(43, 109)(44, 109)(96, 110)(6, 110)(75, 110)(35, 110)(39, 110)(79, 110)(110, 215)(110, 186)(23, 110)(63, 110)(110, 136)(61, 111)(79, 111)(32, 272)(111, 272)(112, 122)(113, 122)(112, 113)(36, 114)(16, 114)(115, 187)(115, 157)(20, 115)(97, 115)(115, 145)(1, 116)(116, 185)(116, 273)(132, 273)(116, 201)(85, 116)(4, 116)(116, 135)(116, 184)(117, 169)(101, 118)(118, 212)(22, 118)(119, 131)(114, 120)(36, 120)(16, 120)(121, 215)(121, 178)(121, 161)(121, 141)(96, 121)(121, 144)(120, 124)(36, 124)(122, 125)(125, 160)(37, 125)(112, 125)(125, 274)(196, 274)(125, 166)(66, 126)(117, 126)(126, 169)(105, 127)(13, 127)(15, 127)(68, 127)(118, 128)(22, 128)(74, 128)(11, 128)(21, 128)(128, 212)(46, 128)(129, 275)(197, 275)(28, 129)(129, 225)(130, 138)(112, 131)(131, 196)(1, 276)(132, 276)(132, 277)(185, 277)(131, 132)(132, 142)(4, 278)(132, 278)(132, 135)(120, 133)(124, 133)(78, 133)(20, 133)(133, 209)(12, 133)(133, 216)(134, 209)(90, 279)(134, 279)(134, 167)(1, 135)(119, 135)(135, 142)(4, 135)(135, 280)(185, 280)(87, 135)(58, 135)(131, 135)(136, 215)(121, 136)(136, 186)(96, 136)(63, 136)(6, 136)(35, 136)(137, 155)(109, 281)(137, 281)(43, 137)(138, 205)(139, 148)(139, 207)(115, 139)(20, 139)(139, 145)(139, 176)(88, 140)(50, 140)(140, 282)(181, 282)(140, 218)(130, 140)(140, 198)(99, 140)(141, 215)(141, 283)(178, 283)(141, 284)(161, 284)(96, 285)(141, 285)(1, 286)(142, 286)(119, 287)(142, 287)(131, 288)(142, 288)(87, 142)(51, 143)(91, 143)(143, 210)(143, 198)(45, 143)(97, 144)(35, 144)(144, 156)(62, 289)(144, 289)(63, 144)(145, 148)(89, 145)(20, 145)(147, 179)(33, 147)(113, 147)(20, 148)(134, 148)(148, 290)(167, 290)(148, 291)(209, 291)(2, 149)(32, 292)(149, 292)(122, 149)(111, 149)(149, 160)(104, 150)(118, 151)(89, 151)(107, 151)(74, 151)(151, 158)(84, 151)(151, 293)(173, 293)(60, 152)(98, 152)(114, 153)(153, 217)(16, 153)(94, 154)(70, 154)(73, 154)(43, 154)(154, 294)(183, 294)(34, 154)(101, 295)(155, 295)(7, 296)(155, 296)(155, 212)(22, 155)(97, 156)(35, 297)(156, 297)(104, 157)(156, 157)(62, 157)(97, 298)(157, 298)(144, 157)(118, 158)(107, 158)(74, 299)(158, 299)(84, 158)(128, 158)(158, 212)(158, 300)(173, 300)(30, 159)(34, 159)(159, 183)(32, 160)(122, 160)(111, 160)(112, 160)(161, 178)(90, 162)(20, 162)(162, 167)(134, 301)(162, 301)(163, 302)(222, 302)(163, 204)(99, 164)(57, 164)(164, 170)(126, 165)(165, 303)(182, 303)(165, 169)(2, 304)(166, 304)(100, 166)(122, 305)(166, 305)(48, 166)(112, 166)(160, 166)(49, 168)(168, 224)(108, 168)(159, 168)(67, 168)(69, 168)(23, 169)(72, 170)(170, 194)(163, 170)(57, 170)(170, 177)(162, 171)(123, 171)(90, 171)(134, 171)(102, 171)(81, 171)(162, 172)(123, 172)(95, 172)(90, 172)(171, 172)(134, 172)(118, 173)(22, 173)(89, 173)(107, 306)(173, 306)(74, 173)(84, 173)(173, 212)(174, 222)(126, 175)(33, 175)(117, 175)(175, 220)(154, 176)(109, 176)(43, 176)(44, 176)(137, 176)(176, 192)(177, 307)(222, 307)(174, 177)(163, 308)(177, 308)(122, 179)(112, 179)(166, 179)(113, 179)(180, 186)(62, 309)(180, 309)(63, 180)(6, 310)(180, 310)(144, 180)(35, 180)(88, 181)(50, 311)(181, 311)(130, 181)(181, 218)(181, 198)(99, 181)(181, 204)(126, 312)(182, 312)(117, 182)(169, 182)(184, 201)(58, 185)(1, 313)(185, 313)(119, 185)(131, 185)(142, 185)(4, 314)(185, 314)(97, 186)(144, 186)(35, 315)(186, 315)(156, 186)(62, 316)(186, 316)(63, 317)(186, 317)(156, 187)(97, 187)(129, 188)(95, 188)(65, 188)(188, 197)(78, 188)(12, 188)(28, 318)(188, 318)(188, 319)(225, 319)(174, 190)(190, 200)(64, 320)(191, 320)(30, 191)(47, 191)(155, 192)(109, 192)(44, 192)(137, 321)(192, 321)(174, 193)(8, 322)(193, 322)(41, 323)(193, 323)(40, 324)(193, 324)(18, 325)(193, 325)(55, 326)(193, 326)(193, 327)(223, 327)(194, 222)(174, 194)(177, 194)(165, 195)(195, 199)(68, 195)(122, 196)(160, 196)(112, 196)(114, 197)(14, 197)(16, 197)(153, 197)(198, 204)(68, 199)(174, 200)(126, 202)(33, 202)(182, 328)(202, 328)(165, 202)(175, 202)(195, 203)(92, 203)(165, 203)(199, 203)(68, 203)(204, 222)(30, 205)(2, 329)(206, 329)(100, 206)(122, 330)(206, 330)(37, 206)(38, 331)(206, 331)(125, 206)(149, 206)(48, 332)(206, 332)(112, 206)(86, 206)(160, 206)(166, 333)(206, 333)(89, 207)(145, 334)(207, 334)(176, 207)(1, 208)(185, 208)(132, 208)(201, 208)(4, 208)(116, 335)(208, 335)(135, 208)(184, 208)(167, 336)(209, 336)(193, 210)(210, 223)(8, 210)(53, 337)(210, 337)(55, 210)(45, 210)(71, 211)(150, 211)(69, 211)(101, 212)(94, 213)(49, 338)(213, 338)(183, 213)(34, 339)(213, 339)(159, 340)(213, 340)(23, 214)(39, 214)(61, 214)(79, 214)(178, 341)(215, 341)(161, 342)(215, 342)(139, 216)(187, 216)(115, 216)(78, 216)(20, 216)(146, 217)(72, 218)(163, 218)(83, 219)(52, 219)(208, 219)(116, 219)(93, 219)(56, 219)(190, 219)(200, 219)(23, 220)(117, 220)(169, 220)(2, 221)(32, 221)(100, 221)(122, 221)(206, 343)(221, 343)(37, 221)(38, 221)(125, 221)(149, 221)(48, 221)(160, 221)(166, 221)(18, 223)(49, 344)(224, 344)(24, 224)(34, 224)(159, 345)(224, 345)(213, 224)(95, 346)(225, 346)(134, 225)(167, 225)(209, 225)(Dict(154 => 2.0, 45 => 2.0), [45, 154], 346, 988)Set parameter TokenServer to value "solice01.zib.de"
Set parameter Threads to value 1
Set parameter OutputFlag to value 1
Gurobi Optimizer version 12.0.1 build v12.0.1rc0 (linux64 - "Debian GNU/Linux 12 (bookworm)")

CPU model: Intel(R) Xeon(R) Gold 5122 CPU @ 3.60GHz, instruction set [SSE2|AVX|AVX2|AVX512]
Thread count: 8 physical cores, 16 logical processors, using up to 1 threads

Non-default parameters:
Threads  1

Optimize a model with 1334 rows, 2964 columns and 4940 nonzeros
Model fingerprint: 0xe40d4577
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [1e+00, 1e+00]
  RHS range        [1e+00, 1e+00]
Presolve removed 1334 rows and 2964 columns
Presolve time: 0.00s
Presolve: All rows and columns removed
Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    2.0000000e+00   0.000000e+00   0.000000e+00      0s

Solved in 0 iterations and 0.00 seconds (0.00 work units)
Optimal objective  2.000000000e+00

User-callback calls 35, time in user-callback 0.01 sec
elapsed CPU time: 1.990161 seconds
Set parameter TokenServer to value "solice01.zib.de"
Set parameter Threads to value 1
Set parameter OutputFlag to value 1
Set parameter MIPGap to value 0.0001
Set parameter MIPGapAbs to value 0.999998
Set parameter TimeLimit to value 7198.009839

 more cuts: false 0.044704290438595314 false
is_attach:trueformulation:LEFPA0 988 0

 model loaded

Gurobi Optimizer version 12.0.1 build v12.0.1rc0 (linux64 - "Debian GNU/Linux 12 (bookworm)")

CPU model: Intel(R) Xeon(R) Gold 5122 CPU @ 3.60GHz, instruction set [SSE2|AVX|AVX2|AVX512]
Thread count: 8 physical cores, 16 logical processors, using up to 1 threads

Non-default parameters:
TimeLimit  7198.009839
MIPGapAbs  0.999998
Threads  1

Optimize a model with 15564 rows, 10408 columns and 42680 nonzeros
Model fingerprint: 0x7060809a
Variable types: 2322 continuous, 8086 integer (8086 binary)
Coefficient statistics:
  Matrix range     [2e-04, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [2e-04, 1e+00]
  RHS range        [1e-06, 1e+00]
Found heuristic solution: objective 962.0000000
Presolve removed 15184 rows and 10069 columns
Presolve time: 0.20s
Presolved: 380 rows, 339 columns, 1886 nonzeros
Found heuristic solution: objective 749.0000000
Variable types: 77 continuous, 262 integer (262 binary)
Found heuristic solution: objective 743.0000000

Root relaxation: objective 7.220000e+02, 96 iterations, 0.00 seconds (0.00 work units)

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

H    0     0                     722.0000000  722.00000  0.00%     -    0s
     0     0  722.00000    0   13  722.00000  722.00000  0.00%     -    0s

Explored 1 nodes (96 simplex iterations) in 0.22 seconds (0.14 work units)
Thread count was 1 (of 16 available processors)

Solution count 4: 722 743 749 962 

Optimal solution found (tolerance 1.00e-04)
Warning: max constraint violation (1.0000e-06) exceeds tolerance
Best objective 7.220000000000e+02, best bound 7.220000000000e+02, gap 0.0000%

User-callback calls 2157, time in user-callback 0.00 sec

 sepatime0 0 0
722.0Stat(MathOptInterface.OPTIMAL, 722.0, 722.0, 0.0, 0.0, 1.990161, 0.21752405166625977, 1, Main.CFLG.LEFPA, "", #undef)
