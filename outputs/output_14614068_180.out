Data path: /scratch/opt/lxu/CFLG/benchmarks/Kgroup_B
Instance: K400.red
Result path: /scratch/opt/lxu/CFLG/results/Kgroup_B
Solver: Gurobi
Time limit: 7200
Formulation: LEFPA
Cover: Small
julia --project=. src/main.jl /scratch/opt/lxu/CFLG/benchmarks/Kgroup_B K400.red /scratch/opt/lxu/CFLG/results/Kgroup_B Gurobi 7200 LEFPA Small
The latest version of Julia in the `release` channel is 1.11.5+0.x64.linux.gnu. You currently have `1.11.4+0.x64.linux.gnu` installed. Run:

  juliaup update

in your terminal shell to install Julia 1.11.5+0.x64.linux.gnu and update the `release` channel to that version.
/scratch/opt/lxu/CFLG/benchmarks/Kgroup_B Gurobi 7200.0 /scratch/opt/lxu/CFLG/results/Kgroup_B K400.red LEFPA Small
/scratch/opt/lxu/CFLG/benchmarks/Kgroup_B/K400.red

 read graph
data loaded


after absorb:231 231

max_piece:20
problem_graph/original graph: node: 322/231 edge: 1005/914 dlt: 0.05018066207441731 break_avg_len: 0.18254776173539236 break_max_len: 1.0Vbar/V, Ebar/E(322, 322, 1005, 1005)
(1, 232)(121, 232)(1, 7)(1, 158)(1, 61)(1, 233)(80, 233)(2, 125)(2, 163)(2, 114)(2, 6)(3, 85)(3, 18)(3, 188)(3, 52)(3, 197)(3, 229)(3, 135)(5, 9)(5, 223)(5, 27)(5, 234)(214, 234)(5, 235)(13, 235)(5, 194)(5, 187)(7, 121)(4, 236)(8, 236)(8, 138)(8, 55)(9, 22)(9, 60)(9, 223)(9, 27)(9, 214)(9, 13)(10, 88)(10, 99)(10, 139)(10, 147)(10, 112)(11, 98)(12, 92)(12, 170)(12, 83)(13, 187)(13, 237)(223, 237)(13, 27)(13, 69)(13, 206)(14, 116)(14, 238)(123, 238)(14, 16)(15, 239)(90, 239)(15, 128)(15, 169)(15, 120)(15, 141)(16, 152)(16, 240)(36, 240)(17, 126)(17, 21)(17, 76)(17, 172)(17, 241)(104, 241)(4, 18)(18, 242)(188, 242)(18, 243)(135, 243)(19, 126)(19, 128)(19, 182)(19, 21)(19, 76)(19, 120)(20, 49)(20, 24)(21, 126)(21, 79)(21, 104)(22, 60)(22, 244)(218, 244)(22, 103)(23, 245)(39, 245)(3, 25)(25, 174)(25, 85)(26, 93)(26, 203)(26, 171)(27, 153)(27, 56)(27, 194)(27, 230)(27, 69)(27, 206)(28, 246)(92, 246)(12, 28)(28, 170)(28, 137)(29, 212)(29, 54)(29, 148)(29, 227)(30, 221)(30, 105)(30, 247)(63, 247)(30, 147)(31, 213)(31, 155)(31, 68)(31, 46)(32, 39)(33, 213)(7, 33)(31, 33)(33, 155)(33, 68)(33, 248)(222, 248)(33, 249)(46, 249)(34, 98)(11, 34)(34, 186)(35, 105)(35, 198)(36, 152)(37, 38)(38, 169)(4, 40)(8, 40)(18, 40)(40, 188)(40, 55)(40, 229)(40, 135)(40, 138)(4, 41)(40, 41)(41, 188)(41, 55)(41, 138)(42, 91)(37, 42)(43, 122)(43, 73)(43, 250)(219, 250)(44, 106)(44, 157)(44, 122)(44, 251)(73, 251)(43, 44)(44, 252)(219, 252)(45, 116)(14, 45)(45, 195)(16, 45)(46, 207)(46, 155)(46, 68)(47, 212)(8, 47)(47, 64)(40, 47)(4, 47)(47, 138)(47, 55)(48, 125)(48, 163)(2, 48)(48, 114)(48, 152)(48, 200)(6, 253)(48, 253)(49, 98)(34, 49)(49, 103)(11, 49)(49, 218)(49, 162)(22, 49)(50, 58)(50, 160)(50, 145)(51, 96)(34, 51)(41, 51)(11, 51)(51, 215)(51, 55)(51, 162)(51, 138)(18, 52)(52, 254)(188, 254)(52, 229)(52, 135)(40, 52)(41, 52)(52, 197)(52, 53)(4, 53)(8, 53)(41, 53)(40, 53)(18, 53)(53, 188)(53, 55)(53, 197)(53, 229)(53, 135)(53, 138)(54, 212)(54, 95)(4, 255)(55, 255)(18, 55)(55, 138)(56, 230)(56, 110)(56, 256)(194, 256)(56, 69)(57, 159)(57, 133)(57, 224)(58, 115)(58, 114)(58, 257)(145, 257)(58, 183)(58, 89)(58, 102)(2, 59)(26, 59)(59, 93)(60, 103)(61, 258)(121, 258)(7, 61)(61, 259)(158, 259)(61, 260)(80, 260)(61, 100)(62, 198)(62, 159)(35, 62)(63, 105)(63, 198)(35, 63)(64, 212)(64, 181)(64, 186)(65, 123)(65, 132)(14, 65)(66, 157)(66, 73)(66, 226)(66, 89)(41, 67)(51, 67)(11, 67)(67, 138)(55, 67)(67, 215)(53, 67)(68, 207)(69, 110)(69, 153)(69, 230)(70, 96)(49, 70)(70, 98)(11, 70)(70, 186)(34, 261)(70, 261)(70, 162)(70, 103)(71, 146)(71, 172)(71, 104)(17, 71)(72, 262)(177, 262)(32, 72)(72, 263)(210, 263)(39, 72)(72, 113)(23, 72)(72, 228)(72, 166)(73, 219)(73, 89)(74, 106)(74, 264)(157, 264)(73, 74)(74, 129)(74, 265)(201, 265)(43, 74)(44, 74)(74, 226)(66, 74)(75, 91)(42, 75)(75, 113)(75, 180)(76, 126)(76, 79)(21, 266)(76, 266)(76, 172)(76, 104)(77, 105)(77, 134)(30, 267)(77, 267)(63, 77)(77, 147)(77, 211)(78, 165)(78, 151)(78, 211)(78, 134)(78, 87)(80, 121)(7, 80)(80, 158)(80, 100)(81, 142)(81, 86)(81, 101)(57, 81)(28, 81)(22, 82)(49, 82)(9, 82)(20, 82)(82, 218)(79, 83)(83, 104)(84, 164)(84, 212)(84, 181)(84, 199)(84, 209)(84, 227)(18, 85)(85, 188)(85, 229)(85, 135)(86, 179)(86, 159)(86, 224)(57, 268)(86, 268)(86, 173)(86, 196)(87, 134)(87, 211)(37, 88)(38, 88)(88, 177)(72, 88)(88, 169)(88, 113)(89, 183)(90, 128)(90, 182)(90, 169)(90, 120)(90, 269)(141, 269)(37, 91)(91, 113)(24, 92)(92, 270)(170, 270)(93, 195)(41, 94)(51, 94)(53, 94)(94, 185)(94, 215)(94, 168)(67, 94)(49, 271)(96, 271)(96, 98)(11, 96)(34, 96)(96, 162)(96, 186)(14, 97)(97, 116)(97, 123)(45, 97)(97, 272)(195, 272)(16, 97)(97, 171)(98, 103)(99, 105)(99, 198)(35, 99)(100, 121)(101, 142)(86, 101)(92, 101)(12, 101)(57, 101)(28, 101)(6, 102)(102, 125)(102, 183)(102, 273)(114, 273)(104, 126)(79, 104)(105, 198)(106, 122)(73, 106)(43, 106)(106, 219)(90, 274)(107, 274)(107, 128)(107, 169)(15, 107)(107, 120)(107, 141)(108, 124)(108, 144)(108, 111)(71, 275)(109, 275)(109, 126)(109, 146)(21, 109)(76, 109)(109, 172)(104, 109)(17, 109)(110, 276)(230, 276)(110, 153)(1, 111)(95, 111)(112, 177)(38, 112)(112, 130)(72, 112)(88, 112)(99, 112)(112, 277)(139, 277)(112, 113)(32, 113)(39, 113)(23, 113)(6, 114)(114, 125)(114, 183)(115, 163)(114, 278)(115, 278)(115, 183)(6, 115)(102, 115)(36, 116)(16, 116)(117, 156)(75, 279)(117, 279)(42, 117)(117, 180)(54, 280)(118, 280)(118, 148)(95, 118)(106, 119)(119, 173)(56, 119)(119, 194)(69, 119)(119, 187)(120, 128)(79, 120)(120, 182)(122, 221)(116, 123)(36, 123)(16, 123)(1, 124)(124, 144)(111, 124)(95, 124)(6, 125)(79, 126)(127, 207)(127, 230)(110, 127)(68, 127)(37, 128)(128, 281)(182, 281)(128, 169)(129, 157)(73, 129)(129, 226)(89, 129)(66, 282)(129, 282)(130, 228)(130, 177)(72, 130)(130, 166)(32, 130)(113, 283)(130, 283)(130, 210)(88, 130)(131, 157)(73, 131)(74, 284)(131, 284)(129, 131)(131, 201)(44, 131)(66, 131)(131, 226)(7, 132)(132, 158)(132, 225)(100, 132)(132, 222)(133, 159)(120, 133)(133, 141)(134, 221)(30, 134)(63, 134)(134, 211)(4, 135)(135, 188)(124, 136)(108, 285)(136, 285)(136, 144)(111, 136)(136, 148)(24, 137)(92, 137)(20, 137)(137, 170)(4, 138)(139, 177)(130, 139)(72, 139)(88, 286)(139, 286)(113, 139)(140, 224)(140, 173)(38, 141)(128, 141)(141, 169)(120, 141)(90, 142)(107, 142)(133, 142)(57, 142)(15, 142)(120, 142)(58, 143)(78, 143)(50, 143)(143, 160)(143, 145)(143, 287)(184, 287)(111, 144)(95, 144)(144, 155)(115, 145)(145, 183)(89, 145)(102, 145)(83, 146)(25, 146)(3, 146)(146, 172)(104, 146)(17, 146)(105, 288)(147, 288)(147, 198)(63, 147)(99, 147)(35, 147)(54, 148)(48, 149)(2, 149)(149, 152)(149, 203)(45, 149)(149, 231)(150, 175)(25, 150)(150, 174)(85, 150)(102, 151)(152, 289)(163, 289)(2, 152)(6, 152)(153, 230)(8, 154)(64, 154)(4, 154)(138, 154)(55, 154)(47, 154)(155, 207)(68, 155)(23, 156)(156, 180)(73, 290)(157, 290)(106, 157)(43, 157)(157, 219)(89, 157)(121, 158)(7, 291)(158, 291)(159, 198)(99, 159)(35, 159)(151, 160)(160, 292)(190, 292)(114, 160)(145, 160)(102, 160)(115, 160)(77, 161)(134, 161)(30, 161)(87, 161)(161, 216)(161, 293)(176, 293)(161, 211)(98, 162)(11, 294)(162, 294)(162, 186)(34, 295)(162, 295)(114, 163)(163, 183)(6, 163)(164, 212)(164, 181)(164, 227)(151, 165)(23, 166)(166, 228)(39, 166)(166, 177)(32, 166)(113, 166)(166, 210)(163, 167)(152, 167)(167, 200)(66, 167)(36, 296)(167, 296)(16, 167)(96, 168)(49, 168)(41, 168)(51, 168)(11, 168)(168, 297)(185, 297)(168, 215)(162, 168)(67, 168)(37, 169)(24, 170)(93, 171)(171, 203)(171, 195)(126, 172)(79, 172)(21, 172)(83, 172)(104, 172)(173, 189)(62, 173)(173, 298)(224, 298)(18, 174)(174, 229)(135, 174)(3, 174)(85, 174)(18, 175)(175, 229)(135, 175)(25, 175)(3, 175)(8, 175)(174, 299)(175, 299)(85, 300)(175, 300)(77, 176)(134, 176)(30, 176)(87, 176)(176, 216)(176, 211)(177, 228)(32, 177)(113, 301)(177, 301)(178, 213)(144, 178)(31, 178)(33, 178)(155, 302)(178, 302)(68, 178)(178, 222)(46, 178)(179, 189)(159, 303)(179, 303)(62, 179)(133, 179)(179, 224)(99, 179)(57, 179)(173, 179)(23, 180)(39, 180)(180, 228)(113, 180)(180, 210)(181, 212)(181, 227)(37, 182)(169, 182)(6, 183)(58, 184)(184, 190)(50, 184)(160, 184)(145, 184)(102, 184)(115, 184)(96, 185)(34, 185)(41, 185)(11, 185)(185, 215)(49, 185)(51, 185)(20, 185)(162, 185)(186, 212)(181, 186)(98, 186)(11, 186)(110, 187)(153, 187)(56, 187)(187, 194)(187, 230)(27, 187)(69, 304)(187, 304)(4, 188)(189, 198)(159, 189)(62, 305)(189, 305)(99, 189)(35, 306)(189, 306)(165, 190)(151, 307)(190, 307)(114, 190)(102, 190)(1, 191)(124, 191)(29, 192)(181, 192)(192, 212)(118, 192)(54, 192)(148, 192)(192, 227)(86, 193)(81, 193)(137, 193)(140, 193)(193, 196)(194, 230)(110, 194)(69, 308)(194, 308)(116, 195)(14, 195)(196, 224)(173, 196)(140, 196)(4, 197)(8, 197)(41, 197)(40, 197)(18, 197)(188, 309)(197, 309)(55, 197)(197, 310)(229, 310)(135, 311)(197, 311)(138, 197)(148, 199)(199, 227)(163, 200)(2, 200)(114, 200)(152, 312)(200, 312)(183, 200)(6, 200)(106, 201)(157, 201)(73, 201)(110, 201)(56, 201)(66, 201)(92, 202)(20, 202)(137, 202)(193, 202)(28, 202)(45, 203)(195, 203)(173, 204)(5, 204)(204, 214)(119, 204)(140, 204)(196, 204)(108, 205)(136, 205)(118, 205)(148, 205)(95, 205)(206, 230)(153, 206)(69, 206)(207, 230)(153, 313)(207, 313)(27, 207)(206, 207)(60, 208)(208, 209)(208, 218)(103, 208)(60, 209)(103, 209)(209, 218)(23, 210)(210, 314)(228, 314)(39, 210)(177, 210)(32, 210)(113, 210)(211, 221)(30, 211)(63, 211)(1, 213)(7, 213)(111, 213)(155, 213)(46, 213)(158, 213)(61, 213)(214, 223)(27, 214)(119, 214)(13, 315)(214, 315)(194, 214)(69, 214)(187, 214)(24, 215)(41, 215)(53, 215)(30, 216)(166, 216)(32, 216)(77, 216)(90, 217)(107, 217)(128, 316)(217, 316)(182, 217)(169, 217)(15, 217)(19, 217)(120, 217)(60, 218)(103, 317)(218, 317)(122, 219)(219, 221)(145, 219)(125, 220)(151, 220)(190, 220)(165, 220)(102, 220)(63, 221)(213, 318)(222, 318)(7, 222)(155, 222)(68, 222)(46, 222)(153, 223)(27, 223)(206, 223)(159, 224)(62, 224)(207, 225)(31, 319)(225, 319)(33, 320)(225, 320)(178, 321)(225, 321)(213, 225)(127, 225)(155, 225)(222, 322)(225, 322)(46, 225)(68, 225)(157, 226)(73, 226)(43, 226)(44, 226)(89, 226)(212, 227)(23, 228)(39, 228)(32, 228)(113, 228)(4, 229)(18, 229)(188, 229)(135, 229)(116, 231)(152, 231)(97, 231)(203, 231)(45, 231)(195, 231)(16, 231)(14, 231)(Dict{Int64, Float64}(), Int64[], 322, 1005)Set parameter TokenServer to value "solice01.zib.de"
Set parameter Threads to value 1
Set parameter OutputFlag to value 1
Gurobi Optimizer version 12.0.1 build v12.0.1rc0 (linux64 - "Debian GNU/Linux 12 (bookworm)")

CPU model: Intel(R) Xeon(R) Gold 5122 CPU @ 3.60GHz, instruction set [SSE2|AVX|AVX2|AVX512]
Thread count: 8 physical cores, 16 logical processors, using up to 1 threads

Non-default parameters:
Threads  1

Optimize a model with 1327 rows, 3015 columns and 5025 nonzeros
Model fingerprint: 0x28a3178c
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [1e+00, 1e+00]
  RHS range        [0e+00, 0e+00]
Presolve removed 1327 rows and 3015 columns
Presolve time: 0.00s
Presolve: All rows and columns removed
Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0   -0.0000000e+00   0.000000e+00   0.000000e+00      0s

Solved in 0 iterations and 0.00 seconds (0.00 work units)
Optimal objective -0.000000000e+00

User-callback calls 35, time in user-callback 0.01 sec
elapsed CPU time: 1.985193 seconds
Set parameter TokenServer to value "solice01.zib.de"
Set parameter Threads to value 1
Set parameter OutputFlag to value 1
Set parameter MIPGap to value 0.0001
Set parameter MIPGapAbs to value 0.999998
Set parameter TimeLimit to value 7198.014807

 more cuts: false 0.05018066207441731 false
is_attach:trueformulation:LEFPA0 1005 0

 model loaded

Gurobi Optimizer version 12.0.1 build v12.0.1rc0 (linux64 - "Debian GNU/Linux 12 (bookworm)")

CPU model: Intel(R) Xeon(R) Gold 5122 CPU @ 3.60GHz, instruction set [SSE2|AVX|AVX2|AVX512]
Thread count: 8 physical cores, 16 logical processors, using up to 1 threads

Non-default parameters:
TimeLimit  7198.014807
MIPGapAbs  0.999998
Threads  1

Optimize a model with 14164 rows, 9728 columns and 38511 nonzeros
Model fingerprint: 0xbeb8d862
Variable types: 2332 continuous, 7396 integer (7396 binary)
Coefficient statistics:
  Matrix range     [1e-03, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [1e-03, 1e+00]
  RHS range        [1e-03, 1e+00]
Found heuristic solution: objective 997.0000000
Presolve removed 14140 rows and 9707 columns
Presolve time: 0.05s
Presolved: 24 rows, 21 columns, 63 nonzeros
Found heuristic solution: objective 793.0000000
Variable types: 7 continuous, 14 integer (14 binary)
Found heuristic solution: objective 791.0000000

Root relaxation: objective 7.880000e+02, 7 iterations, 0.00 seconds (0.00 work units)

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

*    0     0               0     788.0000000  788.00000  0.00%     -    0s

Explored 1 nodes (7 simplex iterations) in 0.06 seconds (0.04 work units)
Thread count was 1 (of 16 available processors)

Solution count 4: 788 791 793 997 

Optimal solution found (tolerance 1.00e-04)
Warning: max constraint violation (1.0000e-06) exceeds tolerance
Best objective 7.880000000000e+02, best bound 7.880000000000e+02, gap 0.0000%

User-callback calls 1111, time in user-callback 0.00 sec

 sepatime0 0 0
788.0Stat(MathOptInterface.OPTIMAL, 788.0, 788.0, 0.0, 0.0, 1.985193, 0.05542397499084473, 1, Main.CFLG.LEFPA, "", #undef)
