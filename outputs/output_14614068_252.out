Data path: /scratch/opt/lxu/CFLG/benchmarks/city
Instance: city_771.txt
Result path: /scratch/opt/lxu/CFLG/results/city
Solver: Gurobi
Time limit: 7200
Formulation: LEFPA
Cover: Small
julia --project=. src/main.jl /scratch/opt/lxu/CFLG/benchmarks/city city_771.txt /scratch/opt/lxu/CFLG/results/city Gurobi 7200 LEFPA Small
The latest version of Julia in the `release` channel is 1.11.5+0.x64.linux.gnu. You currently have `1.11.4+0.x64.linux.gnu` installed. Run:

  juliaup update

in your terminal shell to install Julia 1.11.5+0.x64.linux.gnu and update the `release` channel to that version.
/scratch/opt/lxu/CFLG/benchmarks/city Gurobi 7200.0 /scratch/opt/lxu/CFLG/results/city city_771.txt LEFPA Small
/scratch/opt/lxu/CFLG/benchmarks/city/city_771.txt

 read graph
data loaded


after absorb:505 592

max_piece:38
problem_graph/original graph: node: 629/592 edge: 808/771 dlt: 0.04917510909418596 break_avg_len: 0.18769311441394704 break_max_len: 1.8109339407744875Vbar/V, Ebar/E(448, 629, 627, 808)
(1, 416)(2, 81)(2, 264)(3, 334)(3, 60)(4, 303)(4, 420)(5, 506)(84, 506)(6, 188)(8, 507)(14, 507)(8, 269)(10, 18)(11, 270)(12, 51)(13, 508)(436, 508)(14, 504)(14, 491)(15, 509)(271, 509)(17, 67)(18, 161)(18, 510)(37, 510)(19, 351)(22, 116)(23, 407)(24, 31)(24, 240)(26, 511)(348, 511)(29, 337)(30, 157)(30, 450)(31, 272)(31, 289)(3, 512)(34, 512)(34, 513)(422, 513)(36, 515)(175, 515)(36, 439)(37, 295)(38, 94)(38, 114)(39, 499)(40, 97)(40, 178)(41, 494)(41, 469)(42, 198)(42, 516)(402, 516)(34, 43)(43, 365)(46, 195)(48, 479)(4, 48)(13, 49)(50, 318)(47, 517)(50, 517)(51, 263)(53, 332)(53, 251)(54, 432)(55, 70)(55, 91)(55, 266)(56, 393)(56, 113)(57, 282)(41, 57)(60, 143)(60, 209)(61, 190)(61, 153)(63, 354)(64, 518)(72, 518)(64, 350)(65, 127)(13, 66)(66, 436)(68, 308)(68, 156)(70, 212)(71, 500)(1, 71)(72, 519)(234, 519)(72, 227)(73, 226)(75, 492)(77, 407)(78, 520)(262, 520)(36, 81)(86, 522)(471, 522)(87, 523)(405, 523)(87, 215)(88, 343)(70, 89)(90, 421)(90, 289)(91, 408)(91, 244)(92, 120)(92, 425)(78, 93)(94, 146)(95, 524)(294, 524)(95, 305)(96, 428)(96, 190)(97, 399)(97, 485)(99, 343)(88, 99)(100, 409)(102, 384)(57, 103)(105, 526)(319, 526)(106, 382)(107, 235)(107, 315)(50, 107)(36, 108)(108, 502)(2, 527)(109, 527)(110, 453)(110, 216)(112, 269)(112, 356)(113, 369)(114, 528)(341, 528)(116, 499)(29, 116)(117, 220)(118, 171)(118, 134)(17, 119)(120, 443)(120, 366)(123, 530)(353, 530)(107, 127)(132, 532)(145, 532)(5, 132)(68, 133)(134, 184)(90, 134)(135, 400)(135, 336)(135, 462)(136, 248)(136, 200)(137, 533)(392, 533)(127, 140)(53, 140)(141, 534)(150, 534)(11, 142)(142, 260)(143, 166)(144, 157)(144, 535)(304, 535)(145, 478)(84, 145)(146, 410)(148, 214)(149, 536)(165, 536)(151, 240)(153, 335)(7, 154)(156, 357)(156, 331)(157, 450)(159, 179)(161, 537)(185, 537)(26, 538)(165, 538)(166, 476)(64, 167)(167, 256)(169, 539)(330, 539)(170, 413)(148, 170)(90, 171)(31, 171)(96, 172)(172, 540)(251, 540)(173, 541)(481, 541)(173, 394)(174, 292)(174, 338)(175, 284)(178, 399)(178, 542)(272, 542)(67, 179)(180, 543)(472, 543)(180, 304)(182, 219)(182, 195)(184, 199)(188, 344)(189, 545)(394, 545)(190, 504)(153, 190)(63, 546)(191, 546)(123, 191)(146, 192)(134, 192)(193, 396)(99, 193)(194, 493)(195, 345)(195, 380)(196, 307)(86, 548)(198, 548)(112, 549)(199, 549)(8, 199)(200, 401)(39, 200)(203, 347)(203, 279)(92, 205)(205, 372)(208, 409)(208, 300)(100, 208)(209, 551)(434, 551)(212, 244)(212, 440)(141, 214)(214, 554)(254, 554)(215, 555)(433, 555)(218, 275)(218, 485)(219, 556)(418, 556)(219, 380)(220, 342)(220, 321)(88, 221)(226, 287)(46, 226)(7, 557)(227, 557)(228, 425)(229, 419)(145, 229)(24, 233)(151, 233)(7, 234)(154, 559)(234, 559)(235, 412)(235, 349)(237, 265)(117, 237)(174, 561)(238, 561)(238, 302)(40, 240)(241, 562)(416, 562)(1, 241)(184, 243)(8, 243)(73, 563)(244, 563)(246, 440)(221, 247)(248, 371)(251, 387)(150, 254)(254, 565)(328, 565)(119, 566)(255, 566)(198, 255)(256, 285)(256, 567)(350, 567)(259, 280)(56, 259)(203, 260)(261, 386)(132, 568)(261, 568)(262, 452)(105, 262)(263, 364)(263, 313)(254, 264)(220, 265)(265, 370)(154, 265)(91, 266)(267, 570)(413, 570)(268, 502)(269, 490)(270, 571)(356, 571)(271, 572)(411, 572)(260, 272)(189, 273)(46, 274)(268, 275)(276, 324)(221, 277)(29, 277)(159, 279)(49, 574)(279, 574)(118, 280)(113, 280)(78, 281)(65, 282)(282, 469)(228, 283)(283, 331)(67, 284)(179, 284)(109, 285)(182, 287)(142, 575)(289, 575)(191, 292)(169, 294)(295, 456)(185, 295)(175, 577)(296, 577)(296, 456)(6, 298)(209, 298)(191, 299)(173, 579)(300, 579)(189, 300)(301, 346)(301, 337)(292, 580)(302, 580)(299, 302)(274, 303)(42, 581)(304, 581)(255, 304)(12, 582)(305, 582)(307, 467)(307, 489)(196, 308)(309, 339)(238, 309)(137, 584)(313, 584)(315, 495)(315, 349)(316, 343)(317, 470)(193, 317)(276, 318)(318, 505)(218, 319)(71, 320)(117, 320)(275, 321)(322, 432)(54, 322)(246, 323)(89, 323)(323, 415)(324, 585)(363, 585)(127, 325)(325, 494)(194, 327)(328, 497)(328, 411)(329, 419)(281, 329)(273, 587)(330, 587)(331, 467)(332, 387)(47, 332)(334, 449)(136, 335)(116, 335)(133, 336)(336, 463)(317, 337)(63, 338)(180, 339)(94, 341)(341, 459)(268, 342)(344, 417)(19, 344)(309, 345)(346, 470)(49, 347)(66, 347)(270, 347)(51, 348)(349, 412)(227, 350)(351, 393)(352, 381)(30, 352)(144, 353)(180, 354)(353, 354)(77, 355)(356, 436)(356, 490)(66, 356)(307, 357)(103, 358)(196, 358)(359, 471)(170, 590)(359, 590)(114, 591)(360, 591)(54, 363)(43, 364)(334, 365)(365, 392)(140, 366)(172, 366)(24, 369)(171, 369)(342, 370)(108, 370)(324, 594)(371, 594)(363, 371)(283, 372)(109, 376)(23, 378)(378, 597)(495, 597)(77, 378)(87, 379)(339, 380)(381, 450)(55, 382)(89, 382)(382, 420)(320, 384)(237, 384)(140, 385)(65, 385)(5, 598)(386, 598)(61, 387)(358, 599)(390, 599)(327, 390)(379, 392)(233, 393)(369, 393)(360, 600)(394, 600)(316, 396)(17, 398)(111, 398)(75, 399)(331, 400)(372, 400)(322, 401)(86, 402)(359, 602)(402, 602)(386, 603)(405, 603)(110, 407)(274, 408)(73, 408)(192, 409)(409, 475)(259, 410)(19, 410)(398, 604)(411, 604)(318, 412)(141, 605)(413, 605)(106, 415)(351, 417)(281, 417)(167, 418)(93, 419)(419, 478)(303, 420)(266, 420)(11, 421)(112, 421)(298, 422)(385, 425)(366, 425)(65, 426)(428, 504)(432, 606)(444, 606)(320, 433)(166, 434)(247, 436)(17, 439)(15, 439)(287, 440)(102, 440)(106, 442)(96, 443)(443, 486)(346, 444)(445, 609)(465, 609)(405, 449)(261, 611)(449, 611)(149, 612)(451, 612)(40, 452)(319, 452)(453, 613)(455, 613)(276, 453)(216, 453)(12, 454)(445, 614)(454, 614)(216, 455)(363, 455)(284, 456)(188, 459)(459, 480)(133, 462)(336, 462)(308, 463)(390, 463)(451, 617)(465, 617)(426, 467)(228, 467)(37, 468)(296, 468)(325, 469)(316, 470)(267, 618)(471, 618)(376, 472)(205, 475)(229, 621)(476, 621)(478, 500)(420, 479)(442, 479)(410, 480)(38, 622)(481, 622)(360, 481)(161, 483)(159, 483)(75, 483)(10, 485)(483, 485)(428, 486)(14, 486)(426, 489)(282, 489)(247, 490)(277, 625)(490, 625)(277, 491)(22, 491)(159, 492)(203, 492)(107, 493)(355, 493)(493, 494)(23, 495)(111, 497)(150, 627)(497, 627)(444, 499)(301, 499)(105, 500)(321, 500)(468, 629)(502, 629)(22, 504)(248, 505)(136, 505)(Dict(279 => 2.0, 392 => 18.0, 20 => 3.0, 370 => 5.0, 415 => 2.0, 442 => 1.0, 287 => 5.0, 268 => 4.0, 325 => 2.0, 220 => 3.0, 349 => 2.0, 117 => 2.0, 215 => 2.0, 217 => 2.0, 282 => 2.0, 196 => 3.0, 222 => 3.0, 29 => 2.0, 267 => 5.0, 151 => 0.0, 46 => 1.0, 390 => 2.0, 303 => 1.0, 212 => 3.0, 395 => 3.0, 365 => 3.0, 372 => 3.0, 381 => 10.0, 247 => 3.0, 13 => 1.0, 241 => 1.0, 359 => 2.0, 363 => 1.0, 168 => 3.0, 417 => 1.0, 163 => 1.0, 104 => 6.0, 158 => 1.0, 78 => 2.0, 297 => 1.0, 326 => 1.0, 199 => 1.0, 12 => 3.0, 285 => 1.0, 184 => 3.0, 75 => 2.0, 23 => 2.0, 148 => 1.0, 188 => 3.0, 407 => 1.0, 335 => 3.0, 427 => 3.0, 391 => 1.0, 130 => 6.0, 96 => 6.0, 7 => 2.0, 33 => 1.0, 274 => 0.0, 95 => 5.0, 443 => 2.0, 155 => 15.0, 321 => 2.0, 216 => 1.0, 382 => 2.0, 76 => 2.0, 103 => 3.0, 232 => 3.0, 280 => 1.0, 34 => 1.0, 50 => 1.0, 334 => 15.0, 93 => 2.0, 432 => 3.0, 27 => 2.0, 26 => 2.0, 358 => 1.0, 283 => 3.0, 293 => 4.0, 144 => 1.0, 298 => 2.0, 414 => 2.0), [334, 335, 232, 7, 130, 12, 13, 241, 349, 247, 20, 23, 358, 359, 26, 27, 29, 363, 144, 365, 33, 34, 370, 148, 372, 267, 268, 151, 155, 274, 46, 158, 381, 279, 163, 50, 280, 390, 382, 391, 282, 283, 392, 285, 168, 395, 287, 293, 297, 298, 184, 407, 188, 76, 414, 78, 303, 415, 75, 417, 196, 93, 427, 199, 95, 96, 432, 321, 103, 104, 212, 442, 443, 215, 216, 325, 217, 326, 220, 222, 117], 529, 708)Set parameter TokenServer to value "solice01.zib.de"
Set parameter Threads to value 1
Set parameter OutputFlag to value 1
Gurobi Optimizer version 12.0.1 build v12.0.1rc0 (linux64 - "Debian GNU/Linux 12 (bookworm)")

CPU model: Intel(R) Xeon(R) Gold 5122 CPU @ 3.60GHz, instruction set [SSE2|AVX|AVX2|AVX512]
Thread count: 8 physical cores, 16 logical processors, using up to 1 threads

Non-default parameters:
Threads  1

Optimize a model with 1237 rows, 2124 columns and 3540 nonzeros
Model fingerprint: 0x6a51ec21
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [1e+00, 1e+00]
  RHS range        [1e+00, 1e+00]
Presolve removed 1237 rows and 2124 columns
Presolve time: 0.00s
Presolve: All rows and columns removed
Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    8.1000000e+01   0.000000e+00   0.000000e+00      0s

Solved in 0 iterations and 0.00 seconds (0.00 work units)
Optimal objective  8.100000000e+01

User-callback calls 35, time in user-callback 0.01 sec
elapsed CPU time: 2.110881 seconds
Set parameter TokenServer to value "solice01.zib.de"
Set parameter Threads to value 1
Set parameter OutputFlag to value 1
Set parameter MIPGap to value 0.0001
Set parameter MIPGapAbs to value 0.999998
Set parameter TimeLimit to value 7197.889119

 more cuts: false 0.04917510909418596 false
is_attach:trueformulation:LEFPA0 708 0

 model loaded

Gurobi Optimizer version 12.0.1 build v12.0.1rc0 (linux64 - "Debian GNU/Linux 12 (bookworm)")

CPU model: Intel(R) Xeon(R) Gold 5122 CPU @ 3.60GHz, instruction set [SSE2|AVX|AVX2|AVX512]
Thread count: 8 physical cores, 16 logical processors, using up to 1 threads

Non-default parameters:
TimeLimit  7197.889119
MIPGapAbs  0.999998
Threads  1

Optimize a model with 9675 rows, 7179 columns and 24909 nonzeros
Model fingerprint: 0xc643ab66
Variable types: 1945 continuous, 5234 integer (5234 binary)
Coefficient statistics:
  Matrix range     [1e-04, 2e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [1e-04, 2e+00]
  RHS range        [1e-06, 2e+00]
Presolve removed 9294 rows and 6868 columns
Presolve time: 0.20s
Presolved: 381 rows, 311 columns, 1604 nonzeros
Variable types: 80 continuous, 231 integer (231 binary)
Found heuristic solution: objective 743.0000000
Found heuristic solution: objective 742.0000000
Found heuristic solution: objective 741.0000000

Root relaxation: objective 7.094231e+02, 297 iterations, 0.00 seconds (0.00 work units)

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0  709.42309    0   90  741.00000  709.42309  4.26%     -    0s
H    0     0                     739.0000000  709.42309  4.00%     -    0s
H    0     0                     723.0000000  709.42309  1.88%     -    0s
H    0     0                     715.0000000  709.42309  0.78%     -    0s
     0     0  711.28519    0   91  715.00000  711.28519  0.52%     -    0s
     0     0  711.32174    0   95  715.00000  711.32174  0.51%     -    0s
     0     0  711.32174    0   99  715.00000  711.32174  0.51%     -    0s
     0     0  711.88633    0   63  715.00000  711.88633  0.44%     -    0s
     0     0  711.90826    0   66  715.00000  711.90826  0.43%     -    0s
     0     0  712.10433    0  102  715.00000  712.10433  0.40%     -    0s
     0     0  712.15152    0   63  715.00000  712.15152  0.40%     -    0s
     0     0  712.15184    0   85  715.00000  712.15184  0.40%     -    0s
     0     0  712.25000    0   80  715.00000  712.25000  0.38%     -    0s
     0     0  712.27273    0   84  715.00000  712.27273  0.38%     -    0s
     0     0  712.28130    0   85  715.00000  712.28130  0.38%     -    0s
     0     0  712.41535    0   79  715.00000  712.41535  0.36%     -    0s
     0     0  712.41535    0   82  715.00000  712.41535  0.36%     -    0s
     0     0  712.50000    0   78  715.00000  712.50000  0.35%     -    0s
     0     0  712.50000    0   78  715.00000  712.50000  0.35%     -    0s
     0     0  712.50000    0   78  715.00000  712.50000  0.35%     -    0s
     0     0  712.50000    0   45  715.00000  712.50000  0.35%     -    0s
     0     0  712.50000    0   50  715.00000  712.50000  0.35%     -    0s
     0     0  712.50000    0   59  715.00000  712.50000  0.35%     -    0s
     0     0  712.50000    0   57  715.00000  712.50000  0.35%     -    0s
     0     2  712.50000    0   51  715.00000  712.50000  0.35%     -    0s

Cutting planes:
  Learned: 1
  Gomory: 9
  Cover: 59
  Implied bound: 9
  Clique: 4
  MIR: 26
  StrongCG: 7
  GUB cover: 1
  Inf proof: 3
  RLT: 8
  Relax-and-lift: 9
  BQP: 1

Explored 491 nodes (5336 simplex iterations) in 0.56 seconds (0.28 work units)
Thread count was 1 (of 16 available processors)

Solution count 7: 715 715 723 ... 743

Optimal solution found (tolerance 1.00e-04)
Warning: max constraint violation (1.0000e-06) exceeds tolerance
Best objective 7.150000000000e+02, best bound 7.150000000000e+02, gap 0.0000%

User-callback calls 3273, time in user-callback 0.00 sec

 sepatime0 0 0
715.0Stat(MathOptInterface.OPTIMAL, 715.0, 715.0, 0.0, 0.0, 2.110881, 0.5595219135284424, 491, Main.CFLG.LEFPA, "", #undef)
