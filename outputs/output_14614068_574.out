Data path: /scratch/opt/lxu/CFLG/benchmarks/tree_A
Instance: treeA.700.105
Result path: /scratch/opt/lxu/CFLG/results/tree_A
Solver: Gurobi
Time limit: 7200
Formulation: LEFPAI
Cover: Small
julia --project=. src/main.jl /scratch/opt/lxu/CFLG/benchmarks/tree_A treeA.700.105 /scratch/opt/lxu/CFLG/results/tree_A Gurobi 7200 LEFPAI Small
The latest version of Julia in the `release` channel is 1.11.5+0.x64.linux.gnu. You currently have `1.11.4+0.x64.linux.gnu` installed. Run:

  juliaup update

in your terminal shell to install Julia 1.11.5+0.x64.linux.gnu and update the `release` channel to that version.
/scratch/opt/lxu/CFLG/benchmarks/tree_A Gurobi 7200.0 /scratch/opt/lxu/CFLG/results/tree_A treeA.700.105 LEFPAI Small
/scratch/opt/lxu/CFLG/benchmarks/tree_A/treeA.700.105

 read graph
data loaded


after absorb:452 700

max_piece:22
problem_graph/original graph: node: 452/700 edge: 556/804 dlt: 0.37250562980049123 break_avg_len: 2.154636880284857 break_max_len: 7.863688893879049Vbar/V, Ebar/E(250, 452, 354, 556)
(3, 401)(5, 264)(5, 259)(6, 338)(6, 105)(6, 70)(6, 91)(7, 278)(7, 158)(8, 67)(13, 394)(13, 38)(15, 128)(19, 338)(19, 33)(20, 435)(20, 167)(20, 87)(21, 355)(23, 435)(23, 401)(23, 291)(24, 190)(24, 228)(24, 102)(24, 103)(30, 307)(30, 336)(32, 65)(32, 129)(37, 106)(37, 299)(37, 259)(38, 42)(38, 116)(43, 168)(43, 217)(45, 308)(45, 359)(21, 46)(46, 233)(47, 65)(51, 53)(56, 60)(56, 289)(56, 282)(57, 375)(60, 169)(63, 167)(63, 185)(70, 449)(72, 338)(3, 72)(72, 328)(73, 377)(74, 296)(74, 399)(68, 80)(81, 372)(81, 91)(32, 82)(82, 108)(51, 83)(83, 127)(83, 306)(84, 277)(84, 160)(19, 85)(85, 131)(85, 139)(87, 320)(93, 233)(97, 372)(97, 405)(52, 98)(98, 400)(98, 361)(98, 389)(100, 141)(17, 100)(69, 102)(28, 104)(108, 162)(111, 265)(111, 405)(114, 243)(114, 236)(115, 243)(116, 429)(120, 245)(120, 301)(120, 149)(125, 250)(97, 125)(125, 223)(128, 164)(128, 281)(128, 296)(126, 131)(132, 228)(93, 133)(133, 427)(134, 413)(134, 267)(135, 352)(135, 236)(136, 427)(136, 265)(67, 136)(17, 136)(137, 256)(139, 391)(140, 307)(140, 308)(140, 226)(140, 230)(147, 162)(62, 147)(147, 259)(47, 149)(150, 404)(87, 150)(150, 310)(102, 153)(153, 264)(5, 153)(44, 159)(49, 159)(47, 159)(167, 330)(28, 168)(168, 237)(169, 316)(171, 374)(171, 177)(129, 171)(172, 258)(153, 172)(74, 172)(176, 236)(160, 176)(49, 177)(177, 226)(177, 262)(51, 184)(184, 437)(185, 359)(68, 188)(123, 188)(73, 188)(97, 194)(194, 280)(195, 255)(33, 199)(199, 217)(106, 209)(149, 209)(106, 214)(44, 218)(218, 373)(219, 352)(219, 426)(220, 283)(220, 342)(143, 221)(69, 221)(123, 221)(15, 223)(223, 330)(134, 225)(225, 389)(58, 226)(52, 229)(229, 299)(231, 257)(231, 308)(231, 319)(231, 343)(35, 232)(21, 232)(232, 404)(236, 403)(237, 316)(103, 237)(238, 355)(238, 243)(32, 242)(242, 260)(242, 255)(244, 260)(244, 314)(53, 245)(246, 292)(68, 246)(114, 246)(249, 303)(110, 249)(147, 250)(190, 251)(251, 325)(108, 251)(252, 309)(169, 252)(254, 277)(230, 254)(254, 328)(67, 256)(101, 256)(164, 257)(258, 325)(60, 258)(240, 260)(262, 430)(262, 399)(164, 266)(266, 389)(266, 405)(57, 267)(214, 271)(146, 271)(62, 271)(122, 271)(233, 281)(195, 282)(132, 283)(44, 285)(160, 285)(213, 288)(250, 289)(289, 424)(291, 447)(292, 345)(42, 293)(240, 293)(293, 410)(127, 298)(291, 298)(42, 301)(141, 302)(236, 302)(303, 406)(141, 303)(303, 427)(305, 334)(81, 305)(309, 352)(195, 309)(105, 310)(104, 310)(131, 310)(314, 429)(73, 314)(167, 318)(238, 318)(92, 319)(319, 320)(320, 324)(321, 364)(105, 321)(115, 323)(323, 430)(101, 324)(288, 325)(129, 325)(281, 333)(333, 339)(213, 333)(64, 333)(334, 440)(334, 426)(137, 334)(23, 336)(323, 336)(336, 399)(122, 339)(162, 340)(217, 340)(146, 341)(338, 342)(46, 342)(343, 375)(57, 343)(158, 343)(340, 345)(53, 345)(260, 352)(58, 352)(352, 355)(341, 359)(361, 413)(46, 361)(43, 366)(62, 369)(301, 369)(302, 369)(91, 372)(155, 373)(364, 374)(35, 377)(377, 383)(366, 383)(341, 383)(143, 387)(122, 387)(389, 401)(339, 389)(230, 390)(120, 390)(58, 390)(214, 391)(330, 391)(101, 394)(155, 394)(374, 395)(264, 395)(395, 418)(219, 396)(305, 396)(306, 396)(278, 398)(398, 437)(146, 398)(366, 400)(13, 400)(265, 403)(285, 404)(123, 404)(280, 405)(406, 430)(409, 435)(409, 440)(264, 410)(126, 411)(230, 411)(226, 411)(64, 413)(416, 418)(110, 416)(277, 423)(139, 423)(280, 424)(213, 424)(277, 425)(288, 425)(143, 426)(364, 429)(127, 430)(389, 443)(8, 443)(92, 447)(162, 449)(283, 449)(168, 451)(80, 451)(Dict(5 => 1.0, 114 => 2.0, 123 => 6.0, 35 => 2.0, 32 => 2.0, 136 => 14.0, 197 => 4.0, 6 => 5.0, 67 => 11.0, 117 => 5.0, 145 => 2.0, 215 => 2.0, 115 => 5.0, 153 => 5.0, 210 => 3.0, 151 => 3.0, 90 => 2.0, 239 => 6.0, 86 => 2.0, 191 => 4.0, 104 => 4.0, 205 => 3.0, 244 => 15.0, 242 => 4.0, 158 => 2.0, 150 => 2.0, 176 => 2.0, 218 => 2.0, 122 => 3.0, 58 => 1.0, 179 => 8.0, 52 => 2.0, 177 => 3.0, 75 => 2.0, 173 => 2.0, 111 => 13.0, 23 => 2.0, 188 => 2.0, 41 => 8.0, 171 => 2.0, 11 => 2.0, 36 => 2.0, 235 => 2.0, 118 => 4.0, 162 => 2.0, 39 => 4.0, 77 => 4.0, 7 => 3.0, 203 => 2.0, 95 => 2.0, 216 => 3.0, 108 => 6.0, 172 => 2.0, 66 => 3.0, 156 => 2.0, 59 => 1.0, 93 => 2.0, 243 => 2.0, 34 => 2.0, 2 => 2.0, 10 => 4.0, 18 => 4.0, 50 => 2.0, 211 => 2.0, 167 => 3.0, 42 => 4.0, 87 => 3.0, 127 => 2.0, 140 => 2.0, 147 => 5.0, 157 => 3.0, 169 => 4.0, 79 => 19.0, 200 => 10.0, 20 => 2.0, 230 => 10.0, 81 => 2.0, 195 => 2.0, 202 => 2.0, 248 => 2.0, 180 => 3.0, 19 => 2.0, 49 => 2.0, 9 => 2.0, 31 => 2.0, 146 => 14.0, 217 => 2.0, 227 => 7.0, 138 => 2.0, 61 => 2.0, 29 => 4.0, 94 => 2.0, 161 => 2.0, 107 => 4.0, 46 => 3.0, 249 => 4.0, 228 => 3.0, 102 => 6.0, 128 => 4.0, 57 => 3.0, 152 => 7.0, 170 => 8.0, 21 => 2.0, 38 => 1.0, 88 => 3.0, 163 => 10.0, 236 => 1.0, 101 => 3.0, 105 => 4.0, 72 => 5.0, 24 => 7.0, 8 => 2.0, 37 => 2.0, 137 => 3.0, 53 => 2.0, 22 => 6.0, 47 => 3.0, 175 => 2.0, 83 => 9.0, 154 => 3.0, 237 => 1.0, 206 => 2.0, 166 => 5.0, 198 => 8.0, 178 => 8.0, 149 => 2.0, 155 => 1.0, 181 => 2.0, 143 => 5.0, 40 => 10.0, 48 => 4.0, 15 => 2.0, 65 => 3.0, 245 => 15.0, 97 => 7.0, 174 => 2.0, 134 => 2.0), [2, 5, 7, 8, 9, 15, 18, 20, 22, 31, 36, 37, 41, 42, 47, 49, 58, 59, 65, 66, 72, 75, 79, 93, 97, 101, 102, 104, 105, 111, 114, 115, 123, 127, 128, 136, 137, 138, 140, 150, 151, 152, 153, 158, 161, 166, 167, 169, 170, 174, 175, 176, 179, 180, 197, 198, 200, 203, 205, 206, 227, 230, 235, 243, 244, 6, 10, 11, 19, 21, 23, 24, 29, 32, 34, 35, 38, 39, 40, 46, 48, 50, 52, 53, 57, 61, 67, 77, 81, 83, 86, 87, 88, 90, 94, 95, 107, 108, 117, 118, 122, 134, 143, 145, 146, 147, 149, 154, 155, 156, 157, 162, 163, 171, 172, 173, 177, 178, 181, 188, 191, 195, 202, 210, 211, 215, 216, 217, 218, 228, 236, 237, 239, 242, 245, 248, 249], 387, 491)Set parameter TokenServer to value "solice01.zib.de"
Set parameter Threads to value 1
Set parameter OutputFlag to value 1
Gurobi Optimizer version 12.0.1 build v12.0.1rc0 (linux64 - "Debian GNU/Linux 12 (bookworm)")

CPU model: Intel(R) Xeon(R) Gold 5222 CPU @ 3.80GHz, instruction set [SSE2|AVX|AVX2|AVX512]
Thread count: 8 physical cores, 16 logical processors, using up to 1 threads

Non-default parameters:
Threads  1

Optimize a model with 878 rows, 1473 columns and 2455 nonzeros
Model fingerprint: 0x248dbe3b
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [1e+00, 1e+00]
  RHS range        [1e+00, 1e+00]
Presolve removed 878 rows and 1473 columns
Presolve time: 0.00s
Presolve: All rows and columns removed
Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    1.3700000e+02   0.000000e+00   0.000000e+00      0s

Solved in 0 iterations and 0.00 seconds (0.00 work units)
Optimal objective  1.370000000e+02

User-callback calls 35, time in user-callback 0.00 sec
elapsed CPU time: 1.40694 seconds
Set parameter TokenServer to value "solice01.zib.de"
Set parameter Threads to value 1
Set parameter OutputFlag to value 1
Set parameter MIPGap to value 0.0001
Set parameter MIPGapAbs to value 0.999998
Set parameter TimeLimit to value 7198.59306

 more cuts: false 0.37250562980049123 false
is_attach:trueformulation:LEFPAI0 491 0

 model loaded

Gurobi Optimizer version 12.0.1 build v12.0.1rc0 (linux64 - "Debian GNU/Linux 12 (bookworm)")

CPU model: Intel(R) Xeon(R) Gold 5222 CPU @ 3.80GHz, instruction set [SSE2|AVX|AVX2|AVX512]
Thread count: 8 physical cores, 16 logical processors, using up to 1 threads

Non-default parameters:
TimeLimit  7198.59306
MIPGapAbs  0.999998
Threads  1

Optimize a model with 4084 rows, 4447 columns and 9320 nonzeros
Model fingerprint: 0xb842ce9c
Model has 1709 simple general constraints
  1709 INDICATOR
Variable types: 1369 continuous, 3078 integer (3078 binary)
Coefficient statistics:
  Matrix range     [8e-04, 8e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [8e-04, 8e+00]
  RHS range        [1e-06, 8e+00]
  GenCon rhs range [2e-03, 8e+00]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 4084 rows and 4447 columns
Presolve time: 0.01s
Presolve: All rows and columns removed

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.01 work units)
Thread count was 1 (of 16 available processors)

Solution count 1: 968 

Optimal solution found (tolerance 1.00e-04)
Best objective 9.680000000000e+02, best bound 9.680000000000e+02, gap 0.0000%

User-callback calls 956, time in user-callback 0.00 sec

 sepatime0 0 0
968.0Stat(MathOptInterface.OPTIMAL, 968.0, 968.0, 0.0, 0.0, 1.40694, 0.011465787887573242, 0, Main.CFLG.LEFPAI, "", #undef)
