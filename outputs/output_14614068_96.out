Data path: /scratch/opt/lxu/CFLG/benchmarks/Kgroup_B
Instance: K400.1.con.red
Result path: /scratch/opt/lxu/CFLG/results/Kgroup_B
Solver: Gurobi
Time limit: 7200
Formulation: LEFPAD
Cover: Small
julia --project=. src/main.jl /scratch/opt/lxu/CFLG/benchmarks/Kgroup_B K400.1.con.red /scratch/opt/lxu/CFLG/results/Kgroup_B Gurobi 7200 LEFPAD Small
The latest version of Julia in the `release` channel is 1.11.5+0.x64.linux.gnu. You currently have `1.11.4+0.x64.linux.gnu` installed. Run:

  juliaup update

in your terminal shell to install Julia 1.11.5+0.x64.linux.gnu and update the `release` channel to that version.
/scratch/opt/lxu/CFLG/benchmarks/Kgroup_B Gurobi 7200.0 /scratch/opt/lxu/CFLG/results/Kgroup_B K400.1.con.red LEFPAD Small
/scratch/opt/lxu/CFLG/benchmarks/Kgroup_B/K400.1.con.red

 read graph
data loaded


after absorb:217 217

max_piece:352
problem_graph/original graph: node: 346/217 edge: 983/854 dlt: 0.002843218153522603 break_avg_len: 0.009880400012648232 break_max_len: 1.0Vbar/V, Ebar/E(345, 346, 982, 983)
(1, 115)(1, 127)(1, 197)(2, 118)(2, 175)(2, 108)(2, 155)(3, 195)(3, 81)(3, 49)(3, 79)(4, 55)(1, 218)(4, 218)(4, 115)(4, 127)(4, 137)(4, 83)(4, 197)(5, 181)(5, 59)(5, 139)(6, 114)(6, 219)(97, 219)(6, 204)(6, 220)(20, 220)(7, 16)(7, 221)(215, 221)(7, 52)(8, 97)(1, 9)(9, 128)(9, 137)(9, 92)(10, 151)(10, 28)(10, 170)(10, 93)(10, 208)(10, 133)(11, 91)(11, 222)(98, 222)(11, 198)(11, 223)(119, 223)(11, 173)(11, 40)(11, 192)(11, 224)(163, 224)(12, 37)(12, 27)(12, 179)(13, 225)(84, 225)(14, 195)(3, 14)(14, 33)(14, 179)(14, 79)(14, 49)(15, 101)(15, 95)(17, 23)(17, 226)(95, 226)(13, 17)(15, 17)(18, 114)(18, 20)(18, 99)(18, 58)(18, 86)(18, 188)(18, 227)(107, 227)(19, 228)(118, 228)(19, 155)(2, 19)(19, 144)(19, 96)(20, 97)(20, 21)(6, 21)(21, 150)(21, 229)(76, 229)(21, 29)(21, 94)(21, 97)(22, 149)(22, 41)(23, 144)(23, 166)(24, 169)(24, 191)(24, 148)(25, 57)(25, 60)(25, 32)(26, 151)(26, 59)(26, 230)(28, 230)(26, 30)(26, 211)(26, 170)(10, 26)(5, 26)(26, 139)(26, 208)(27, 207)(28, 151)(28, 93)(20, 29)(6, 231)(29, 231)(29, 150)(29, 232)(76, 232)(29, 94)(29, 204)(29, 97)(30, 151)(28, 30)(30, 60)(25, 30)(30, 93)(30, 32)(31, 180)(31, 233)(92, 233)(9, 31)(31, 234)(178, 234)(33, 235)(195, 235)(27, 33)(33, 49)(33, 236)(179, 236)(33, 79)(34, 190)(34, 109)(35, 45)(34, 35)(35, 190)(35, 237)(109, 237)(6, 36)(36, 57)(36, 58)(36, 238)(94, 238)(36, 239)(204, 239)(36, 97)(16, 37)(37, 215)(7, 37)(37, 52)(7, 38)(37, 38)(16, 38)(38, 52)(38, 215)(39, 85)(39, 75)(39, 42)(39, 185)(2, 40)(40, 96)(40, 198)(40, 173)(40, 175)(40, 108)(40, 213)(41, 149)(42, 87)(42, 64)(42, 185)(42, 213)(33, 43)(43, 120)(43, 147)(12, 43)(14, 43)(43, 179)(43, 79)(43, 49)(43, 65)(44, 240)(117, 240)(44, 136)(44, 241)(61, 241)(44, 105)(44, 82)(45, 190)(46, 154)(8, 47)(16, 48)(48, 187)(48, 215)(48, 50)(49, 195)(49, 81)(16, 50)(50, 187)(50, 215)(7, 50)(38, 50)(37, 50)(50, 52)(2, 51)(51, 152)(51, 108)(51, 242)(216, 242)(51, 113)(16, 52)(52, 243)(215, 243)(46, 53)(53, 178)(31, 53)(53, 184)(53, 205)(54, 244)(84, 244)(54, 245)(101, 245)(54, 181)(54, 210)(5, 54)(54, 139)(13, 246)(54, 246)(55, 115)(55, 127)(55, 247)(137, 247)(55, 83)(55, 197)(56, 248)(120, 248)(56, 103)(56, 249)(200, 249)(56, 250)(132, 250)(56, 251)(112, 251)(56, 147)(56, 65)(56, 168)(43, 56)(57, 97)(58, 114)(58, 94)(58, 97)(6, 58)(58, 204)(57, 58)(57, 60)(32, 60)(61, 207)(61, 117)(61, 252)(136, 252)(61, 105)(62, 156)(62, 202)(62, 253)(72, 253)(62, 164)(63, 90)(63, 67)(63, 212)(63, 113)(63, 254)(194, 254)(12, 65)(66, 152)(66, 216)(66, 255)(104, 255)(66, 256)(145, 256)(66, 206)(67, 90)(46, 67)(67, 154)(68, 100)(68, 138)(68, 159)(69, 214)(69, 169)(69, 158)(69, 196)(69, 257)(172, 257)(70, 90)(67, 70)(70, 156)(45, 70)(35, 70)(70, 154)(7, 71)(38, 71)(71, 258)(189, 258)(37, 71)(71, 159)(71, 126)(52, 71)(71, 147)(65, 71)(71, 193)(72, 156)(19, 72)(72, 259)(164, 259)(73, 260)(95, 260)(73, 101)(13, 73)(17, 261)(73, 261)(15, 262)(73, 262)(54, 73)(73, 166)(73, 165)(74, 123)(74, 125)(74, 106)(74, 183)(74, 202)(74, 124)(75, 91)(75, 87)(75, 192)(42, 75)(75, 163)(75, 217)(20, 76)(6, 76)(76, 263)(150, 263)(76, 97)(77, 95)(73, 77)(77, 142)(11, 77)(17, 77)(15, 77)(23, 77)(77, 166)(77, 163)(64, 78)(78, 198)(78, 173)(78, 87)(42, 78)(78, 185)(78, 217)(78, 264)(213, 264)(79, 195)(79, 179)(49, 79)(67, 80)(80, 178)(80, 212)(63, 80)(80, 171)(80, 194)(81, 188)(81, 195)(36, 82)(58, 82)(57, 82)(82, 204)(1, 83)(83, 265)(115, 265)(83, 197)(83, 266)(127, 266)(75, 85)(42, 85)(86, 267)(114, 267)(20, 86)(86, 99)(58, 86)(86, 188)(86, 268)(107, 268)(87, 213)(56, 88)(88, 269)(120, 269)(88, 270)(103, 270)(88, 271)(200, 271)(88, 272)(132, 272)(88, 273)(112, 273)(88, 147)(65, 88)(88, 168)(43, 88)(89, 99)(89, 274)(188, 274)(81, 89)(46, 90)(90, 154)(91, 198)(40, 91)(91, 213)(87, 275)(91, 275)(91, 276)(192, 276)(91, 163)(92, 180)(32, 93)(94, 114)(6, 94)(94, 150)(57, 94)(94, 204)(94, 277)(97, 277)(95, 101)(96, 118)(96, 155)(2, 96)(96, 108)(96, 144)(96, 278)(175, 278)(91, 279)(98, 279)(98, 198)(98, 119)(98, 173)(40, 98)(87, 98)(98, 192)(98, 163)(98, 217)(99, 280)(188, 280)(69, 100)(100, 121)(100, 172)(5, 101)(101, 139)(13, 101)(101, 181)(84, 101)(101, 162)(73, 102)(102, 281)(142, 281)(77, 102)(95, 282)(102, 282)(17, 102)(15, 102)(103, 120)(103, 138)(103, 200)(103, 112)(103, 283)(147, 283)(65, 284)(103, 284)(43, 103)(104, 152)(104, 216)(104, 145)(104, 285)(206, 285)(99, 105)(105, 188)(89, 105)(106, 123)(106, 166)(106, 124)(106, 202)(106, 133)(106, 186)(107, 114)(20, 107)(6, 107)(58, 107)(97, 107)(108, 118)(108, 175)(45, 109)(109, 286)(190, 286)(110, 195)(3, 287)(110, 287)(81, 110)(49, 110)(14, 110)(79, 110)(22, 288)(111, 288)(41, 289)(111, 289)(111, 290)(140, 290)(112, 120)(112, 147)(43, 112)(14, 112)(112, 179)(79, 112)(49, 112)(65, 112)(113, 155)(2, 113)(113, 216)(19, 113)(97, 114)(20, 114)(115, 127)(115, 197)(33, 291)(116, 291)(14, 116)(110, 116)(116, 195)(3, 116)(81, 116)(49, 116)(116, 179)(79, 116)(99, 117)(117, 182)(117, 188)(117, 292)(136, 292)(105, 293)(117, 293)(82, 117)(89, 117)(118, 175)(91, 119)(75, 119)(87, 119)(119, 192)(119, 163)(119, 217)(12, 120)(14, 120)(120, 179)(79, 120)(65, 120)(69, 121)(121, 172)(110, 294)(122, 294)(3, 122)(81, 122)(49, 122)(14, 122)(79, 122)(123, 156)(123, 151)(10, 123)(93, 123)(123, 124)(124, 156)(124, 151)(10, 124)(93, 124)(123, 125)(23, 125)(125, 144)(106, 125)(125, 202)(72, 125)(125, 164)(34, 126)(7, 126)(38, 126)(52, 126)(127, 197)(55, 295)(128, 295)(1, 296)(128, 296)(115, 128)(128, 297)(137, 297)(4, 298)(128, 298)(128, 131)(83, 128)(128, 299)(197, 299)(129, 142)(102, 129)(23, 129)(77, 300)(129, 300)(95, 129)(17, 301)(129, 301)(15, 129)(130, 180)(127, 130)(130, 161)(1, 302)(131, 302)(115, 131)(131, 137)(4, 303)(131, 303)(131, 304)(197, 304)(131, 180)(83, 305)(131, 305)(55, 306)(131, 306)(127, 131)(120, 307)(132, 307)(103, 132)(132, 200)(132, 147)(43, 308)(132, 308)(14, 132)(79, 132)(49, 132)(112, 309)(132, 309)(13, 133)(133, 210)(54, 133)(84, 133)(133, 165)(122, 134)(99, 136)(136, 188)(105, 136)(89, 136)(1, 310)(137, 310)(115, 137)(127, 137)(83, 137)(137, 311)(197, 311)(138, 159)(65, 138)(59, 139)(22, 140)(41, 140)(141, 143)(141, 312)(180, 312)(92, 141)(130, 141)(31, 141)(73, 142)(119, 142)(95, 142)(142, 163)(17, 142)(11, 142)(15, 313)(142, 313)(143, 180)(127, 314)(143, 314)(130, 315)(143, 315)(131, 143)(83, 143)(118, 316)(144, 316)(144, 155)(144, 175)(145, 152)(145, 216)(145, 317)(206, 317)(146, 149)(21, 146)(146, 150)(76, 146)(29, 146)(41, 146)(146, 318)(201, 318)(120, 147)(12, 147)(65, 147)(148, 172)(148, 169)(148, 158)(148, 196)(134, 148)(114, 150)(20, 150)(6, 319)(150, 319)(97, 320)(150, 320)(93, 151)(32, 151)(104, 153)(51, 153)(66, 153)(153, 206)(45, 154)(35, 154)(118, 155)(108, 155)(155, 175)(114, 157)(99, 157)(157, 188)(58, 157)(86, 157)(82, 157)(18, 157)(107, 321)(157, 321)(158, 214)(158, 322)(169, 322)(158, 323)(196, 323)(159, 189)(126, 159)(65, 159)(159, 193)(143, 160)(130, 324)(160, 324)(160, 161)(53, 160)(160, 184)(161, 190)(149, 162)(162, 181)(22, 162)(59, 162)(87, 163)(163, 192)(118, 164)(155, 164)(144, 164)(19, 325)(164, 325)(84, 326)(165, 326)(101, 165)(165, 327)(210, 327)(13, 165)(54, 328)(165, 328)(133, 166)(166, 329)(186, 329)(13, 166)(165, 166)(167, 171)(167, 194)(67, 167)(80, 167)(104, 167)(145, 167)(66, 167)(167, 206)(68, 168)(138, 168)(168, 191)(169, 214)(151, 330)(170, 330)(28, 331)(170, 331)(30, 170)(93, 332)(170, 332)(170, 208)(32, 170)(67, 171)(171, 178)(171, 212)(63, 171)(171, 194)(172, 214)(169, 172)(158, 172)(172, 196)(173, 198)(173, 333)(213, 333)(45, 174)(34, 174)(35, 174)(109, 174)(47, 176)(8, 176)(92, 177)(9, 177)(177, 178)(31, 177)(178, 180)(92, 178)(9, 178)(179, 195)(27, 179)(1, 180)(180, 197)(83, 180)(55, 180)(127, 180)(59, 334)(181, 334)(139, 181)(114, 182)(157, 182)(99, 182)(182, 188)(58, 182)(86, 182)(18, 182)(107, 182)(123, 183)(125, 183)(106, 183)(93, 183)(10, 183)(124, 183)(183, 202)(133, 183)(46, 184)(178, 184)(184, 205)(31, 184)(64, 185)(84, 186)(186, 210)(13, 186)(165, 186)(133, 335)(186, 335)(16, 187)(187, 215)(7, 187)(38, 187)(37, 187)(52, 187)(7, 189)(38, 189)(126, 189)(52, 189)(189, 193)(148, 191)(134, 191)(87, 336)(192, 336)(42, 192)(38, 193)(126, 193)(52, 193)(65, 193)(90, 194)(67, 194)(46, 194)(196, 214)(169, 196)(199, 207)(151, 199)(37, 199)(27, 199)(60, 199)(32, 199)(120, 337)(200, 337)(147, 200)(43, 338)(200, 338)(14, 200)(179, 200)(79, 200)(49, 200)(112, 200)(149, 201)(20, 201)(21, 201)(76, 201)(41, 201)(123, 339)(202, 339)(124, 202)(72, 202)(2, 203)(91, 203)(96, 203)(98, 203)(198, 203)(173, 203)(175, 203)(40, 203)(11, 203)(108, 203)(153, 203)(51, 203)(203, 213)(57, 340)(204, 340)(97, 341)(204, 341)(45, 205)(46, 205)(35, 205)(154, 205)(152, 206)(28, 342)(208, 342)(208, 210)(133, 208)(143, 209)(180, 209)(92, 209)(130, 209)(160, 209)(178, 209)(53, 209)(184, 209)(141, 209)(84, 210)(101, 210)(13, 343)(210, 343)(59, 211)(28, 211)(30, 211)(5, 211)(139, 211)(208, 211)(152, 212)(212, 216)(194, 212)(198, 213)(16, 344)(215, 344)(2, 216)(152, 216)(206, 216)(91, 217)(87, 217)(192, 345)(217, 345)(42, 346)(217, 346)(213, 217)(Dict(26 => 4.0), [26], 346, 983)Set parameter TokenServer to value "solice01.zib.de"
Set parameter Threads to value 1
Set parameter OutputFlag to value 1
Gurobi Optimizer version 12.0.1 build v12.0.1rc0 (linux64 - "Debian GNU/Linux 12 (bookworm)")

CPU model: Intel(R) Xeon(R) Gold 5122 CPU @ 3.60GHz, instruction set [SSE2|AVX|AVX2|AVX512]
Thread count: 8 physical cores, 16 logical processors, using up to 1 threads

Non-default parameters:
Threads  1

Optimize a model with 1329 rows, 2949 columns and 4915 nonzeros
Model fingerprint: 0x8eb3cd52
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [1e+00, 1e+00]
  RHS range        [1e+00, 1e+00]
Presolve removed 1329 rows and 2949 columns
Presolve time: 0.02s
Presolve: All rows and columns removed
Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    1.0000000e+00   0.000000e+00   0.000000e+00      0s

Solved in 0 iterations and 0.02 seconds (0.00 work units)
Optimal objective  1.000000000e+00

User-callback calls 35, time in user-callback 0.00 sec
elapsed CPU time: 1.923375 seconds
Set parameter TokenServer to value "solice01.zib.de"
Set parameter Threads to value 1
Set parameter OutputFlag to value 1
Set parameter MIPGap to value 0.0001
Set parameter MIPGapAbs to value 0.999998
Set parameter TimeLimit to value 7198.076625

 more cuts: false 0.002843218153522603 false
is_attach:trueformulation:LEFPAD0 983 0

 model loaded

Gurobi Optimizer version 12.0.1 build v12.0.1rc0 (linux64 - "Debian GNU/Linux 12 (bookworm)")

CPU model: Intel(R) Xeon(R) Gold 5122 CPU @ 3.60GHz, instruction set [SSE2|AVX|AVX2|AVX512]
Thread count: 8 physical cores, 16 logical processors, using up to 1 threads

Non-default parameters:
TimeLimit  7198.076625
MIPGapAbs  0.999998
Threads  1

Optimize a model with 23892 rows, 17740 columns and 67338 nonzeros
Model fingerprint: 0x67c3d46f
Variable types: 8697 continuous, 9043 integer (9043 binary)
Coefficient statistics:
  Matrix range     [3e-09, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [3e-05, 1e+00]
  RHS range        [1e-06, 1e+00]
Found heuristic solution: objective 944.0000000
Presolve removed 11745 rows and 4268 columns
Presolve time: 0.19s
Presolved: 12147 rows, 13472 columns, 44051 nonzeros
Variable types: 7104 continuous, 6368 integer (6368 binary)

Root relaxation: objective 6.640000e+02, 5546 iterations, 0.07 seconds (0.06 work units)

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0  664.00000    0   15  944.00000  664.00000  29.7%     -    0s
     0     0  664.00000    0   15  944.00000  664.00000  29.7%     -    0s
H    0     0                     943.0000000  664.00000  29.6%     -    0s
H    0     0                     918.0000000  664.00000  27.7%     -    0s
H    0     0                     889.0000000  664.00000  25.3%     -    0s
     0     0  664.00000    0    6  889.00000  664.00000  25.3%     -    0s
     0     0  664.00000    0    5  889.00000  664.00000  25.3%     -    0s
     0     0  664.00000    0    5  889.00000  664.00000  25.3%     -    0s
     0     2  664.00000    0    5  889.00000  664.00000  25.3%     -    1s
H   33     3                     664.0000000  664.00000  0.00%   2.9    1s

Cutting planes:
  Gomory: 6
  Cover: 2
  Flow cover: 2

Explored 34 nodes (8238 simplex iterations) in 1.20 seconds (0.69 work units)
Thread count was 1 (of 16 available processors)

Solution count 6: 664 664 889 ... 944

Optimal solution found (tolerance 1.00e-04)
Best objective 6.640000000000e+02, best bound 6.640000000000e+02, gap 0.0000%

User-callback calls 834, time in user-callback 0.00 sec

 sepatime0 0 0
664.0Stat(MathOptInterface.OPTIMAL, 664.0, 664.0, 0.0, 0.0, 1.923375, 1.2001571655273438, 34, Main.CFLG.LEFPAD, "", #undef)
