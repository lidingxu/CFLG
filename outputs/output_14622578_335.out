Data path: /scratch/opt/lxu/CFLG/benchmarks/random_A
Instance: r_15_0.2_22.txt
Result path: /scratch/opt/lxu/CFLG/results/random_A
Solver: Gurobi
Time limit: 7200
Formulation: LEFP
Cover: Large
julia --project=. src/main.jl /scratch/opt/lxu/CFLG/benchmarks/random_A r_15_0.2_22.txt /scratch/opt/lxu/CFLG/results/random_A Gurobi 7200 LEFP Large
The latest version of Julia in the `release` channel is 1.11.5+0.x64.linux.gnu. You currently have `1.11.4+0.x64.linux.gnu` installed. Run:

  juliaup update

in your terminal shell to install Julia 1.11.5+0.x64.linux.gnu and update the `release` channel to that version.
/scratch/opt/lxu/CFLG/benchmarks/random_A Gurobi 7200.0 /scratch/opt/lxu/CFLG/results/random_A r_15_0.2_22.txt LEFP Large
/scratch/opt/lxu/CFLG/benchmarks/random_A/r_15_0.2_22.txt

 read graph
data loaded

problem_graph/original graph: node: 15/15 edge: 22/22 dlt: 1.192558056712511 break_avg_len: 0.5962790283562555 break_max_len: 0.9759077962648577Set parameter TokenServer to value "solice01.zib.de"
Set parameter Threads to value 1
Set parameter OutputFlag to value 1
Gurobi Optimizer version 12.0.1 build v12.0.1rc0 (linux64 - "Debian GNU/Linux 12 (bookworm)")

CPU model: Intel(R) Xeon(R) Gold 5222 CPU @ 3.80GHz, instruction set [SSE2|AVX|AVX2|AVX512]
Thread count: 8 physical cores, 16 logical processors, using up to 1 threads

Non-default parameters:
Threads  1

Optimize a model with 37 rows, 66 columns and 110 nonzeros
Model fingerprint: 0xfbbdfe4c
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [1e+00, 1e+00]
  RHS range        [1e+00, 1e+00]
Presolve removed 37 rows and 66 columns
Presolve time: 0.00s
Presolve: All rows and columns removed
Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    2.0000000e+00   0.000000e+00   0.000000e+00      0s

Solved in 0 iterations and 0.00 seconds (0.00 work units)
Optimal objective  2.000000000e+00

User-callback calls 35, time in user-callback 0.01 sec
elapsed CPU time: 1.105946 seconds
Set parameter TokenServer to value "solice01.zib.de"
Set parameter Threads to value 1
Set parameter OutputFlag to value 1
Set parameter MIPGap to value 0.0001
Set parameter TimeLimit to value 7198.894054

 more cuts: false 1.192558056712511 false
is_attach:falseformulation:LEFP0 22 0

 model loaded

Min ye[1] + ye[2] + ye[3] + ye[4] + ye[5] + ye[6] + ye[7] + ye[8] + ye[9] + ye[10] + ye[11] + ye[12] + ye[13] + ye[14] + ye[15] + ye[16] + ye[17] + ye[18] + ye[19] + ye[20] + ye[21] + ye[22] + yv[1] + yv[2] + yv[3] + yv[4] + yv[5] + yv[6] + yv[7] + yv[8] + yv[9] + yv[10] + yv[11] + yv[12] + yv[13] + yv[14] + yv[15]
Subject to
 q[1,a] ≥ 0
 q[2,a] ≥ 0
 q[3,a] ≥ 0
 q[4,a] ≥ 0
 q[5,a] ≥ 0
 q[6,a] ≥ 0
 q[7,a] ≥ 0
 q[8,a] ≥ 0
 q[9,a] ≥ 0
 q[10,a] ≥ 0
 q[11,a] ≥ 0
 q[12,a] ≥ 0
 q[13,a] ≥ 0
 q[14,a] ≥ 0
 q[15,a] ≥ 0
 q[16,a] ≥ 0
 q[17,a] ≥ 0
 q[18,a] ≥ 0
 q[19,a] ≥ 0
 q[20,a] ≥ 0
 q[21,a] ≥ 0
 q[22,a] ≥ 0
 q[1,b] ≥ 0
 q[2,b] ≥ 0
 q[3,b] ≥ 0
 q[4,b] ≥ 0
 q[5,b] ≥ 0
 q[6,b] ≥ 0
 q[7,b] ≥ 0
 q[8,b] ≥ 0
 q[9,b] ≥ 0
 q[10,b] ≥ 0
 q[11,b] ≥ 0
 q[12,b] ≥ 0
 q[13,b] ≥ 0
 q[14,b] ≥ 0
 q[15,b] ≥ 0
 q[16,b] ≥ 0
 q[17,b] ≥ 0
 q[18,b] ≥ 0
 q[19,b] ≥ 0
 q[20,b] ≥ 0
 q[21,b] ≥ 0
 q[22,b] ≥ 0
 rv[1] ≥ 0
 rv[2] ≥ 0
 rv[3] ≥ 0
 rv[4] ≥ 0
 rv[5] ≥ 0
 rv[6] ≥ 0
[[...1176 constraints skipped...]]
 yv[3] binary
 yv[4] binary
 yv[5] binary
 yv[6] binary
 yv[7] binary
 yv[8] binary
 yv[9] binary
 yv[10] binary
 yv[11] binary
 yv[12] binary
 yv[13] binary
 yv[14] binary
 yv[15] binary
 q[1,a] - q[1,b] = 0
 q[2,a] - q[2,b] = 0
 q[3,a] - q[3,b] = 0
 q[4,a] - q[4,b] = 0
 q[5,a] - q[5,b] = 0
 q[6,a] - q[6,b] = 0
 q[7,a] - q[7,b] = 0
 q[8,a] - q[8,b] = 0
 q[9,a] - q[9,b] = 0
 q[10,a] - q[10,b] = 0
 q[11,a] - q[11,b] = 0
 q[12,a] - q[12,b] = 0
 q[13,a] - q[13,b] = 0
 q[14,a] - q[14,b] = 0
 q[15,a] - q[15,b] = 0
 q[16,a] - q[16,b] = 0
 q[17,a] - q[17,b] = 0
 q[18,a] - q[18,b] = 0
 q[19,a] - q[19,b] = 0
 q[20,a] - q[20,b] = 0
 q[21,a] - q[21,b] = 0
 q[22,a] - q[22,b] = 0
 x[1] + ze[1,(17, :b)] + ze[1,(1, :b)] + ze[1,(22, :b)] + ze[1,(16, :a)] + ze[1,(11, :b)] + ze[1,(9, :b)] + ze[1,(12, :a)] + ze[1,(3, :b)] + ze[1,(17, :a)] + ze[1,(1, :a)] + ze[1,(11, :a)] + ze[1,(3, :a)] + ze[1,(4, :b)] + ze[1,(15, :b)] + ze[1,(2, :b)] + ze[1,(7, :a)] + ze[1,(18, :b)] + ze[1,(4, :a)] + ze[1,(21, :a)] + ze[1,(2, :a)] + ze[1,(12, :b)] + ze[1,(18, :a)] = 1
 x[2] + ze[2,(16, :b)] + ze[2,(22, :a)] + ze[2,(15, :a)] + ze[2,(20, :a)] + ze[2,(21, :b)] + ze[2,(10, :a)] + ze[2,(10, :b)] + ze[2,(9, :a)] = 1
 x[3] + ze[3,(17, :b)] + ze[3,(1, :b)] + ze[3,(16, :a)] + ze[3,(11, :b)] + ze[3,(9, :b)] + ze[3,(12, :a)] + ze[3,(3, :b)] + ze[3,(17, :a)] + ze[3,(1, :a)] + ze[3,(7, :b)] + ze[3,(11, :a)] + ze[3,(3, :a)] + ze[3,(4, :b)] + ze[3,(2, :b)] + ze[3,(7, :a)] + ze[3,(4, :a)] + ze[3,(21, :a)] + ze[3,(2, :a)] + ze[3,(12, :b)] + ze[3,(18, :a)] = 1
 x[4] + ze[4,(8, :b)] + ze[4,(22, :b)] + ze[4,(5, :a)] + ze[4,(6, :b)] + ze[4,(20, :a)] + ze[4,(9, :b)] + ze[4,(8, :a)] + ze[4,(3, :b)] + ze[4,(19, :a)] + ze[4,(6, :a)] + ze[4,(9, :a)] + ze[4,(13, :b)] + ze[4,(15, :b)] + ze[4,(10, :b)] + ze[4,(18, :b)] + ze[4,(5, :b)] + ze[4,(16, :b)] + ze[4,(13, :a)] + ze[4,(15, :a)] + ze[4,(10, :a)] + ze[4,(12, :b)] + ze[4,(18, :a)] = 1
 x[5] + ze[5,(17, :b)] + ze[5,(1, :b)] + ze[5,(16, :a)] + ze[5,(11, :b)] + ze[5,(9, :b)] + ze[5,(12, :a)] + ze[5,(3, :b)] + ze[5,(17, :a)] + ze[5,(1, :a)] + ze[5,(11, :a)] + ze[5,(3, :a)] + ze[5,(4, :b)] + ze[5,(2, :b)] + ze[5,(7, :a)] + ze[5,(4, :a)] + ze[5,(21, :a)] + ze[5,(2, :a)] + ze[5,(12, :b)] + ze[5,(18, :a)] = 1
 x[6] + ze[6,(19, :b)] + ze[6,(22, :b)] + ze[6,(5, :a)] + ze[6,(6, :b)] + ze[6,(20, :a)] + ze[6,(9, :b)] + ze[6,(3, :b)] + ze[6,(19, :a)] + ze[6,(22, :a)] + ze[6,(6, :a)] + ze[6,(9, :a)] + ze[6,(15, :b)] + ze[6,(21, :b)] + ze[6,(10, :b)] + ze[6,(18, :b)] + ze[6,(5, :b)] + ze[6,(16, :b)] + ze[6,(20, :b)] + ze[6,(15, :a)] + ze[6,(10, :a)] + ze[6,(12, :b)] + ze[6,(18, :a)] = 1
 x[7] + ze[7,(17, :b)] + ze[7,(1, :b)] + ze[7,(6, :b)] + ze[7,(16, :a)] + ze[7,(11, :b)] + ze[7,(9, :b)] + ze[7,(12, :a)] + ze[7,(3, :b)] + ze[7,(17, :a)] + ze[7,(1, :a)] + ze[7,(19, :a)] + ze[7,(11, :a)] + ze[7,(3, :a)] + ze[7,(4, :b)] + ze[7,(13, :b)] + ze[7,(2, :b)] + ze[7,(7, :a)] + ze[7,(10, :b)] + ze[7,(16, :b)] + ze[7,(4, :a)] + ze[7,(21, :a)] + ze[7,(2, :a)] + ze[7,(12, :b)] + ze[7,(18, :a)] = 1
 x[8] + ze[8,(8, :b)] + ze[8,(1, :b)] + ze[8,(19, :b)] + ze[8,(22, :b)] + ze[8,(16, :a)] + ze[8,(20, :a)] + ze[8,(11, :b)] + ze[8,(9, :b)] + ze[8,(12, :a)] + ze[8,(14, :b)] + ze[8,(8, :a)] + ze[8,(17, :a)] + ze[8,(3, :b)] + ze[8,(1, :a)] + ze[8,(22, :a)] + ze[8,(11, :a)] + ze[8,(9, :a)] + ze[8,(14, :a)] + ze[8,(3, :a)] + ze[8,(15, :b)] + ze[8,(21, :b)] + ze[8,(2, :b)] + ze[8,(7, :a)] + ze[8,(18, :b)] + ze[8,(5, :b)] + ze[8,(4, :a)] + ze[8,(15, :a)] + ze[8,(13, :a)] + ze[8,(2, :a)] + ze[8,(10, :a)] + ze[8,(12, :b)] + ze[8,(18, :a)] = 1
 x[9] + ze[9,(8, :b)] + ze[9,(19, :b)] + ze[9,(22, :b)] + ze[9,(5, :a)] + ze[9,(6, :b)] + ze[9,(16, :a)] + ze[9,(20, :a)] + ze[9,(11, :b)] + ze[9,(14, :b)] + ze[9,(8, :a)] + ze[9,(17, :a)] + ze[9,(19, :a)] + ze[9,(22, :a)] + ze[9,(6, :a)] + ze[9,(9, :a)] + ze[9,(14, :a)] + ze[9,(13, :b)] + ze[9,(15, :b)] + ze[9,(21, :b)] + ze[9,(2, :b)] + ze[9,(10, :b)] + ze[9,(18, :b)] + ze[9,(5, :b)] + ze[9,(16, :b)] + ze[9,(13, :a)] + ze[9,(15, :a)] + ze[9,(10, :a)] = 1
 x[10] + ze[10,(1, :b)] = 1
 x[11] + ze[11,(8, :b)] + ze[11,(22, :b)] + ze[11,(5, :a)] + ze[11,(6, :b)] + ze[11,(20, :a)] + ze[11,(9, :b)] + ze[11,(14, :b)] + ze[11,(8, :a)] + ze[11,(3, :b)] + ze[11,(19, :a)] + ze[11,(6, :a)] + ze[11,(9, :a)] + ze[11,(14, :a)] + ze[11,(13, :b)] + ze[11,(15, :b)] + ze[11,(10, :b)] + ze[11,(18, :b)] + ze[11,(5, :b)] + ze[11,(16, :b)] + ze[11,(20, :b)] + ze[11,(13, :a)] + ze[11,(15, :a)] + ze[11,(10, :a)] + ze[11,(12, :b)] + ze[11,(18, :a)] = 1
 x[12] + ze[12,(14, :b)] + ze[12,(8, :b)] + ze[12,(14, :a)] + ze[12,(5, :b)] + ze[12,(13, :a)] + ze[12,(15, :a)] = 1
 x[13] + ze[13,(17, :b)] + ze[13,(1, :b)] + ze[13,(19, :b)] + ze[13,(16, :a)] + ze[13,(11, :b)] + ze[13,(12, :a)] + ze[13,(17, :a)] + ze[13,(1, :a)] + ze[13,(22, :a)] + ze[13,(11, :a)] + ze[13,(3, :a)] + ze[13,(4, :b)] + ze[13,(21, :b)] + ze[13,(2, :b)] + ze[13,(7, :a)] + ze[13,(4, :a)] + ze[13,(21, :a)] + ze[13,(2, :a)] = 1
 x[14] + ze[14,(8, :b)] + ze[14,(17, :b)] + ze[14,(19, :b)] + ze[14,(22, :b)] + ze[14,(5, :a)] + ze[14,(6, :b)] + ze[14,(9, :b)] + ze[14,(3, :b)] + ze[14,(19, :a)] + ze[14,(22, :a)] + ze[14,(6, :a)] + ze[14,(14, :a)] + ze[14,(13, :b)] + ze[14,(15, :b)] + ze[14,(21, :b)] + ze[14,(4, :b)] + ze[14,(10, :b)] + ze[14,(18, :b)] + ze[14,(5, :b)] + ze[14,(16, :b)] + ze[14,(13, :a)] + ze[14,(15, :a)] + ze[14,(21, :a)] + ze[14,(12, :b)] + ze[14,(18, :a)] = 1
 x[15] + ze[15,(8, :b)] + ze[15,(19, :b)] + ze[15,(22, :b)] + ze[15,(6, :b)] + ze[15,(20, :a)] + ze[15,(9, :b)] + ze[15,(14, :b)] + ze[15,(8, :a)] + ze[15,(3, :b)] + ze[15,(1, :a)] + ze[15,(19, :a)] + ze[15,(22, :a)] + ze[15,(9, :a)] + ze[15,(14, :a)] + ze[15,(3, :a)] + ze[15,(13, :b)] + ze[15,(15, :b)] + ze[15,(21, :b)] + ze[15,(10, :b)] + ze[15,(18, :b)] + ze[15,(5, :b)] + ze[15,(16, :b)] + ze[15,(13, :a)] + ze[15,(15, :a)] + ze[15,(4, :a)] + ze[15,(2, :a)] + ze[15,(10, :a)] + ze[15,(12, :b)] + ze[15,(18, :a)] = 1
Gurobi Optimizer version 12.0.1 build v12.0.1rc0 (linux64 - "Debian GNU/Linux 12 (bookworm)")

CPU model: Intel(R) Xeon(R) Gold 5222 CPU @ 3.80GHz, instruction set [SSE2|AVX|AVX2|AVX512]
Thread count: 8 physical cores, 16 logical processors, using up to 1 threads

Non-default parameters:
TimeLimit  7198.894054
Threads  1

Optimize a model with 784 rows, 433 columns and 2239 nonzeros
Model fingerprint: 0x0e08c8a4
Variable types: 59 continuous, 374 integer (374 binary)
Coefficient statistics:
  Matrix range     [1e-06, 2e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [3e-01, 1e+00]
  RHS range        [1e-06, 2e+00]
Found heuristic solution: objective 10.0000000
Presolve removed 216 rows and 86 columns
Presolve time: 0.02s
Presolved: 568 rows, 347 columns, 2812 nonzeros
Variable types: 36 continuous, 311 integer (311 binary)

Root relaxation: objective 1.551349e+00, 277 iterations, 0.00 seconds (0.00 work units)

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0    1.55135    0   56   10.00000    1.55135  84.5%     -    0s
H    0     0                       6.0000000    1.55135  74.1%     -    0s
H    0     0                       5.0000000    1.55135  69.0%     -    0s
H    0     0                       4.0000000    1.55135  61.2%     -    0s
     0     0    2.00000    0   59    4.00000    2.00000  50.0%     -    0s
     0     0    2.00000    0   29    4.00000    2.00000  50.0%     -    0s
     0     0    2.00000    0   29    4.00000    2.00000  50.0%     -    0s
     0     0    2.00000    0   39    4.00000    2.00000  50.0%     -    0s
     0     0    2.00000    0   38    4.00000    2.00000  50.0%     -    0s
     0     0    2.00000    0   37    4.00000    2.00000  50.0%     -    0s
H    0     0                       3.0000000    2.00000  33.3%     -    0s
     0     0    2.00000    0   37    3.00000    2.00000  33.3%     -    0s
     0     0    2.00000    0   50    3.00000    2.00000  33.3%     -    0s

Cutting planes:
  Gomory: 1
  Cover: 2
  Implied bound: 1
  MIR: 6
  StrongCG: 1
  Flow cover: 1
  GUB cover: 3
  RLT: 4

Explored 1 nodes (1218 simplex iterations) in 0.09 seconds (0.07 work units)
Thread count was 1 (of 16 available processors)

Solution count 5: 3 4 5 ... 10

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%

User-callback calls 743, time in user-callback 0.00 sec

 sepatime0 0 0
3.0Stat(MathOptInterface.OPTIMAL, 3.0, 3.0, 0.0, 0.0, 1.105946, 0.09398388862609863, 1, Main.CFLG.LEFP, "", #undef)
