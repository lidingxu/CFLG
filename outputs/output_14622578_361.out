Data path: /scratch/opt/lxu/CFLG/benchmarks/random_A
Instance: r_20_0.1_23.txt
Result path: /scratch/opt/lxu/CFLG/results/random_A
Solver: Gurobi
Time limit: 7200
Formulation: EFP
Cover: Large
julia --project=. src/main.jl /scratch/opt/lxu/CFLG/benchmarks/random_A r_20_0.1_23.txt /scratch/opt/lxu/CFLG/results/random_A Gurobi 7200 EFP Large
The latest version of Julia in the `release` channel is 1.11.5+0.x64.linux.gnu. You currently have `1.11.4+0.x64.linux.gnu` installed. Run:

  juliaup update

in your terminal shell to install Julia 1.11.5+0.x64.linux.gnu and update the `release` channel to that version.
/scratch/opt/lxu/CFLG/benchmarks/random_A Gurobi 7200.0 /scratch/opt/lxu/CFLG/results/random_A r_20_0.1_23.txt EFP Large
/scratch/opt/lxu/CFLG/benchmarks/random_A/r_20_0.1_23.txt

 read graph
data loaded

problem_graph/original graph: node: 20/20 edge: 23/23 dlt: 1.2027549052001565 break_avg_len: 0.6013774526000782 break_max_len: 0.9478387600141464elapsed CPU time: 0.027621 seconds
Set parameter TokenServer to value "solice01.zib.de"
Set parameter Threads to value 1
Set parameter OutputFlag to value 1
Set parameter MIPGap to value 0.0001
Set parameter TimeLimit to value 7199.972379

 more cuts: false 1.2027549052001565 false
is_attach:falseformulation:EFP0 23 0

 model loaded

Min ye[1] + ye[2] + ye[3] + ye[4] + ye[5] + ye[6] + ye[7] + ye[8] + ye[9] + ye[10] + ye[11] + ye[12] + ye[13] + ye[14] + ye[15] + ye[16] + ye[17] + ye[18] + ye[19] + ye[20] + ye[21] + ye[22] + ye[23]
Subject to
 q[1,a] ≥ 0
 q[2,a] ≥ 0
 q[3,a] ≥ 0
 q[4,a] ≥ 0
 q[5,a] ≥ 0
 q[6,a] ≥ 0
 q[7,a] ≥ 0
 q[8,a] ≥ 0
 q[9,a] ≥ 0
 q[10,a] ≥ 0
 q[11,a] ≥ 0
 q[12,a] ≥ 0
 q[13,a] ≥ 0
 q[14,a] ≥ 0
 q[15,a] ≥ 0
 q[16,a] ≥ 0
 q[17,a] ≥ 0
 q[18,a] ≥ 0
 q[19,a] ≥ 0
 q[20,a] ≥ 0
 q[21,a] ≥ 0
 q[22,a] ≥ 0
 q[23,a] ≥ 0
 q[1,b] ≥ 0
 q[2,b] ≥ 0
 q[3,b] ≥ 0
 q[4,b] ≥ 0
 q[5,b] ≥ 0
 q[6,b] ≥ 0
 q[7,b] ≥ 0
 q[8,b] ≥ 0
 q[9,b] ≥ 0
 q[10,b] ≥ 0
 q[11,b] ≥ 0
 q[12,b] ≥ 0
 q[13,b] ≥ 0
 q[14,b] ≥ 0
 q[15,b] ≥ 0
 q[16,b] ≥ 0
 q[17,b] ≥ 0
 q[18,b] ≥ 0
 q[19,b] ≥ 0
 q[20,b] ≥ 0
 q[21,b] ≥ 0
 q[22,b] ≥ 0
 q[23,b] ≥ 0
 rv[1] ≥ 0
 rv[2] ≥ 0
 rv[3] ≥ 0
 rv[4] ≥ 0
[[...894 constraints skipped...]]
 ze[20,(3, :a)] binary
 ze[20,(4, :b)] binary
 ze[20,(18, :b)] binary
 ze[20,(4, :a)] binary
 ze[20,(2, :a)] binary
 ze[20,(18, :a)] binary
 ze[20,(12, :b)] binary
 q[1,a] - q[1,b] = 0
 q[2,a] - q[2,b] = 0
 q[3,a] - q[3,b] = 0
 q[4,a] - q[4,b] = 0
 q[5,a] - q[5,b] = 0
 q[6,a] - q[6,b] = 0
 q[7,a] - q[7,b] = 0
 q[8,a] - q[8,b] = 0
 q[9,a] - q[9,b] = 0
 q[10,a] - q[10,b] = 0
 q[11,a] - q[11,b] = 0
 q[12,a] - q[12,b] = 0
 q[13,a] - q[13,b] = 0
 q[14,a] - q[14,b] = 0
 q[15,a] - q[15,b] = 0
 q[16,a] - q[16,b] = 0
 q[17,a] - q[17,b] = 0
 q[18,a] - q[18,b] = 0
 q[19,a] - q[19,b] = 0
 q[20,a] - q[20,b] = 0
 q[21,a] - q[21,b] = 0
 q[22,a] - q[22,b] = 0
 q[23,a] - q[23,b] = 0
 x[1] + ze[1,(17, :a)] + ze[1,(4, :b)] + ze[1,(18, :a)] + ze[1,(12, :b)] = 1
 x[2] + ze[2,(1, :b)] + ze[2,(19, :b)] + ze[2,(14, :b)] + ze[2,(3, :b)] + ze[2,(3, :a)] + ze[2,(4, :b)] + ze[2,(21, :b)] + ze[2,(2, :b)] + ze[2,(4, :a)] + ze[2,(21, :a)] + ze[2,(2, :a)] + ze[2,(12, :b)] = 1
 x[3] + ze[3,(8, :b)] + ze[3,(17, :b)] + ze[3,(5, :a)] + ze[3,(6, :b)] + ze[3,(16, :a)] + ze[3,(20, :a)] + ze[3,(9, :b)] + ze[3,(8, :a)] + ze[3,(7, :b)] + ze[3,(6, :a)] + ze[3,(11, :a)] + ze[3,(9, :a)] + ze[3,(7, :a)] + ze[3,(10, :b)] + ze[3,(5, :b)] + ze[3,(16, :b)] + ze[3,(10, :a)] = 1
 x[4] + ze[4,(8, :b)] + ze[4,(17, :b)] + ze[4,(5, :a)] + ze[4,(6, :b)] + ze[4,(16, :a)] + ze[4,(20, :a)] + ze[4,(9, :b)] + ze[4,(8, :a)] + ze[4,(7, :b)] + ze[4,(6, :a)] + ze[4,(11, :a)] + ze[4,(9, :a)] + ze[4,(7, :a)] + ze[4,(10, :b)] + ze[4,(5, :b)] + ze[4,(16, :b)] + ze[4,(10, :a)] = 1
 x[5] + ze[5,(17, :b)] + ze[5,(5, :a)] + ze[5,(6, :b)] + ze[5,(11, :b)] + ze[5,(20, :a)] + ze[5,(9, :b)] + ze[5,(8, :a)] + ze[5,(7, :b)] + ze[5,(6, :a)] + ze[5,(11, :a)] + ze[5,(9, :a)] + ze[5,(13, :b)] + ze[5,(7, :a)] + ze[5,(10, :b)] + ze[5,(5, :b)] + ze[5,(16, :b)] + ze[5,(10, :a)] = 1
 x[6] + ze[6,(1, :b)] + ze[6,(19, :b)] + ze[6,(4, :b)] = 1
 x[7] + ze[7,(8, :b)] + ze[7,(8, :a)] + ze[7,(6, :a)] + ze[7,(16, :a)] + ze[7,(11, :a)] = 1
 x[8] + ze[8,(14, :b)] + ze[8,(14, :a)] + ze[8,(23, :b)] + ze[8,(13, :b)] + ze[8,(15, :b)] + ze[8,(13, :a)] + ze[8,(15, :a)] + ze[8,(21, :a)] + ze[8,(11, :b)] + ze[8,(2, :b)] = 1
 x[9] + ze[9,(17, :b)] + ze[9,(22, :b)] + ze[9,(5, :a)] + ze[9,(6, :b)] + ze[9,(20, :a)] + ze[9,(9, :b)] + ze[9,(17, :a)] + ze[9,(23, :a)] + ze[9,(19, :a)] + ze[9,(7, :b)] + ze[9,(6, :a)] + ze[9,(7, :a)] + ze[9,(20, :b)] + ze[9,(18, :a)] = 1
 x[10] + ze[10,(8, :b)] + ze[10,(17, :b)] + ze[10,(1, :b)] + ze[10,(19, :b)] + ze[10,(6, :b)] + ze[10,(16, :a)] + ze[10,(20, :a)] + ze[10,(17, :a)] + ze[10,(1, :a)] + ze[10,(19, :a)] + ze[10,(4, :b)] + ze[10,(16, :b)] + ze[10,(12, :b)] = 1
 x[11] + ze[11,(8, :a)] + ze[11,(6, :a)] + ze[11,(11, :a)] = 1
 x[12] + ze[12,(8, :b)] + ze[12,(17, :b)] + ze[12,(22, :b)] + ze[12,(5, :a)] + ze[12,(6, :b)] + ze[12,(16, :a)] + ze[12,(20, :a)] + ze[12,(8, :a)] + ze[12,(17, :a)] + ze[12,(23, :a)] + ze[12,(19, :a)] + ze[12,(22, :a)] + ze[12,(6, :a)] + ze[12,(11, :a)] + ze[12,(9, :a)] + ze[12,(7, :a)] + ze[12,(18, :b)] + ze[12,(5, :b)] + ze[12,(16, :b)] + ze[12,(20, :b)] + ze[12,(10, :a)] + ze[12,(18, :a)] = 1
 x[13] + ze[13,(23, :b)] + ze[13,(11, :b)] + ze[13,(11, :a)] + ze[13,(9, :a)] + ze[13,(14, :a)] + ze[13,(13, :b)] + ze[13,(15, :b)] + ze[13,(5, :b)] + ze[13,(13, :a)] + ze[13,(15, :a)] + ze[13,(10, :a)] = 1
 x[14] + ze[14,(14, :b)] + ze[14,(3, :b)] + ze[14,(14, :a)] + ze[14,(3, :a)] + ze[14,(21, :b)] + ze[14,(2, :b)] + ze[14,(4, :a)] + ze[14,(13, :a)] + ze[14,(21, :a)] + ze[14,(2, :a)] + ze[14,(15, :a)] = 1
 x[15] + ze[15,(17, :b)] + ze[15,(23, :a)] + ze[15,(16, :b)] + ze[15,(6, :b)] = 1
 x[16] + ze[16,(1, :b)] + ze[16,(4, :b)] + ze[16,(16, :b)] + ze[16,(6, :b)] + ze[16,(20, :a)] + ze[16,(12, :b)] = 1
 x[17] + ze[17,(8, :b)] + ze[17,(17, :b)] + ze[17,(23, :b)] + ze[17,(22, :b)] + ze[17,(6, :b)] + ze[17,(16, :a)] + ze[17,(20, :a)] + ze[17,(23, :a)] + ze[17,(22, :a)] + ze[17,(15, :b)] + ze[17,(16, :b)] + ze[17,(20, :b)] = 1
 x[18] + ze[18,(14, :b)] + ze[18,(3, :b)] + ze[18,(3, :a)] + ze[18,(4, :a)] + ze[18,(21, :b)] + ze[18,(21, :a)] + ze[18,(2, :a)] + ze[18,(2, :b)] = 1
 x[19] + ze[19,(14, :a)] + ze[19,(23, :b)] + ze[19,(22, :b)] + ze[19,(13, :b)] + ze[19,(15, :b)] + ze[19,(13, :a)] + ze[19,(15, :a)] + ze[19,(20, :b)] + ze[19,(11, :b)] + ze[19,(23, :a)] = 1
 x[20] + ze[20,(1, :b)] + ze[20,(19, :b)] + ze[20,(12, :a)] + ze[20,(17, :a)] + ze[20,(1, :a)] + ze[20,(19, :a)] + ze[20,(3, :a)] + ze[20,(4, :b)] + ze[20,(18, :b)] + ze[20,(4, :a)] + ze[20,(2, :a)] + ze[20,(18, :a)] + ze[20,(12, :b)] = 1
Gurobi Optimizer version 12.0.1 build v12.0.1rc0 (linux64 - "Debian GNU/Linux 12 (bookworm)")

CPU model: Intel(R) Xeon(R) Gold 5122 CPU @ 3.60GHz, instruction set [SSE2|AVX|AVX2|AVX512]
Thread count: 8 physical cores, 16 logical processors, using up to 1 threads

Non-default parameters:
TimeLimit  7199.972379
Threads  1

Optimize a model with 584 rows, 344 columns and 1623 nonzeros
Model fingerprint: 0x565fa8b5
Variable types: 66 continuous, 278 integer (278 binary)
Coefficient statistics:
  Matrix range     [1e-06, 2e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [3e-01, 9e-01]
  RHS range        [3e-01, 2e+00]
Found heuristic solution: objective 11.0000000
Presolve removed 181 rows and 77 columns
Presolve time: 0.01s
Presolved: 403 rows, 267 columns, 1854 nonzeros
Variable types: 42 continuous, 225 integer (225 binary)

Root relaxation: objective 1.608019e+00, 253 iterations, 0.00 seconds (0.00 work units)

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0    1.60802    0   63   11.00000    1.60802  85.4%     -    0s
H    0     0                       9.0000000    1.60802  82.1%     -    0s
H    0     0                       6.0000000    1.60802  73.2%     -    0s
     0     0    2.20223    0   75    6.00000    2.20223  63.3%     -    0s
H    0     0                       5.0000000    2.21184  55.8%     -    0s
     0     0    2.21184    0   78    5.00000    2.21184  55.8%     -    0s
     0     0    2.46168    0  102    5.00000    2.46168  50.8%     -    0s
     0     0    2.46900    0   89    5.00000    2.46900  50.6%     -    0s
     0     0    2.46900    0   89    5.00000    2.46900  50.6%     -    0s
     0     0    3.00000    0   80    5.00000    3.00000  40.0%     -    0s
     0     0    3.00000    0   74    5.00000    3.00000  40.0%     -    0s
     0     0    3.00000    0   54    5.00000    3.00000  40.0%     -    0s
     0     0    3.00000    0   53    5.00000    3.00000  40.0%     -    0s
     0     0    3.00000    0   48    5.00000    3.00000  40.0%     -    0s
     0     0    3.00000    0   47    5.00000    3.00000  40.0%     -    0s
     0     0    3.00000    0   28    5.00000    3.00000  40.0%     -    0s
     0     0    3.00000    0   57    5.00000    3.00000  40.0%     -    0s
     0     0    3.00000    0   21    5.00000    3.00000  40.0%     -    0s
     0     0    3.00000    0   62    5.00000    3.00000  40.0%     -    0s
     0     0    3.00000    0   43    5.00000    3.00000  40.0%     -    0s
     0     0    3.00000    0   53    5.00000    3.00000  40.0%     -    0s
     0     0    3.00000    0   35    5.00000    3.00000  40.0%     -    0s
     0     0    3.00000    0   35    5.00000    3.00000  40.0%     -    0s
     0     2    3.00000    0   35    5.00000    3.00000  40.0%     -    0s
H   15     2                       4.0000000    3.00000  25.0%  28.4    0s

Explored 18 nodes (3195 simplex iterations) in 0.23 seconds (0.13 work units)
Thread count was 1 (of 16 available processors)

Solution count 5: 4 5 6 ... 11

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%

User-callback calls 775, time in user-callback 0.01 sec

 sepatime0 0 0
4.0Stat(MathOptInterface.OPTIMAL, 4.0, 4.0, 0.0, 0.0, 0.027621, 0.23202300071716309, 18, Main.CFLG.EFP, "", #undef)
