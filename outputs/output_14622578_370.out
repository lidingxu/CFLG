Data path: /scratch/opt/lxu/CFLG/benchmarks/random_A
Instance: r_20_0.2_34.txt
Result path: /scratch/opt/lxu/CFLG/results/random_A
Solver: Gurobi
Time limit: 7200
Formulation: EFP
Cover: Large
julia --project=. src/main.jl /scratch/opt/lxu/CFLG/benchmarks/random_A r_20_0.2_34.txt /scratch/opt/lxu/CFLG/results/random_A Gurobi 7200 EFP Large
The latest version of Julia in the `release` channel is 1.11.5+0.x64.linux.gnu. You currently have `1.11.4+0.x64.linux.gnu` installed. Run:

  juliaup update

in your terminal shell to install Julia 1.11.5+0.x64.linux.gnu and update the `release` channel to that version.
/scratch/opt/lxu/CFLG/benchmarks/random_A Gurobi 7200.0 /scratch/opt/lxu/CFLG/results/random_A r_20_0.2_34.txt EFP Large
/scratch/opt/lxu/CFLG/benchmarks/random_A/r_20_0.2_34.txt

 read graph
data loaded

problem_graph/original graph: node: 20/20 edge: 34/34 dlt: 1.2285408330163121 break_avg_len: 0.6142704165081561 break_max_len: 0.9824660469310703elapsed CPU time: 0.025905 seconds
Set parameter TokenServer to value "solice01.zib.de"
Set parameter Threads to value 1
Set parameter OutputFlag to value 1
Set parameter MIPGap to value 0.0001
Set parameter TimeLimit to value 7199.974095

 more cuts: false 1.2285408330163121 false
is_attach:falseformulation:EFP0 34 0

 model loaded

Min ye[1] + ye[2] + ye[3] + ye[4] + ye[5] + ye[6] + ye[7] + ye[8] + ye[9] + ye[10] + ye[11] + ye[12] + ye[13] + ye[14] + ye[15] + ye[16] + ye[17] + ye[18] + ye[19] + ye[20] + ye[21] + ye[22] + ye[23] + ye[24] + ye[25] + ye[26] + ye[27] + ye[28] + ye[29] + ye[30] + ye[31] + ye[32] + ye[33] + ye[34]
Subject to
 q[1,a] ≥ 0
 q[2,a] ≥ 0
 q[3,a] ≥ 0
 q[4,a] ≥ 0
 q[5,a] ≥ 0
 q[6,a] ≥ 0
 q[7,a] ≥ 0
 q[8,a] ≥ 0
 q[9,a] ≥ 0
 q[10,a] ≥ 0
 q[11,a] ≥ 0
 q[12,a] ≥ 0
 q[13,a] ≥ 0
 q[14,a] ≥ 0
 q[15,a] ≥ 0
 q[16,a] ≥ 0
 q[17,a] ≥ 0
 q[18,a] ≥ 0
 q[19,a] ≥ 0
 q[20,a] ≥ 0
 q[21,a] ≥ 0
 q[22,a] ≥ 0
 q[23,a] ≥ 0
 q[24,a] ≥ 0
 q[25,a] ≥ 0
 q[26,a] ≥ 0
 q[27,a] ≥ 0
 q[28,a] ≥ 0
 q[29,a] ≥ 0
 q[30,a] ≥ 0
 q[31,a] ≥ 0
 q[32,a] ≥ 0
 q[33,a] ≥ 0
 q[34,a] ≥ 0
 q[1,b] ≥ 0
 q[2,b] ≥ 0
 q[3,b] ≥ 0
 q[4,b] ≥ 0
 q[5,b] ≥ 0
 q[6,b] ≥ 0
 q[7,b] ≥ 0
 q[8,b] ≥ 0
 q[9,b] ≥ 0
 q[10,b] ≥ 0
 q[11,b] ≥ 0
 q[12,b] ≥ 0
 q[13,b] ≥ 0
 q[14,b] ≥ 0
 q[15,b] ≥ 0
 q[16,b] ≥ 0
[[...2593 constraints skipped...]]
 q[5,a] - q[5,b] = 0
 q[6,a] - q[6,b] = 0
 q[7,a] - q[7,b] = 0
 q[8,a] - q[8,b] = 0
 q[9,a] - q[9,b] = 0
 q[10,a] - q[10,b] = 0
 q[11,a] - q[11,b] = 0
 q[12,a] - q[12,b] = 0
 q[13,a] - q[13,b] = 0
 q[14,a] - q[14,b] = 0
 q[15,a] - q[15,b] = 0
 q[16,a] - q[16,b] = 0
 q[17,a] - q[17,b] = 0
 q[18,a] - q[18,b] = 0
 q[19,a] - q[19,b] = 0
 q[20,a] - q[20,b] = 0
 q[21,a] - q[21,b] = 0
 q[22,a] - q[22,b] = 0
 q[23,a] - q[23,b] = 0
 q[24,a] - q[24,b] = 0
 q[25,a] - q[25,b] = 0
 q[26,a] - q[26,b] = 0
 q[27,a] - q[27,b] = 0
 q[28,a] - q[28,b] = 0
 q[29,a] - q[29,b] = 0
 q[30,a] - q[30,b] = 0
 q[31,a] - q[31,b] = 0
 q[32,a] - q[32,b] = 0
 q[33,a] - q[33,b] = 0
 q[34,a] - q[34,b] = 0
 x[1] + ze[1,(28, :b)] + ze[1,(23, :b)] + ze[1,(11, :b)] + ze[1,(12, :a)] + ze[1,(28, :a)] + ze[1,(23, :a)] + ze[1,(7, :b)] + ze[1,(11, :a)] + ze[1,(34, :b)] + ze[1,(2, :b)] + ze[1,(27, :b)] + ze[1,(25, :a)] + ze[1,(26, :b)] + ze[1,(18, :b)] + ze[1,(34, :a)] + ze[1,(20, :b)] + ze[1,(2, :a)] + ze[1,(10, :a)] + ze[1,(27, :a)] + ze[1,(26, :a)] + ze[1,(18, :a)] + ze[1,(19, :b)] + ze[1,(16, :a)] + ze[1,(31, :b)] + ze[1,(9, :b)] + ze[1,(31, :a)] + ze[1,(29, :a)] + ze[1,(24, :b)] + ze[1,(8, :b)] + ze[1,(17, :b)] + ze[1,(1, :b)] + ze[1,(24, :a)] + ze[1,(14, :b)] + ze[1,(3, :b)] + ze[1,(17, :a)] + ze[1,(1, :a)] + ze[1,(22, :a)] + ze[1,(33, :b)] + ze[1,(3, :a)] + ze[1,(15, :b)] + ze[1,(33, :a)] + ze[1,(5, :b)] + ze[1,(30, :b)] + ze[1,(30, :a)] + ze[1,(4, :b)] + ze[1,(13, :b)] + ze[1,(4, :a)] + ze[1,(13, :a)] + ze[1,(12, :b)] = 1
 x[2] + ze[2,(28, :b)] + ze[2,(26, :a)] + ze[2,(17, :b)] + ze[2,(1, :b)] + ze[2,(32, :b)] + ze[2,(5, :a)] + ze[2,(16, :a)] + ze[2,(31, :b)] + ze[2,(30, :a)] + ze[2,(28, :a)] + ze[2,(24, :a)] + ze[2,(17, :a)] + ze[2,(14, :b)] + ze[2,(7, :b)] + ze[2,(33, :b)] + ze[2,(31, :a)] + ze[2,(34, :b)] + ze[2,(4, :b)] + ze[2,(29, :a)] + ze[2,(7, :a)] + ze[2,(25, :a)] + ze[2,(27, :b)] + ze[2,(18, :b)] + ze[2,(5, :b)] + ze[2,(34, :a)] + ze[2,(20, :b)] + ze[2,(27, :a)] + ze[2,(18, :a)] + ze[2,(24, :b)] = 1
 x[3] + ze[3,(8, :b)] + ze[3,(23, :b)] + ze[3,(19, :b)] + ze[3,(22, :b)] + ze[3,(9, :b)] + ze[3,(8, :a)] + ze[3,(3, :b)] + ze[3,(23, :a)] + ze[3,(22, :a)] + ze[3,(32, :a)] + ze[3,(29, :b)] + ze[3,(11, :a)] + ze[3,(9, :a)] + ze[3,(13, :b)] + ze[3,(21, :b)] + ze[3,(33, :a)] + ze[3,(26, :b)] + ze[3,(10, :a)] = 1
 x[4] + ze[4,(26, :a)] + ze[4,(8, :b)] + ze[4,(17, :b)] + ze[4,(23, :b)] + ze[4,(19, :b)] + ze[4,(22, :b)] + ze[4,(11, :b)] + ze[4,(9, :b)] + ze[4,(24, :a)] + ze[4,(28, :a)] + ze[4,(8, :a)] + ze[4,(3, :b)] + ze[4,(23, :a)] + ze[4,(1, :a)] + ze[4,(22, :a)] + ze[4,(32, :a)] + ze[4,(29, :b)] + ze[4,(33, :b)] + ze[4,(11, :a)] + ze[4,(9, :a)] + ze[4,(14, :a)] + ze[4,(3, :a)] + ze[4,(13, :b)] + ze[4,(4, :b)] + ze[4,(21, :b)] + ze[4,(2, :b)] + ze[4,(33, :a)] + ze[4,(25, :a)] + ze[4,(10, :b)] + ze[4,(27, :b)] + ze[4,(26, :b)] + ze[4,(34, :a)] + ze[4,(20, :b)] + ze[4,(13, :a)] + ze[4,(4, :a)] + ze[4,(2, :a)] + ze[4,(10, :a)] + ze[4,(27, :a)] + ze[4,(30, :b)] = 1
 x[5] + ze[5,(8, :b)] + ze[5,(23, :b)] + ze[5,(12, :a)] + ze[5,(3, :b)] + ze[5,(1, :a)] + ze[5,(11, :a)] + ze[5,(3, :a)] + ze[5,(33, :a)] + ze[5,(26, :b)] + ze[5,(4, :a)] + ze[5,(2, :a)] + ze[5,(10, :a)] + ze[5,(12, :b)] = 1
 x[6] + ze[6,(8, :b)] + ze[6,(23, :b)] + ze[6,(1, :b)] + ze[6,(12, :a)] + ze[6,(30, :a)] + ze[6,(14, :b)] + ze[6,(3, :b)] + ze[6,(11, :a)] + ze[6,(31, :a)] + ze[6,(14, :a)] + ze[6,(13, :b)] + ze[6,(29, :a)] + ze[6,(33, :a)] + ze[6,(10, :b)] + ze[6,(18, :b)] + ze[6,(26, :b)] + ze[6,(5, :b)] + ze[6,(10, :a)] + ze[6,(12, :b)] + ze[6,(24, :b)] = 1
 x[7] + ze[7,(28, :b)] + ze[7,(26, :a)] + ze[7,(17, :b)] + ze[7,(1, :b)] + ze[7,(32, :b)] + ze[7,(16, :a)] + ze[7,(30, :a)] + ze[7,(28, :a)] + ze[7,(24, :a)] + ze[7,(17, :a)] + ze[7,(14, :b)] + ze[7,(33, :b)] + ze[7,(4, :b)] + ze[7,(29, :a)] + ze[7,(27, :b)] + ze[7,(25, :a)] + ze[7,(20, :b)] + ze[7,(27, :a)] + ze[7,(24, :b)] = 1
 x[8] + ze[8,(28, :b)] + ze[8,(30, :b)] + ze[8,(17, :b)] + ze[8,(26, :a)] + ze[8,(1, :b)] + ze[8,(22, :b)] + ze[8,(5, :a)] + ze[8,(16, :a)] + ze[8,(20, :a)] + ze[8,(11, :b)] + ze[8,(31, :b)] + ze[8,(30, :a)] + ze[8,(24, :a)] + ze[8,(14, :b)] + ze[8,(17, :a)] + ze[8,(1, :a)] + ze[8,(19, :a)] + ze[8,(32, :a)] + ze[8,(29, :b)] + ze[8,(6, :a)] + ze[8,(7, :b)] + ze[8,(25, :b)] + ze[8,(31, :a)] + ze[8,(3, :a)] + ze[8,(34, :b)] + ze[8,(15, :b)] + ze[8,(21, :b)] + ze[8,(29, :a)] + ze[8,(7, :a)] + ze[8,(25, :a)] + ze[8,(2, :b)] + ze[8,(5, :b)] + ze[8,(16, :b)] + ze[8,(4, :a)] + ze[8,(15, :a)] + ze[8,(21, :a)] + ze[8,(2, :a)] + ze[8,(24, :b)] = 1
 x[9] + ze[9,(1, :b)] + ze[9,(19, :b)] + ze[9,(22, :b)] + ze[9,(16, :a)] + ze[9,(20, :a)] + ze[9,(9, :b)] + ze[9,(30, :a)] + ze[9,(28, :a)] + ze[9,(14, :b)] + ze[9,(17, :a)] + ze[9,(23, :a)] + ze[9,(19, :a)] + ze[9,(22, :a)] + ze[9,(32, :a)] + ze[9,(29, :b)] + ze[9,(33, :b)] + ze[9,(31, :a)] + ze[9,(4, :b)] + ze[9,(21, :b)] + ze[9,(29, :a)] + ze[9,(27, :b)] + ze[9,(18, :b)] + ze[9,(5, :b)] + ze[9,(16, :b)] + ze[9,(20, :b)] + ze[9,(34, :a)] + ze[9,(21, :a)] + ze[9,(27, :a)] + ze[9,(18, :a)] + ze[9,(24, :b)] = 1
 x[10] + ze[10,(23, :b)] + ze[10,(12, :a)] + ze[10,(28, :a)] + ze[10,(23, :a)] + ze[10,(11, :a)] + ze[10,(27, :b)] + ze[10,(18, :b)] + ze[10,(26, :b)] + ze[10,(16, :b)] + ze[10,(20, :b)] + ze[10,(34, :a)] + ze[10,(2, :a)] + ze[10,(10, :a)] + ze[10,(27, :a)] + ze[10,(19, :b)] + ze[10,(20, :a)] + ze[10,(9, :b)] + ze[10,(19, :a)] + ze[10,(29, :b)] + ze[10,(9, :a)] + ze[10,(31, :a)] + ze[10,(21, :b)] + ze[10,(29, :a)] + ze[10,(21, :a)] + ze[10,(24, :b)] + ze[10,(8, :b)] + ze[10,(1, :b)] + ze[10,(14, :b)] + ze[10,(8, :a)] + ze[10,(3, :b)] + ze[10,(1, :a)] + ze[10,(33, :b)] + ze[10,(3, :a)] + ze[10,(33, :a)] + ze[10,(5, :b)] + ze[10,(32, :b)] + ze[10,(6, :b)] + ze[10,(30, :a)] + ze[10,(32, :a)] + ze[10,(13, :b)] + ze[10,(4, :b)] + ze[10,(4, :a)] + ze[10,(12, :b)] = 1
 x[11] + ze[11,(28, :b)] + ze[11,(24, :b)] + ze[11,(17, :b)] + ze[11,(8, :b)] + ze[11,(1, :b)] + ze[11,(23, :b)] + ze[11,(18, :a)] + ze[11,(26, :a)] + ze[11,(5, :a)] + ze[11,(16, :a)] + ze[11,(11, :b)] + ze[11,(31, :b)] + ze[11,(12, :a)] + ze[11,(24, :a)] + ze[11,(30, :a)] + ze[11,(14, :b)] + ze[11,(17, :a)] + ze[11,(3, :b)] + ze[11,(1, :a)] + ze[11,(7, :b)] + ze[11,(6, :a)] + ze[11,(25, :b)] + ze[11,(11, :a)] + ze[11,(31, :a)] + ze[11,(3, :a)] + ze[11,(34, :b)] + ze[11,(13, :b)] + ze[11,(15, :b)] + ze[11,(29, :a)] + ze[11,(33, :a)] + ze[11,(25, :a)] + ze[11,(7, :a)] + ze[11,(2, :b)] + ze[11,(18, :b)] + ze[11,(26, :b)] + ze[11,(5, :b)] + ze[11,(4, :a)] + ze[11,(15, :a)] + ze[11,(2, :a)] + ze[11,(10, :a)] + ze[11,(12, :b)] + ze[11,(30, :b)] = 1
 x[12] + ze[12,(28, :b)] + ze[12,(23, :b)] + ze[12,(12, :a)] + ze[12,(28, :a)] + ze[12,(23, :a)] + ze[12,(7, :b)] + ze[12,(11, :a)] + ze[12,(34, :b)] + ze[12,(7, :a)] + ze[12,(27, :b)] + ze[12,(26, :b)] + ze[12,(18, :b)] + ze[12,(16, :b)] + ze[12,(20, :b)] + ze[12,(34, :a)] + ze[12,(2, :a)] + ze[12,(27, :a)] + ze[12,(10, :a)] + ze[12,(19, :b)] + ze[12,(20, :a)] + ze[12,(31, :b)] + ze[12,(9, :b)] + ze[12,(19, :a)] + ze[12,(31, :a)] + ze[12,(29, :a)] + ze[12,(21, :a)] + ze[12,(24, :b)] + ze[12,(8, :b)] + ze[12,(1, :b)] + ze[12,(14, :b)] + ze[12,(3, :b)] + ze[12,(1, :a)] + ze[12,(22, :a)] + ze[12,(33, :b)] + ze[12,(3, :a)] + ze[12,(15, :b)] + ze[12,(33, :a)] + ze[12,(5, :b)] + ze[12,(15, :a)] + ze[12,(5, :a)] + ze[12,(30, :a)] + ze[12,(6, :a)] + ze[12,(4, :b)] + ze[12,(13, :b)] + ze[12,(4, :a)] + ze[12,(12, :b)] = 1
 x[13] + ze[13,(28, :b)] + ze[13,(23, :b)] + ze[13,(11, :b)] + ze[13,(28, :a)] + ze[13,(23, :a)] + ze[13,(7, :b)] + ze[13,(25, :b)] + ze[13,(34, :b)] + ze[13,(2, :b)] + ze[13,(7, :a)] + ze[13,(25, :a)] + ze[13,(10, :b)] + ze[13,(18, :b)] + ze[13,(26, :b)] + ze[13,(27, :b)] + ze[13,(16, :b)] + ze[13,(20, :b)] + ze[13,(34, :a)] + ze[13,(2, :a)] + ze[13,(27, :a)] + ze[13,(18, :a)] + ze[13,(26, :a)] + ze[13,(19, :b)] + ze[13,(16, :a)] + ze[13,(20, :a)] + ze[13,(31, :b)] + ze[13,(9, :b)] + ze[13,(19, :a)] + ze[13,(29, :b)] + [[...2 terms omitted...]] + ze[13,(29, :a)] + ze[13,(21, :a)] + ze[13,(24, :b)] + ze[13,(17, :b)] + ze[13,(1, :b)] + ze[13,(22, :b)] + ze[13,(24, :a)] + ze[13,(14, :b)] + ze[13,(3, :b)] + ze[13,(17, :a)] + ze[13,(1, :a)] + ze[13,(22, :a)] + ze[13,(33, :b)] + ze[13,(14, :a)] + ze[13,(3, :a)] + ze[13,(15, :b)] + ze[13,(33, :a)] + ze[13,(5, :b)] + ze[13,(15, :a)] + ze[13,(30, :b)] + ze[13,(32, :b)] + ze[13,(5, :a)] + ze[13,(6, :b)] + ze[13,(30, :a)] + ze[13,(32, :a)] + ze[13,(6, :a)] + ze[13,(4, :b)] + ze[13,(13, :b)] + ze[13,(4, :a)] + ze[13,(12, :b)] = 1
 x[14] + ze[14,(18, :a)] + ze[14,(8, :b)] + ze[14,(23, :b)] + ze[14,(19, :b)] + ze[14,(22, :b)] + ze[14,(32, :b)] + ze[14,(1, :b)] + ze[14,(6, :b)] + ze[14,(16, :a)] + ze[14,(20, :a)] + ze[14,(9, :b)] + ze[14,(12, :a)] + ze[14,(30, :a)] + ze[14,(14, :b)] + ze[14,(8, :a)] + ze[14,(17, :a)] + ze[14,(3, :b)] + ze[14,(23, :a)] + ze[14,(19, :a)] + ze[14,(22, :a)] + ze[14,(32, :a)] + ze[14,(29, :b)] + ze[14,(11, :a)] + ze[14,(9, :a)] + ze[14,(31, :a)] + ze[14,(13, :b)] + ze[14,(21, :b)] + ze[14,(29, :a)] + ze[14,(33, :a)] + ze[14,(18, :b)] + ze[14,(26, :b)] + ze[14,(5, :b)] + ze[14,(16, :b)] + ze[14,(21, :a)] + ze[14,(10, :a)] + ze[14,(12, :b)] + ze[14,(24, :b)] = 1
 x[15] + ze[15,(28, :b)] + ze[15,(1, :b)] + ze[15,(23, :b)] + ze[15,(16, :a)] + ze[15,(31, :b)] + ze[15,(30, :a)] + ze[15,(14, :b)] + ze[15,(3, :b)] + ze[15,(7, :b)] + ze[15,(31, :a)] + ze[15,(34, :b)] + ze[15,(13, :b)] + ze[15,(15, :b)] + ze[15,(29, :a)] + ze[15,(33, :a)] + ze[15,(26, :b)] + ze[15,(5, :b)] + ze[15,(12, :b)] + ze[15,(26, :a)] = 1
 x[16] + ze[16,(30, :b)] + ze[16,(8, :b)] + ze[16,(17, :b)] + ze[16,(28, :b)] + ze[16,(1, :b)] + ze[16,(23, :b)] + ze[16,(18, :a)] + ze[16,(26, :a)] + ze[16,(16, :a)] + ze[16,(11, :b)] + ze[16,(31, :b)] + ze[16,(12, :a)] + ze[16,(30, :a)] + ze[16,(24, :a)] + ze[16,(14, :b)] + ze[16,(17, :a)] + ze[16,(3, :b)] + ze[16,(1, :a)] + ze[16,(7, :b)] + ze[16,(11, :a)] + ze[16,(31, :a)] + ze[16,(3, :a)] + ze[16,(34, :b)] + ze[16,(13, :b)] + ze[16,(15, :b)] + ze[16,(29, :a)] + ze[16,(33, :a)] + ze[16,(25, :a)] + ze[16,(2, :b)] + ze[16,(18, :b)] + ze[16,(26, :b)] + ze[16,(5, :b)] + ze[16,(4, :a)] + ze[16,(2, :a)] + ze[16,(10, :a)] + ze[16,(12, :b)] + ze[16,(24, :b)] = 1
 x[17] + ze[17,(28, :b)] + ze[17,(23, :b)] + ze[17,(11, :b)] + ze[17,(12, :a)] + ze[17,(28, :a)] + ze[17,(23, :a)] + ze[17,(7, :b)] + ze[17,(25, :b)] + ze[17,(11, :a)] + ze[17,(34, :b)] + ze[17,(2, :b)] + ze[17,(10, :b)] + ze[17,(25, :a)] + ze[17,(27, :b)] + ze[17,(26, :b)] + ze[17,(18, :b)] + ze[17,(34, :a)] + ze[17,(20, :b)] + ze[17,(2, :a)] + ze[17,(10, :a)] + ze[17,(27, :a)] + ze[17,(26, :a)] + ze[17,(19, :b)] + ze[17,(9, :b)] + ze[17,(31, :b)] + ze[17,(29, :b)] + ze[17,(9, :a)] + ze[17,(31, :a)] + ze[17,(21, :b)] + ze[17,(29, :a)] + ze[17,(24, :b)] + ze[17,(8, :b)] + ze[17,(17, :b)] + ze[17,(1, :b)] + ze[17,(22, :b)] + ze[17,(24, :a)] + ze[17,(14, :b)] + ze[17,(8, :a)] + ze[17,(3, :b)] + ze[17,(1, :a)] + ze[17,(22, :a)] + ze[17,(33, :b)] + ze[17,(14, :a)] + ze[17,(3, :a)] + ze[17,(15, :b)] + ze[17,(33, :a)] + ze[17,(5, :b)] + ze[17,(30, :b)] + ze[17,(30, :a)] + ze[17,(32, :a)] + ze[17,(13, :b)] + ze[17,(4, :b)] + ze[17,(13, :a)] + ze[17,(4, :a)] + ze[17,(12, :b)] = 1
 x[18] + ze[18,(28, :b)] + ze[18,(23, :b)] + ze[18,(12, :a)] + ze[18,(28, :a)] + ze[18,(23, :a)] + ze[18,(7, :b)] + ze[18,(11, :a)] + ze[18,(34, :b)] + ze[18,(7, :a)] + ze[18,(27, :b)] + ze[18,(26, :b)] + ze[18,(18, :b)] + ze[18,(16, :b)] + ze[18,(20, :b)] + ze[18,(34, :a)] + ze[18,(2, :a)] + ze[18,(27, :a)] + ze[18,(10, :a)] + ze[18,(19, :b)] + ze[18,(20, :a)] + ze[18,(31, :b)] + ze[18,(9, :b)] + ze[18,(19, :a)] + ze[18,(31, :a)] + ze[18,(29, :a)] + ze[18,(21, :a)] + ze[18,(24, :b)] + ze[18,(8, :b)] + ze[18,(1, :b)] + ze[18,(14, :b)] + ze[18,(3, :b)] + ze[18,(1, :a)] + ze[18,(22, :a)] + ze[18,(33, :b)] + ze[18,(3, :a)] + ze[18,(15, :b)] + ze[18,(33, :a)] + ze[18,(5, :b)] + ze[18,(15, :a)] + ze[18,(5, :a)] + ze[18,(30, :a)] + ze[18,(6, :a)] + ze[18,(4, :b)] + ze[18,(13, :b)] + ze[18,(4, :a)] + ze[18,(12, :b)] = 1
 x[19] + ze[19,(28, :b)] + ze[19,(1, :b)] + ze[19,(19, :b)] + ze[19,(32, :b)] + ze[19,(22, :b)] + ze[19,(5, :a)] + ze[19,(6, :b)] + ze[19,(31, :b)] + ze[19,(9, :b)] + ze[19,(30, :a)] + ze[19,(14, :b)] + ze[19,(23, :a)] + ze[19,(32, :a)] + ze[19,(22, :a)] + ze[19,(6, :a)] + ze[19,(29, :b)] + ze[19,(7, :b)] + ze[19,(31, :a)] + ze[19,(34, :b)] + ze[19,(15, :b)] + ze[19,(21, :b)] + ze[19,(29, :a)] + ze[19,(7, :a)] + ze[19,(18, :b)] + ze[19,(5, :b)] + ze[19,(15, :a)] + ze[19,(24, :b)] = 1
 x[20] + ze[20,(28, :b)] + ze[20,(23, :b)] + ze[20,(11, :b)] + ze[20,(28, :a)] + ze[20,(7, :b)] + ze[20,(25, :b)] + ze[20,(34, :b)] + ze[20,(2, :b)] + ze[20,(7, :a)] + ze[20,(25, :a)] + ze[20,(27, :b)] + ze[20,(18, :b)] + ze[20,(26, :b)] + ze[20,(34, :a)] + ze[20,(20, :b)] + ze[20,(2, :a)] + ze[20,(27, :a)] + ze[20,(18, :a)] + ze[20,(26, :a)] + ze[20,(16, :a)] + ze[20,(31, :b)] + ze[20,(31, :a)] + ze[20,(29, :a)] + ze[20,(24, :b)] + ze[20,(17, :b)] + ze[20,(1, :b)] + ze[20,(24, :a)] + ze[20,(14, :b)] + ze[20,(3, :b)] + ze[20,(17, :a)] + ze[20,(1, :a)] + ze[20,(33, :b)] + ze[20,(3, :a)] + ze[20,(15, :b)] + ze[20,(33, :a)] + ze[20,(5, :b)] + ze[20,(15, :a)] + ze[20,(30, :b)] + ze[20,(32, :b)] + ze[20,(5, :a)] + ze[20,(6, :b)] + ze[20,(30, :a)] + ze[20,(6, :a)] + ze[20,(4, :b)] + ze[20,(13, :b)] + ze[20,(4, :a)] + ze[20,(12, :b)] = 1
Gurobi Optimizer version 12.0.1 build v12.0.1rc0 (linux64 - "Debian GNU/Linux 12 (bookworm)")

CPU model: Intel(R) Xeon(R) Gold 5222 CPU @ 3.80GHz, instruction set [SSE2|AVX|AVX2|AVX512]
Thread count: 8 physical cores, 16 logical processors, using up to 1 threads

Non-default parameters:
TimeLimit  7199.974095
Threads  1

Optimize a model with 1714 rows, 891 columns and 4980 nonzeros
Model fingerprint: 0xdd2e3f65
Variable types: 88 continuous, 803 integer (803 binary)
Coefficient statistics:
  Matrix range     [1e-06, 2e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [3e-01, 1e+00]
  RHS range        [3e-01, 2e+00]
Found heuristic solution: objective 11.0000000
Presolve removed 335 rows and 77 columns
Presolve time: 0.03s
Presolved: 1379 rows, 814 columns, 7404 nonzeros
Variable types: 54 continuous, 760 integer (760 binary)

Root relaxation: objective 9.887406e-01, 690 iterations, 0.01 seconds (0.02 work units)

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0    0.98874    0  143   11.00000    0.98874  91.0%     -    0s
H    0     0                       6.0000000    0.98874  83.5%     -    0s
H    0     0                       4.0000000    0.98874  75.3%     -    0s
     0     0    1.16317    0  166    4.00000    1.16317  70.9%     -    0s
     0     0    1.17199    0  167    4.00000    1.17199  70.7%     -    0s
     0     0    1.33188    0  169    4.00000    1.33188  66.7%     -    0s
H    0     0                       3.0000000    1.33570  55.5%     -    0s
     0     0    1.34668    0  163    3.00000    1.34668  55.1%     -    0s
     0     0    1.39226    0  185    3.00000    1.39226  53.6%     -    0s
     0     0    1.50000    0  151    3.00000    1.50000  50.0%     -    0s
     0     0    1.50000    0  131    3.00000    1.50000  50.0%     -    0s
     0     0    1.50000    0  153    3.00000    1.50000  50.0%     -    0s
     0     0    1.50000    0  170    3.00000    1.50000  50.0%     -    0s
     0     0    1.50000    0  146    3.00000    1.50000  50.0%     -    0s
     0     0    1.50000    0   75    3.00000    1.50000  50.0%     -    0s
     0     0    1.50000    0  132    3.00000    1.50000  50.0%     -    0s
     0     0    1.50000    0  104    3.00000    1.50000  50.0%     -    0s
     0     0    1.50000    0  147    3.00000    1.50000  50.0%     -    0s
     0     0    1.50000    0  108    3.00000    1.50000  50.0%     -    0s
     0     0    1.50000    0  103    3.00000    1.50000  50.0%     -    0s
     0     2    1.51715    0  103    3.00000    1.51715  49.4%     -    0s

Cutting planes:
  Learned: 1
  Cover: 44
  Implied bound: 31
  MIR: 50
  StrongCG: 10
  GUB cover: 18
  Inf proof: 2
  RLT: 21
  Relax-and-lift: 5
  BQP: 8
  PSD: 1

Explored 374 nodes (21562 simplex iterations) in 1.15 seconds (1.11 work units)
Thread count was 1 (of 16 available processors)

Solution count 4: 3 4 6 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%

User-callback calls 1837, time in user-callback 0.01 sec

 sepatime0 0 0
3.0Stat(MathOptInterface.OPTIMAL, 3.0, 3.0, 0.0, 0.0, 0.025905, 1.1473839282989502, 374, Main.CFLG.EFP, "", #undef)
