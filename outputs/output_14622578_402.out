Data path: /scratch/opt/lxu/CFLG/benchmarks/random_B
Instance: r_25_0.1_36.txt
Result path: /scratch/opt/lxu/CFLG/results/random_B
Solver: Gurobi
Time limit: 7200
Formulation: LEFPA
Cover: Large
julia --project=. src/main.jl /scratch/opt/lxu/CFLG/benchmarks/random_B r_25_0.1_36.txt /scratch/opt/lxu/CFLG/results/random_B Gurobi 7200 LEFPA Large
The latest version of Julia in the `release` channel is 1.11.5+0.x64.linux.gnu. You currently have `1.11.4+0.x64.linux.gnu` installed. Run:

  juliaup update

in your terminal shell to install Julia 1.11.5+0.x64.linux.gnu and update the `release` channel to that version.
/scratch/opt/lxu/CFLG/benchmarks/random_B Gurobi 7200.0 /scratch/opt/lxu/CFLG/results/random_B r_25_0.1_36.txt LEFPA Large
/scratch/opt/lxu/CFLG/benchmarks/random_B/r_25_0.1_36.txt

 read graph
data loaded

problem_graph/original graph: node: 25/25 edge: 36/36 dlt: 1.4522257607055817 break_avg_len: 0.7261128803527909 break_max_len: 0.9874679371971357Vbar/V, Ebar/E(22, 25, 33, 36)
(Dict{Int64, Bool}(5 => 1, 15 => 1, 16 => 1), Dict(5 => 0.42976065112225903, 15 => 0.4209163377036343, 16 => 0.5628578524293629))Set parameter TokenServer to value "solice01.zib.de"
Set parameter Threads to value 1
Set parameter OutputFlag to value 1
Gurobi Optimizer version 12.0.1 build v12.0.1rc0 (linux64 - "Debian GNU/Linux 12 (bookworm)")

CPU model: Intel(R) Xeon(R) Gold 5122 CPU @ 3.60GHz, instruction set [SSE2|AVX|AVX2|AVX512]
Thread count: 8 physical cores, 16 logical processors, using up to 1 threads

Non-default parameters:
Threads  1

Optimize a model with 61 rows, 108 columns and 180 nonzeros
Model fingerprint: 0x72095f8a
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [1e+00, 1e+00]
  RHS range        [1e+00, 1e+00]
Presolve removed 61 rows and 108 columns
Presolve time: 0.00s
Presolve: All rows and columns removed
Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    3.0000000e+00   0.000000e+00   0.000000e+00      0s

Solved in 0 iterations and 0.00 seconds (0.00 work units)
Optimal objective  3.000000000e+00

User-callback calls 35, time in user-callback 0.01 sec
elapsed CPU time: 1.678976 seconds
Set parameter TokenServer to value "solice01.zib.de"
Set parameter Threads to value 1
Set parameter OutputFlag to value 1
Set parameter MIPGap to value 0.0001
Set parameter TimeLimit to value 7198.321024

 more cuts: false 1.4522257607055817 false
is_attach:trueformulation:LEFPA0 36 0

 model loaded

Min ye[1] + ye[2] + ye[3] + ye[4] + ye[5] + ye[6] + ye[7] + ye[8] + ye[9] + ye[10] + ye[11] + ye[12] + ye[13] + ye[14] + ye[15] + ye[16] + ye[17] + ye[18] + ye[19] + ye[20] + ye[21] + ye[22] + ye[23] + ye[24] + ye[25] + ye[26] + ye[27] + ye[28] + ye[29] + ye[30] + ye[31] + ye[32] + ye[33] + yv[1] + yv[2] + yv[3] + yv[4] + yv[5] + yv[6] + yv[7] + yv[8] + yv[9] + yv[10] + yv[11] + yv[12] + yv[13] + yv[14] + yv[15] + yv[16] + yv[17] + yv[18] + yv[19] + yv[20] + yv[21] + yv[22] + yv[23] + yv[24] + yv[25]
Subject to
 q[1,a] ≥ 0
 q[2,a] ≥ 0
 q[3,a] ≥ 0
 q[4,a] ≥ 0
 q[5,a] ≥ 0
 q[6,a] ≥ 0
 q[7,a] ≥ 0
 q[8,a] ≥ 0
 q[9,a] ≥ 0
 q[10,a] ≥ 0
 q[11,a] ≥ 0
 q[12,a] ≥ 0
 q[13,a] ≥ 0
 q[14,a] ≥ 0
 q[15,a] ≥ 0
 q[16,a] ≥ 0
 q[17,a] ≥ 0
 q[18,a] ≥ 0
 q[19,a] ≥ 0
 q[20,a] ≥ 0
 q[21,a] ≥ 0
 q[22,a] ≥ 0
 q[23,a] ≥ 0
 q[24,a] ≥ 0
 q[25,a] ≥ 0
 q[26,a] ≥ 0
 q[27,a] ≥ 0
 q[28,a] ≥ 0
 q[29,a] ≥ 0
 q[30,a] ≥ 0
 q[31,a] ≥ 0
 q[32,a] ≥ 0
 q[33,a] ≥ 0
 q[34,a] ≥ 0
 q[35,a] ≥ 0
 q[36,a] ≥ 0
 q[1,b] ≥ 0
 q[2,b] ≥ 0
 q[3,b] ≥ 0
 q[4,b] ≥ 0
 q[5,b] ≥ 0
 q[6,b] ≥ 0
 q[7,b] ≥ 0
 q[8,b] ≥ 0
 q[9,b] ≥ 0
 q[10,b] ≥ 0
 q[11,b] ≥ 0
 q[12,b] ≥ 0
 q[13,b] ≥ 0
 q[14,b] ≥ 0
[[...1979 constraints skipped...]]
 q[18,a] - q[18,b] = 0
 q[19,a] - q[19,b] = 0
 q[20,a] - q[20,b] = 0
 q[21,a] - q[21,b] = 0
 q[22,a] - q[22,b] = 0
 q[23,a] - q[23,b] = 0
 q[24,a] - q[24,b] = 0
 q[25,a] - q[25,b] = 0
 q[26,a] - q[26,b] = 0
 q[27,a] - q[27,b] = 0
 q[28,a] - q[28,b] = 0
 q[29,a] - q[29,b] = 0
 q[30,a] - q[30,b] = 0
 q[31,a] - q[31,b] = 0
 q[32,a] - q[32,b] = 0
 q[33,a] - q[33,b] = 0
 q[34,a] - q[34,b] = 0
 q[35,a] - q[35,b] = 0
 q[36,a] - q[36,b] = 0
 x[1] + ze[1,(20, :a)] + ze[1,(32, :a)] + ze[1,(33, :b)] + ze[1,(11, :b)] + ze[1,(10, :b)] + ze[1,(11, :a)] + ze[1,(10, :a)] + ze[1,(36, :a)] + ze[1,(9, :a)] = 1
 x[2] + ze[2,(8, :b)] + ze[2,(17, :b)] + ze[2,(1, :b)] + ze[2,(6, :b)] + ze[2,(16, :a)] + ze[2,(20, :a)] + ze[2,(36, :b)] + ze[2,(9, :b)] + ze[2,(8, :a)] + ze[2,(17, :a)] + ze[2,(1, :a)] + ze[2,(6, :a)] + ze[2,(11, :a)] + ze[2,(36, :a)] + ze[2,(9, :a)] + ze[2,(34, :b)] + ze[2,(2, :b)] + ze[2,(7, :a)] + ze[2,(10, :b)] + ze[2,(5, :b)] + ze[2,(34, :a)] + ze[2,(20, :b)] + ze[2,(10, :a)] + ze[2,(18, :a)] = 1
 x[3] + ze[3,(28, :b)] + ze[3,(26, :a)] + ze[3,(23, :b)] + ze[3,(22, :b)] + ze[3,(32, :b)] + ze[3,(6, :b)] + ze[3,(16, :a)] + ze[3,(11, :b)] + ze[3,(31, :b)] + ze[3,(30, :a)] + ze[3,(28, :a)] + ze[3,(8, :a)] + ze[3,(17, :a)] + ze[3,(23, :a)] + ze[3,(1, :a)] + ze[3,(22, :a)] + ze[3,(32, :a)] + ze[3,(7, :b)] + ze[3,(33, :b)] + ze[3,(31, :a)] + ze[3,(14, :a)] + ze[3,(15, :b)] + ze[3,(2, :b)] + ze[3,(7, :a)] + ze[3,(18, :b)] + ze[3,(5, :b)] + ze[3,(4, :a)] + ze[3,(15, :a)] + ze[3,(21, :a)] + ze[3,(2, :a)] + ze[3,(18, :a)] + ze[3,(30, :b)] = 1
 x[4] + ze[4,(28, :b)] + ze[4,(30, :b)] + ze[4,(23, :b)] + ze[4,(22, :b)] + ze[4,(32, :b)] + ze[4,(31, :b)] + ze[4,(30, :a)] + ze[4,(23, :a)] + ze[4,(19, :a)] + ze[4,(22, :a)] + ze[4,(29, :b)] + ze[4,(7, :b)] + ze[4,(31, :a)] + ze[4,(14, :a)] + ze[4,(13, :b)] + ze[4,(15, :b)] + ze[4,(21, :b)] + ze[4,(29, :a)] + ze[4,(18, :b)] + ze[4,(15, :a)] + ze[4,(21, :a)] + ze[4,(2, :a)] + ze[4,(24, :b)] = 1
 x[5] + ze[5,(35, :a)] + ze[5,(11, :b)] + ze[5,(24, :a)] + ze[5,(28, :a)] + ze[5,(14, :b)] + ze[5,(32, :a)] + ze[5,(33, :b)] + ze[5,(25, :b)] + ze[5,(14, :a)] + ze[5,(3, :a)] + ze[5,(33, :a)] + ze[5,(25, :a)] + ze[5,(27, :b)] + ze[5,(26, :b)] + ze[5,(35, :b)] + ze[5,(4, :a)] + ze[5,(15, :a)] + ze[5,(27, :a)] + ze[5,(12, :b)] + ze[5,(26, :a)] = 1
 x[6] + ze[6,(8, :b)] + ze[6,(17, :b)] + ze[6,(23, :b)] + ze[6,(1, :b)] + ze[6,(19, :b)] + ze[6,(32, :b)] + ze[6,(6, :b)] + ze[6,(16, :a)] + ze[6,(20, :a)] + ze[6,(9, :b)] + ze[6,(30, :a)] + ze[6,(8, :a)] + ze[6,(17, :a)] + ze[6,(1, :a)] + ze[6,(19, :a)] + ze[6,(22, :a)] + ze[6,(7, :b)] + ze[6,(6, :a)] + ze[6,(36, :a)] + ze[6,(9, :a)] + ze[6,(31, :a)] + ze[6,(15, :b)] + ze[6,(21, :b)] + ze[6,(29, :a)] + ze[6,(7, :a)] + ze[6,(2, :b)] + ze[6,(10, :b)] + ze[6,(18, :b)] + ze[6,(5, :b)] + ze[6,(16, :b)] + ze[6,(20, :b)] + ze[6,(2, :a)] + ze[6,(18, :a)] + ze[6,(30, :b)] = 1
 x[7] + ze[7,(28, :b)] + ze[7,(35, :a)] + ze[7,(31, :b)] + ze[7,(30, :a)] + ze[7,(28, :a)] + ze[7,(14, :b)] + ze[7,(3, :b)] + ze[7,(22, :a)] + ze[7,(31, :a)] + ze[7,(4, :b)] + ze[7,(33, :a)] + ze[7,(25, :a)] + ze[7,(27, :b)] + ze[7,(26, :b)] + ze[7,(35, :b)] + ze[7,(4, :a)] + ze[7,(2, :a)] + ze[7,(27, :a)] + ze[7,(26, :a)] = 1
 x[8] + ze[8,(8, :b)] + ze[8,(1, :b)] + ze[8,(23, :b)] + ze[8,(32, :b)] + ze[8,(16, :a)] + ze[8,(20, :a)] + ze[8,(9, :b)] + ze[8,(30, :a)] + ze[8,(8, :a)] + ze[8,(17, :a)] + ze[8,(1, :a)] + ze[8,(22, :a)] + ze[8,(7, :b)] + ze[8,(36, :a)] + ze[8,(9, :a)] + ze[8,(31, :a)] + ze[8,(15, :b)] + ze[8,(2, :b)] + ze[8,(10, :b)] + ze[8,(18, :b)] + ze[8,(2, :a)] + ze[8,(18, :a)] + ze[8,(30, :b)] = 1
 x[9] + ze[9,(24, :b)] + ze[9,(23, :b)] + ze[9,(19, :b)] + ze[9,(22, :b)] + ze[9,(32, :b)] + ze[9,(16, :a)] + ze[9,(8, :a)] + ze[9,(17, :a)] + ze[9,(23, :a)] + ze[9,(19, :a)] + ze[9,(29, :b)] + ze[9,(7, :b)] + ze[9,(13, :b)] + ze[9,(15, :b)] + ze[9,(21, :b)] + ze[9,(29, :a)] + ze[9,(18, :b)] + ze[9,(16, :b)] + ze[9,(21, :a)] + ze[9,(18, :a)] + ze[9,(30, :b)] = 1
 x[10] + ze[10,(23, :b)] + ze[10,(32, :b)] + ze[10,(35, :a)] + ze[10,(11, :b)] + ze[10,(30, :a)] + ze[10,(14, :b)] + ze[10,(32, :a)] + ze[10,(22, :a)] + ze[10,(33, :b)] + ze[10,(7, :b)] + ze[10,(11, :a)] + ze[10,(31, :a)] + ze[10,(34, :b)] + ze[10,(15, :b)] + ze[10,(33, :a)] + ze[10,(25, :a)] + ze[10,(27, :b)] + ze[10,(18, :b)] + ze[10,(26, :b)] + ze[10,(34, :a)] + ze[10,(2, :a)] + ze[10,(27, :a)] + ze[10,(10, :a)] + ze[10,(30, :b)] = 1
 x[11] + ze[11,(17, :b)] + ze[11,(5, :a)] + ze[11,(6, :b)] + ze[11,(12, :a)] + ze[11,(24, :a)] + ze[11,(29, :b)] + ze[11,(6, :a)] + ze[11,(25, :b)] + ze[11,(3, :a)] + ze[11,(13, :b)] + ze[11,(7, :a)] + ze[11,(5, :b)] + ze[11,(20, :b)] + ze[11,(13, :a)] + ze[11,(12, :b)] + ze[11,(24, :b)] = 1
 x[12] + ze[12,(8, :b)] + ze[12,(17, :b)] + ze[12,(23, :b)] + ze[12,(19, :b)] + ze[12,(32, :b)] + ze[12,(1, :b)] + ze[12,(5, :a)] + ze[12,(16, :a)] + ze[12,(20, :a)] + ze[12,(36, :b)] + ze[12,(9, :b)] + ze[12,(12, :a)] + ze[12,(8, :a)] + ze[12,(17, :a)] + ze[12,(7, :b)] + ze[12,(36, :a)] + ze[12,(9, :a)] + ze[12,(15, :b)] + ze[12,(7, :a)] + ze[12,(10, :b)] + ze[12,(18, :b)] + ze[12,(5, :b)] + ze[12,(16, :b)] + ze[12,(20, :b)] + ze[12,(13, :a)] + ze[12,(18, :a)] + ze[12,(30, :b)] = 1
 x[13] + ze[13,(17, :b)] + ze[13,(23, :b)] + ze[13,(19, :b)] + ze[13,(32, :b)] + ze[13,(5, :a)] + ze[13,(6, :b)] + ze[13,(16, :a)] + ze[13,(20, :a)] + ze[13,(12, :a)] + ze[13,(30, :a)] + ze[13,(8, :a)] + ze[13,(17, :a)] + ze[13,(22, :a)] + ze[13,(7, :b)] + ze[13,(6, :a)] + ze[13,(36, :a)] + ze[13,(9, :a)] + ze[13,(31, :a)] + ze[13,(15, :b)] + ze[13,(7, :a)] + ze[13,(10, :b)] + ze[13,(18, :b)] + ze[13,(5, :b)] + ze[13,(16, :b)] + ze[13,(20, :b)] + ze[13,(13, :a)] + ze[13,(2, :a)] + ze[13,(18, :a)] + ze[13,(30, :b)] = 1
 x[14] + ze[14,(28, :b)] + ze[14,(23, :b)] + ze[14,(32, :b)] + ze[14,(22, :b)] + ze[14,(35, :a)] + ze[14,(31, :b)] + ze[14,(30, :a)] + ze[14,(23, :a)] + ze[14,(22, :a)] + ze[14,(7, :b)] + ze[14,(31, :a)] + ze[14,(33, :a)] + ze[14,(25, :a)] + ze[14,(27, :b)] + ze[14,(18, :b)] + ze[14,(26, :b)] + ze[14,(35, :b)] + ze[14,(21, :a)] + ze[14,(2, :a)] + ze[14,(27, :a)] + ze[14,(30, :b)] = 1
 x[15] + ze[15,(26, :a)] + ze[15,(23, :b)] + ze[15,(22, :b)] + ze[15,(32, :b)] + ze[15,(30, :a)] + ze[15,(23, :a)] + ze[15,(22, :a)] + ze[15,(7, :b)] + ze[15,(14, :a)] + ze[15,(15, :b)] + ze[15,(18, :b)] + ze[15,(4, :a)] + ze[15,(15, :a)] + ze[15,(21, :a)] + ze[15,(2, :a)] + ze[15,(30, :b)] = 1
 x[16] + ze[16,(17, :b)] + ze[16,(23, :b)] + ze[16,(19, :b)] + ze[16,(32, :b)] + ze[16,(16, :a)] + ze[16,(20, :a)] + ze[16,(36, :b)] + ze[16,(17, :a)] + ze[16,(7, :b)] + ze[16,(6, :a)] + ze[16,(36, :a)] + ze[16,(15, :b)] + ze[16,(2, :b)] + ze[16,(10, :b)] + ze[16,(18, :b)] + ze[16,(16, :b)] + ze[16,(20, :b)] + ze[16,(18, :a)] + ze[16,(30, :b)] = 1
 x[17] + ze[17,(5, :a)] + ze[17,(12, :a)] + ze[17,(24, :a)] + ze[17,(3, :b)] + ze[17,(29, :b)] + ze[17,(25, :b)] + ze[17,(3, :a)] + ze[17,(13, :b)] + ze[17,(4, :b)] + ze[17,(33, :a)] + ze[17,(25, :a)] + ze[17,(13, :a)] + ze[17,(27, :a)] + ze[17,(12, :b)] + ze[17,(24, :b)] = 1
 x[18] + ze[18,(28, :b)] + ze[18,(23, :b)] + ze[18,(11, :b)] + ze[18,(23, :a)] + ze[18,(7, :b)] + ze[18,(2, :b)] + ze[18,(7, :a)] + ze[18,(27, :b)] + ze[18,(18, :b)] + ze[18,(26, :b)] + ze[18,(16, :b)] + ze[18,(20, :b)] + ze[18,(2, :a)] + ze[18,(18, :a)] + ze[18,(19, :b)] + ze[18,(16, :a)] + ze[18,(31, :b)] + ze[18,(9, :b)] + ze[18,(19, :a)] + ze[18,(31, :a)] + ze[18,(21, :b)] + ze[18,(29, :a)] + ze[18,(21, :a)] + ze[18,(8, :b)] + ze[18,(17, :b)] + ze[18,(1, :b)] + ze[18,(22, :b)] + ze[18,(14, :b)] + ze[18,(8, :a)] + ze[18,(17, :a)] + ze[18,(1, :a)] + ze[18,(22, :a)] + ze[18,(33, :b)] + ze[18,(14, :a)] + ze[18,(15, :b)] + ze[18,(5, :b)] + ze[18,(15, :a)] + ze[18,(30, :b)] + ze[18,(32, :b)] + ze[18,(6, :b)] + ze[18,(35, :a)] + ze[18,(30, :a)] + ze[18,(32, :a)] + ze[18,(6, :a)] = 1
 x[19] + ze[19,(24, :a)] + ze[19,(28, :a)] + ze[19,(3, :b)] + ze[19,(3, :a)] + ze[19,(4, :b)] + ze[19,(4, :a)] + ze[19,(25, :b)] + ze[19,(12, :b)] + ze[19,(26, :a)] = 1
 x[20] + ze[20,(8, :b)] + ze[20,(17, :b)] + ze[20,(1, :b)] + ze[20,(19, :b)] + ze[20,(23, :b)] + ze[20,(32, :b)] + ze[20,(6, :b)] + ze[20,(16, :a)] + ze[20,(9, :b)] + ze[20,(8, :a)] + ze[20,(17, :a)] + ze[20,(19, :a)] + ze[20,(7, :b)] + ze[20,(6, :a)] + ze[20,(15, :b)] + ze[20,(21, :b)] + ze[20,(29, :a)] + ze[20,(7, :a)] + ze[20,(18, :b)] + ze[20,(5, :b)] + ze[20,(16, :b)] + ze[20,(20, :b)] + ze[20,(18, :a)] + ze[20,(30, :b)] = 1
 x[21] + ze[21,(22, :b)] + ze[21,(5, :a)] + ze[21,(12, :a)] + ze[21,(24, :a)] + ze[21,(23, :a)] + ze[21,(19, :a)] + ze[21,(29, :b)] + ze[21,(25, :b)] + ze[21,(3, :a)] + ze[21,(13, :b)] + ze[21,(21, :b)] + ze[21,(29, :a)] + ze[21,(13, :a)] + ze[21,(21, :a)] + ze[21,(12, :b)] + ze[21,(24, :b)] = 1
 x[22] + ze[22,(26, :a)] + ze[22,(23, :b)] + ze[22,(32, :b)] + ze[22,(11, :b)] + ze[22,(14, :b)] + ze[22,(28, :a)] + ze[22,(32, :a)] + ze[22,(33, :b)] + ze[22,(7, :b)] + ze[22,(14, :a)] + ze[22,(15, :b)] + ze[22,(33, :a)] + ze[22,(25, :a)] + ze[22,(18, :b)] + ze[22,(26, :b)] + ze[22,(4, :a)] + ze[22,(15, :a)] + ze[22,(30, :b)] = 1
 x[23] + ze[23,(32, :a)] + ze[23,(33, :b)] + ze[23,(20, :a)] + ze[23,(36, :a)] + ze[23,(9, :a)] = 1
 x[24] + ze[24,(28, :a)] + ze[24,(4, :a)] + ze[24,(15, :a)] + ze[24,(33, :a)] + ze[24,(25, :a)] = 1
 x[25] + ze[25,(8, :b)] + ze[25,(17, :b)] + ze[25,(1, :b)] + ze[25,(6, :a)] + ze[25,(10, :b)] = 1
 ye[34] = 0
 ye[35] = 0
 ye[36] = 0
 q[34,a] = 0
 q[35,a] = 0
 q[36,a] = 0
Gurobi Optimizer version 12.0.1 build v12.0.1rc0 (linux64 - "Debian GNU/Linux 12 (bookworm)")

CPU model: Intel(R) Xeon(R) Gold 5122 CPU @ 3.60GHz, instruction set [SSE2|AVX|AVX2|AVX512]
Thread count: 8 physical cores, 16 logical processors, using up to 1 threads

Non-default parameters:
TimeLimit  7198.321024
Threads  1

Optimize a model with 1265 rows, 717 columns and 3597 nonzeros
Model fingerprint: 0x09f41760
Variable types: 97 continuous, 620 integer (620 binary)
Coefficient statistics:
  Matrix range     [1e-06, 2e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [3e-01, 1e+00]
  RHS range        [1e-06, 2e+00]
Found heuristic solution: objective 9.0000000
Presolve removed 328 rows and 143 columns
Presolve time: 0.03s
Presolved: 937 rows, 574 columns, 4693 nonzeros
Variable types: 58 continuous, 516 integer (516 binary)

Root relaxation: objective 1.723814e+00, 514 iterations, 0.01 seconds (0.01 work units)

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0    1.72381    0  156    9.00000    1.72381  80.8%     -    0s
H    0     0                       8.0000000    1.72381  78.5%     -    0s
H    0     0                       7.0000000    1.72381  75.4%     -    0s
     0     0    2.18102    0  173    7.00000    2.18102  68.8%     -    0s
     0     0    2.19395    0  165    7.00000    2.19395  68.7%     -    0s
     0     0    2.39313    0  161    7.00000    2.39313  65.8%     -    0s
     0     0    2.40721    0  168    7.00000    2.40721  65.6%     -    0s
     0     0    2.40721    0  185    7.00000    2.40721  65.6%     -    0s
     0     0    2.40721    0  178    7.00000    2.40721  65.6%     -    0s
     0     0    2.77193    0  162    7.00000    2.77193  60.4%     -    0s
     0     0    2.89796    0  164    7.00000    2.89796  58.6%     -    0s
     0     0    2.89796    0  172    7.00000    2.89796  58.6%     -    0s
     0     0    3.00000    0  149    7.00000    3.00000  57.1%     -    0s
H    0     0                       6.0000000    3.00000  50.0%     -    0s
     0     0    3.00000    0  149    6.00000    3.00000  50.0%     -    0s
     0     0    3.00000    0  140    6.00000    3.00000  50.0%     -    0s
     0     0    3.00000    0  148    6.00000    3.00000  50.0%     -    0s
     0     0    3.00000    0   87    6.00000    3.00000  50.0%     -    0s
     0     0    3.00000    0  117    6.00000    3.00000  50.0%     -    0s
     0     0    3.00000    0   50    6.00000    3.00000  50.0%     -    0s
H    0     0                       5.0000000    3.00000  40.0%     -    0s
     0     0    3.00000    0   83    5.00000    3.00000  40.0%     -    0s
     0     0    3.00000    0  107    5.00000    3.00000  40.0%     -    0s
     0     0    3.00000    0   81    5.00000    3.00000  40.0%     -    0s
     0     0    3.00000    0   89    5.00000    3.00000  40.0%     -    0s
     0     0    3.00000    0   74    5.00000    3.00000  40.0%     -    0s
H    0     0                       4.0000000    3.00000  25.0%     -    0s
     0     0    3.00000    0   82    4.00000    3.00000  25.0%     -    0s
     0     0 infeasible    0         4.00000    4.00000  0.00%     -    0s

Explored 1 nodes (6438 simplex iterations) in 0.56 seconds (0.39 work units)
Thread count was 1 (of 16 available processors)

Solution count 6: 4 5 6 ... 9

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%

User-callback calls 869, time in user-callback 0.00 sec

 sepatime0 0 0
4.0Stat(MathOptInterface.OPTIMAL, 4.0, 4.0, 0.0, 0.0, 1.678976, 0.5629379749298096, 1, Main.CFLG.LEFPA, "", #undef)
