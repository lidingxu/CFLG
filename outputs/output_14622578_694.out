Data path: /scratch/opt/lxu/CFLG/benchmarks/tree_B
Instance: treeB.300.15
Result path: /scratch/opt/lxu/CFLG/results/tree_B
Solver: Gurobi
Time limit: 7200
Formulation: EFP
Cover: Large
julia --project=. src/main.jl /scratch/opt/lxu/CFLG/benchmarks/tree_B treeB.300.15 /scratch/opt/lxu/CFLG/results/tree_B Gurobi 7200 EFP Large
The latest version of Julia in the `release` channel is 1.11.5+0.x64.linux.gnu. You currently have `1.11.4+0.x64.linux.gnu` installed. Run:

  juliaup update

in your terminal shell to install Julia 1.11.5+0.x64.linux.gnu and update the `release` channel to that version.
/scratch/opt/lxu/CFLG/benchmarks/tree_B Gurobi 7200.0 /scratch/opt/lxu/CFLG/results/tree_B treeB.300.15 EFP Large
/scratch/opt/lxu/CFLG/benchmarks/tree_B/treeB.300.15

 read graph
data loaded

problem_graph/original graph: node: 300/300 edge: 314/314 dlt: 3.04644848069629 break_avg_len: 1.523224240348145 break_max_len: 1.996631463959332elapsed CPU time: 0.055473 seconds
Set parameter TokenServer to value "solice01.zib.de"
Set parameter Threads to value 1
Set parameter OutputFlag to value 1
Set parameter MIPGap to value 0.0001
Set parameter TimeLimit to value 7199.944527

 more cuts: false 3.04644848069629 false
is_attach:falseformulation:EFP0 314 0

 model loaded

Min ye[1] + ye[2] + ye[3] + ye[4] + ye[5] + ye[6] + ye[7] + ye[8] + ye[9] + ye[10] + ye[11] + ye[12] + ye[13] + ye[14] + ye[15] + ye[16] + ye[17] + ye[18] + ye[19] + ye[20] + ye[21] + ye[22] + ye[23] + ye[24] + ye[25] + ye[26] + ye[27] + ye[28] + ye[29] + ye[30] + [[...254 terms omitted...]] + ye[285] + ye[286] + ye[287] + ye[288] + ye[289] + ye[290] + ye[291] + ye[292] + ye[293] + ye[294] + ye[295] + ye[296] + ye[297] + ye[298] + ye[299] + ye[300] + ye[301] + ye[302] + ye[303] + ye[304] + ye[305] + ye[306] + ye[307] + ye[308] + ye[309] + ye[310] + ye[311] + ye[312] + ye[313] + ye[314]
Subject to
 q[1,a] ≥ 0
 q[2,a] ≥ 0
 q[3,a] ≥ 0
 q[4,a] ≥ 0
 q[5,a] ≥ 0
 q[6,a] ≥ 0
 q[7,a] ≥ 0
 q[8,a] ≥ 0
 q[9,a] ≥ 0
 q[10,a] ≥ 0
 q[11,a] ≥ 0
 q[12,a] ≥ 0
 q[13,a] ≥ 0
 q[14,a] ≥ 0
 q[15,a] ≥ 0
 q[16,a] ≥ 0
 q[17,a] ≥ 0
 q[18,a] ≥ 0
 q[19,a] ≥ 0
 q[20,a] ≥ 0
 q[21,a] ≥ 0
 q[22,a] ≥ 0
 q[23,a] ≥ 0
 q[24,a] ≥ 0
 q[25,a] ≥ 0
 q[26,a] ≥ 0
 q[27,a] ≥ 0
 q[28,a] ≥ 0
 q[29,a] ≥ 0
 q[30,a] ≥ 0
 q[31,a] ≥ 0
 q[32,a] ≥ 0
 q[33,a] ≥ 0
 q[34,a] ≥ 0
 q[35,a] ≥ 0
 q[36,a] ≥ 0
 q[37,a] ≥ 0
 q[38,a] ≥ 0
 q[39,a] ≥ 0
 q[40,a] ≥ 0
 q[41,a] ≥ 0
 q[42,a] ≥ 0
 q[43,a] ≥ 0
 q[44,a] ≥ 0
 q[45,a] ≥ 0
 q[46,a] ≥ 0
 q[47,a] ≥ 0
 q[48,a] ≥ 0
 q[49,a] ≥ 0
 q[50,a] ≥ 0
[[...13406 constraints skipped...]]
 x[251] + ze[251,(135, :b)] + ze[251,(133, :a)] + ze[251,(72, :a)] = 1
 x[252] + ze[252,(74, :a)] + ze[252,(138, :b)] + ze[252,(269, :b)] + ze[252,(269, :a)] + ze[252,(314, :b)] = 1
 x[253] + ze[253,(179, :a)] + ze[253,(180, :a)] + ze[253,(178, :b)] + ze[253,(96, :b)] + ze[253,(95, :b)] + ze[253,(178, :a)] + ze[253,(96, :a)] + ze[253,(179, :b)] + ze[253,(97, :a)] + ze[253,(52, :b)] + ze[253,(180, :b)] = 1
 x[254] + ze[254,(115, :b)] + ze[254,(115, :a)] + ze[254,(218, :a)] + ze[254,(61, :a)] + ze[254,(216, :b)] + ze[254,(217, :a)] = 1
 x[255] + ze[255,(33, :b)] + ze[255,(210, :b)] + ze[255,(311, :a)] + ze[255,(34, :b)] + ze[255,(33, :a)] + ze[255,(18, :b)] + ze[255,(211, :b)] + ze[255,(210, :a)] + ze[255,(314, :a)] + ze[255,(35, :b)] + ze[255,(211, :a)] = 1
 x[256] + ze[256,(30, :a)] + ze[256,(53, :b)] + ze[256,(53, :a)] + ze[256,(54, :b)] + ze[256,(52, :a)] = 1
 x[257] + ze[257,(202, :a)] + ze[257,(108, :b)] = 1
 x[258] + ze[258,(87, :b)] = 1
 x[259] + ze[259,(91, :a)] + ze[259,(17, :b)] + ze[259,(56, :a)] + ze[259,(16, :a)] + ze[259,(31, :b)] + ze[259,(9, :b)] + ze[259,(51, :b)] + ze[259,(29, :b)] + ze[259,(92, :a)] + ze[259,(94, :b)] + ze[259,(31, :a)] + ze[259,(93, :b)] + ze[259,(50, :b)] + ze[259,(51, :a)] + ze[259,(29, :a)] + ze[259,(57, :a)] + ze[259,(16, :b)] + ze[259,(55, :b)] + ze[259,(50, :a)] + ze[259,(30, :b)] = 1
 x[260] + ze[260,(89, :a)] + ze[260,(49, :b)] + ze[260,(90, :b)] = 1
 x[261] + ze[261,(184, :b)] + ze[261,(147, :a)] + ze[261,(67, :b)] + ze[261,(99, :b)] + ze[261,(287, :a)] + ze[261,(285, :a)] + ze[261,(184, :a)] + ze[261,(162, :b)] + ze[261,(47, :a)] + ze[261,(286, :a)] + ze[261,(86, :b)] + ze[261,(163, :b)] + ze[261,(86, :a)] + ze[261,(287, :b)] + ze[261,(163, :a)] = 1
 x[262] + ze[262,(56, :a)] + ze[262,(16, :a)] + ze[262,(197, :b)] + ze[262,(105, :a)] + ze[262,(31, :b)] + ze[262,(199, :a)] + ze[262,(198, :b)] + ze[262,(196, :b)] + ze[262,(197, :a)] + ze[262,(31, :a)] + ze[262,(196, :a)] + ze[262,(57, :b)] + ze[262,(243, :b)] + ze[262,(29, :a)] + ze[262,(107, :a)] + ze[262,(57, :a)] + ze[262,(56, :b)] + ze[262,(55, :b)] + ze[262,(105, :b)] + ze[262,(195, :b)] + ze[262,(199, :b)] + ze[262,(30, :b)] = 1
 x[263] + ze[263,(146, :a)] + ze[263,(312, :a)] = 1
 x[264] + ze[264,(309, :b)] + ze[264,(82, :a)] + ze[264,(309, :a)] + ze[264,(159, :b)] + ze[264,(84, :b)] + ze[264,(83, :b)] + ze[264,(84, :a)] + ze[264,(159, :a)] + ze[264,(45, :a)] = 1
 x[265] + ze[265,(133, :b)] = 1
 x[266] + ze[266,(233, :a)] + ze[266,(234, :a)] + ze[266,(122, :a)] = 1
 x[267] + ze[267,(17, :b)] + ze[267,(6, :b)] + ze[267,(56, :a)] + ze[267,(16, :a)] + ze[267,(9, :b)] + ze[267,(31, :b)] + ze[267,(17, :a)] + ze[267,(32, :a)] + ze[267,(29, :b)] + ze[267,(6, :a)] + ze[267,(9, :a)] + ze[267,(31, :a)] + ze[267,(3, :a)] + ze[267,(50, :b)] + ze[267,(51, :a)] + ze[267,(29, :a)] + ze[267,(57, :a)] + ze[267,(5, :b)] + ze[267,(16, :b)] + ze[267,(55, :b)] + ze[267,(4, :a)] + ze[267,(30, :b)] = 1
 x[268] + ze[268,(42, :a)] + ze[268,(137, :b)] + ze[268,(137, :a)] + ze[268,(23, :a)] + ze[268,(136, :b)] + ze[268,(264, :a)] + ze[268,(136, :a)] + ze[268,(265, :b)] + ze[268,(266, :b)] = 1
 x[269] + ze[269,(96, :a)] + ze[269,(95, :b)] + ze[269,(95, :a)] + ze[269,(52, :b)] + ze[269,(177, :a)] = 1
 x[270] + ze[270,(135, :a)] + ze[270,(263, :a)] = 1
 x[271] + ze[271,(141, :b)] + ze[271,(75, :a)] + ze[271,(275, :b)] + ze[271,(275, :a)] + ze[271,(140, :b)] = 1
 x[272] + ze[272,(84, :b)] = 1
 x[273] + ze[273,(232, :b)] + ze[273,(119, :a)] + ze[273,(231, :b)] + ze[273,(230, :b)] + ze[273,(121, :b)] = 1
 x[274] + ze[274,(53, :b)] = 1
 x[275] + ze[275,(150, :b)] + ze[275,(291, :b)] = 1
 x[276] + ze[276,(73, :a)] + ze[276,(137, :b)] + ze[276,(137, :a)] + ze[276,(41, :b)] + ze[276,(136, :a)] + ze[276,(266, :b)] + ze[276,(266, :a)] + ze[276,(73, :b)] = 1
 x[277] + ze[277,(100, :a)] + ze[277,(54, :a)] + ze[277,(99, :a)] = 1
 x[278] + ze[278,(136, :b)] = 1
 x[279] + ze[279,(37, :b)] + ze[279,(57, :b)] + ze[279,(57, :a)] + ze[279,(200, :b)] + ze[279,(55, :b)] + ze[279,(200, :a)] + ze[279,(56, :a)] + ze[279,(107, :b)] + ze[279,(31, :b)] + ze[279,(107, :a)] = 1
 x[280] + ze[280,(87, :b)] + ze[280,(164, :b)] + ze[280,(87, :a)] + ze[280,(164, :a)] + ze[280,(48, :a)] = 1
 x[281] + ze[281,(173, :b)] + ze[281,(175, :b)] + ze[281,(176, :a)] + ze[281,(311, :b)] + ze[281,(173, :a)] + ze[281,(51, :b)] + ze[281,(29, :b)] + ze[281,(94, :b)] + ze[281,(93, :b)] + ze[281,(50, :b)] + ze[281,(51, :a)] + ze[281,(94, :a)] + ze[281,(93, :a)] + ze[281,(174, :a)] = 1
 x[282] + ze[282,(36, :b)] + ze[282,(121, :b)] + ze[282,(37, :a)] + ze[282,(64, :b)] + ze[282,(19, :a)] + ze[282,(36, :a)] + ze[282,(121, :a)] + ze[282,(228, :b)] + ze[282,(227, :a)] + ze[282,(232, :b)] + ze[282,(231, :b)] + ze[282,(64, :a)] + ze[282,(65, :b)] + ze[282,(124, :b)] + ze[282,(120, :b)] + ze[282,(228, :a)] + ze[282,(230, :b)] + ze[282,(123, :b)] + ze[282,(122, :b)] + ze[282,(65, :a)] = 1
 x[283] + ze[283,(64, :b)] + ze[283,(122, :b)] + ze[283,(121, :a)] = 1
 x[284] + ze[284,(19, :b)] + ze[284,(5, :a)] + ze[284,(11, :b)] + ze[284,(12, :a)] + ze[284,(8, :a)] + ze[284,(7, :b)] + ze[284,(6, :a)] + ze[284,(11, :a)] + ze[284,(3, :a)] + ze[284,(4, :b)] + ze[284,(7, :a)] + ze[284,(10, :b)] + ze[284,(5, :b)] + ze[284,(20, :b)] + ze[284,(4, :a)] = 1
 x[285] + ze[285,(184, :b)] + ze[285,(147, :a)] + ze[285,(100, :a)] + ze[285,(101, :a)] + ze[285,(67, :b)] + ze[285,(99, :b)] + ze[285,(287, :a)] + ze[285,(285, :a)] + ze[285,(184, :a)] + ze[285,(161, :b)] + ze[285,(99, :a)] + ze[285,(310, :b)] + ze[285,(286, :a)] + ze[285,(310, :a)] + ze[285,(54, :a)] + ze[285,(287, :b)] = 1
 x[286] + ze[286,(37, :b)] + ze[286,(107, :b)] = 1
 x[287] + ze[287,(310, :a)] + ze[287,(147, :a)] + ze[287,(66, :a)] + ze[287,(184, :a)] + ze[287,(38, :a)] = 1
 x[288] + ze[288,(162, :b)] + ze[288,(47, :a)] + ze[288,(310, :b)] = 1
 x[289] + ze[289,(252, :b)] + ze[289,(250, :a)] + ze[289,(248, :a)] + ze[289,(226, :a)] + ze[289,(69, :b)] + ze[289,(68, :b)] + ze[289,(130, :b)] + ze[289,(252, :a)] + ze[289,(39, :b)] + ze[289,(69, :a)] + ze[289,(246, :b)] + ze[289,(251, :a)] + ze[289,(128, :b)] + ze[289,(130, :a)] + ze[289,(247, :b)] + ze[289,(129, :b)] + ze[289,(246, :a)] + ze[289,(248, :b)] + ze[289,(249, :a)] + ze[289,(128, :a)] + ze[289,(247, :a)] + ze[289,(129, :a)] = 1
 x[290] + ze[290,(100, :a)] + ze[290,(101, :a)] + ze[290,(190, :b)] + ze[290,(52, :a)] + ze[290,(189, :b)] + ze[290,(30, :a)] + ze[290,(53, :a)] + ze[290,(190, :a)] + ze[290,(99, :a)] + ze[290,(189, :a)] + ze[290,(54, :b)] + ze[290,(101, :b)] + ze[290,(54, :a)] = 1
 x[291] + ze[291,(233, :a)] + ze[291,(235, :a)] + ze[291,(120, :b)] + ze[291,(64, :b)] + ze[291,(122, :b)] + ze[291,(122, :a)] + ze[291,(121, :a)] = 1
 x[292] + ze[292,(28, :b)] + ze[292,(8, :b)] + ze[292,(42, :a)] + ze[292,(23, :b)] + ze[292,(5, :a)] + ze[292,(14, :b)] + ze[292,(8, :a)] + ze[292,(23, :a)] + ze[292,(41, :a)] + ze[292,(25, :b)] + ze[292,(14, :a)] + ze[292,(13, :b)] + ze[292,(15, :b)] + ze[292,(26, :b)] + ze[292,(13, :a)] + ze[292,(15, :a)] + ze[292,(27, :a)] + ze[292,(24, :b)] = 1
 x[293] + ze[293,(150, :a)] + ze[293,(79, :a)] + ze[293,(291, :b)] + ze[293,(43, :b)] + ze[293,(77, :b)] + ze[293,(291, :a)] + ze[293,(149, :b)] + ze[293,(292, :b)] + ze[293,(292, :a)] + ze[293,(150, :b)] + ze[293,(78, :b)] + ze[293,(79, :b)] = 1
 x[294] + ze[294,(154, :a)] + ze[294,(299, :a)] = 1
 x[295] + ze[295,(297, :a)] + ze[295,(153, :b)] + ze[295,(80, :b)] + ze[295,(44, :a)] + ze[295,(151, :b)] + ze[295,(294, :a)] + ze[295,(153, :a)] + ze[295,(80, :a)] + ze[295,(151, :a)] + ze[295,(298, :b)] + ze[295,(295, :a)] + ze[295,(81, :b)] = 1
 x[296] + ze[296,(205, :a)] + ze[296,(111, :b)] + ze[296,(109, :b)] + ze[296,(109, :a)] + ze[296,(110, :a)] + ze[296,(58, :a)] + ze[296,(108, :a)] = 1
 x[297] + ze[297,(235, :a)] + ze[297,(234, :a)] + ze[297,(122, :a)] = 1
 x[298] + ze[298,(19, :b)] + ze[298,(11, :b)] + ze[298,(20, :a)] + ze[298,(36, :b)] + ze[298,(12, :a)] + ze[298,(37, :a)] + ze[298,(19, :a)] + ze[298,(22, :a)] + ze[298,(7, :b)] + ze[298,(67, :a)] + ze[298,(11, :a)] + ze[298,(4, :b)] + ze[298,(39, :a)] + ze[298,(7, :a)] + ze[298,(10, :b)] + ze[298,(38, :b)] + ze[298,(66, :a)] + ze[298,(20, :b)] + ze[298,(21, :a)] + ze[298,(12, :b)] + ze[298,(38, :a)] = 1
 x[299] + ze[299,(104, :b)] = 1
 x[300] + ze[300,(205, :a)] + ze[300,(111, :b)] + ze[300,(110, :a)] + ze[300,(58, :a)] + ze[300,(109, :b)] + ze[300,(206, :a)] + ze[300,(204, :a)] + ze[300,(208, :b)] + ze[300,(109, :a)] + ze[300,(207, :b)] + ze[300,(108, :a)] + ze[300,(208, :a)] + ze[300,(110, :b)] + ze[300,(207, :a)] = 1
Gurobi Optimizer version 12.0.1 build v12.0.1rc0 (linux64 - "Debian GNU/Linux 12 (bookworm)")

CPU model: Intel(R) Xeon(R) Gold 5122 CPU @ 3.60GHz, instruction set [SSE2|AVX|AVX2|AVX512]
Thread count: 8 physical cores, 16 logical processors, using up to 1 threads

Non-default parameters:
TimeLimit  7199.944527
Threads  1

Optimize a model with 7920 rows, 4658 columns and 21918 nonzeros
Model fingerprint: 0xb18bd9ea
Variable types: 928 continuous, 3730 integer (3730 binary)
Coefficient statistics:
  Matrix range     [1e-06, 4e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [1e+00, 2e+00]
  RHS range        [1e+00, 4e+00]
Found heuristic solution: objective 170.0000000
Presolve removed 2189 rows and 961 columns
Presolve time: 0.17s
Presolved: 5731 rows, 3697 columns, 25588 nonzeros
Variable types: 549 continuous, 3148 integer (3148 binary)

Root relaxation: objective 3.318598e+01, 3015 iterations, 0.04 seconds (0.03 work units)

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0   33.18598    0  689  170.00000   33.18598  80.5%     -    0s
H    0     0                     102.0000000   33.18598  67.5%     -    0s
H    0     0                      89.0000000   33.18598  62.7%     -    0s
H    0     0                      88.0000000   33.18598  62.3%     -    0s
     0     0   44.76754    0  693   88.00000   44.76754  49.1%     -    0s
H    0     0                      85.0000000   44.93805  47.1%     -    0s
     0     0   44.93805    0  674   85.00000   44.93805  47.1%     -    0s
     0     0   44.93805    0  686   85.00000   44.93805  47.1%     -    0s
     0     0   52.57340    0  625   85.00000   52.57340  38.1%     -    0s
H    0     0                      83.0000000   52.58421  36.6%     -    0s
H    0     0                      82.0000000   52.58421  35.9%     -    0s
     0     0   52.82451    0  604   82.00000   52.82451  35.6%     -    0s
     0     0   52.82743    0  606   82.00000   52.82743  35.6%     -    0s
     0     0   54.70946    0  561   82.00000   54.70946  33.3%     -    0s
     0     0   55.05000    0  585   82.00000   55.05000  32.9%     -    0s
     0     0   55.13796    0  582   82.00000   55.13796  32.8%     -    0s
     0     0   55.13796    0  582   82.00000   55.13796  32.8%     -    0s
     0     0   55.44971    0  533   82.00000   55.44971  32.4%     -    0s
H    0     0                      81.0000000   55.69971  31.2%     -    0s
     0     0   55.69971    0  453   81.00000   55.69971  31.2%     -    0s
     0     0   55.69971    0  496   81.00000   55.69971  31.2%     -    1s
     0     0   55.69971    0  484   81.00000   55.69971  31.2%     -    1s
     0     0   55.69971    0  288   81.00000   55.69971  31.2%     -    1s
H    0     0                      73.0000000   55.69971  23.7%     -    1s
H    0     0                      70.0000000   55.69971  20.4%     -    1s
H    0     0                      69.0000000   55.69971  19.3%     -    1s
H    0     0                      68.0000000   55.69971  18.1%     -    1s
     0     0   55.69971    0  326   68.00000   55.69971  18.1%     -    1s
     0     0   55.69971    0  362   68.00000   55.69971  18.1%     -    1s
     0     0   55.69971    0  319   68.00000   55.69971  18.1%     -    1s
H    0     0                      67.0000000   55.69971  16.9%     -    1s
     0     2   55.72749    0  267   67.00000   55.72749  16.8%     -    1s
H  270   236                      66.0000000   55.72749  15.6%  25.5    2s
H  539   443                      65.0000000   55.77537  14.2%  23.2    3s
   560   455   63.27307   96  254   65.00000   60.66524  6.67%  22.8    5s
   606   487   63.00000   70  660   65.00000   63.00000  3.08%   122   10s
H  623   473                      64.0000000   63.25000  1.17%   119   12s

Cutting planes:
  Learned: 12
  Gomory: 37
  Lift-and-project: 1
  Cover: 66
  Implied bound: 4
  Clique: 12
  MIR: 48
  StrongCG: 5
  Flow cover: 106
  GUB cover: 40
  Zero half: 27
  RLT: 14
  Relax-and-lift: 1
  BQP: 4
  PSD: 1

Explored 623 nodes (121164 simplex iterations) in 12.11 seconds (7.93 work units)
Thread count was 1 (of 16 available processors)

Solution count 10: 64 65 65 ... 70

Optimal solution found (tolerance 1.00e-04)
Best objective 6.400000000000e+01, best bound 6.400000000000e+01, gap 0.0000%

User-callback calls 6914, time in user-callback 0.01 sec

 sepatime0 0 0
64.0Stat(MathOptInterface.OPTIMAL, 64.0, 64.0, 0.0, 0.0, 0.055473, 12.106702089309692, 623, Main.CFLG.EFP, "", #undef)
